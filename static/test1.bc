; ModuleID = 'llvm-link'
source_filename = "llvm-link"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux-gnu"

%"struct.AP_Param::GroupInfo" = type { i8*, i64, %union.anon, i16, i8, i8 }
%union.anon = type { %"struct.AP_Param::GroupInfo"* }
%class.AC_WPNav = type { i32 (...)**, %"struct.AC_WPNav::wpnav_flags", %class.AP_InertialNav*, %class.AP_AHRS_View*, %class.AC_PosControl*, %class.AC_AttitudeControl*, %class.AP_ParamT.0, %class.AP_ParamT.0, %class.AP_ParamT.0, %class.AP_ParamT.0, %class.AP_ParamT.0, %class.AP_ParamT.0, %class.AP_ParamT.0, %class.AP_ParamT.0, %class.AP_ParamT.0, i8, float, float, float, %class.SCurve, %class.SCurve, %class.SCurve, float, float, %class.SplineCurve, %class.SplineCurve, i8, i8, i32, float, %class.Vector3, %class.Vector3, %class.Vector3, float, float, float, i8, i8, i8, %"struct.AC_WPNav::wpnav_flags", i8, float }
%class.AP_ParamT.0 = type { float }
%class.SCurve = type { float, float, float, float, float, float, i8, [23 x %struct.anon.35], %class.Vector3, %class.Vector3 }
%struct.anon.35 = type { float, i32, float, float, float, float }
%class.SplineCurve = type <{ %class.Vector3, %class.Vector3, %class.Vector3, %class.Vector3, [4 x %class.Vector3], float, float, float, float, float, float, float, float, i8, i8, [2 x i8] }>
%class.Vector3 = type { float, float, float }
%"struct.AC_WPNav::wpnav_flags" = type { i8 }
%class.AP_InertialNav = type { %class.Vector3, %class.Vector3, %class.AP_AHRS* }
%class.AP_AHRS = type <{ %class.NavEKF2, %class.NavEKF3, i32, i32, i32, float, float, float, %class.AP_AHRS_View*, i8, [7 x i8], %"class.HALSITL::Semaphore", %"struct.AC_WPNav::wpnav_flags", %"struct.AC_WPNav::wpnav_flags", %class.AP_Enum, i8, %class.AP_ParamT.0, %class.AP_ParamT.0, %class.AP_ParamT.0, %class.AP_ParamT.0, %class.AP_Enum, %"struct.AC_WPNav::wpnav_flags", [2 x i8], float, float, float, float, float, float, i8, i8, i16, i32, i8, i8, [2 x i8], %class.Location, i8, [3 x i8], i32, float, float, i32, i8, [3 x i8], %class.AP_ParamV, %class.Vector3, %class.Matrix3, %class.Matrix3, i32, i8, [3 x i8], i32, i8, [3 x i8], i32, i8, i8, [2 x i8], %struct.anon.14, [4 x i8], %class.AP_AHRS_DCM, %"struct.AP_AHRS_Backend::Estimates", [4 x i8], %class.AP_AHRS_SIM, %"struct.AP_AHRS_Backend::Estimates", [4 x i8], %class.AP_AHRS_External, %"struct.AP_AHRS_Backend::Estimates", %class.AP_ParamT.1, [2 x i8] }>
%class.NavEKF2 = type <{ i8, i8, [6 x i8], %class.NavEKF2_core*, i8, [3 x i8], i32, i8, %"struct.AC_WPNav::wpnav_flags", [2 x i8], %class.AP_ParamT.0, %class.AP_ParamT.0, %class.AP_ParamT.0, %class.AP_ParamT.0, %class.AP_ParamT.0, %class.AP_ParamT.0, %class.AP_ParamT.0, %class.AP_ParamT.0, %class.AP_ParamT.0, %class.AP_ParamT.0, %class.AP_ParamT.0, %class.AP_ParamT.0, %class.AP_ParamT.0, %class.AP_ParamT.0, %class.AP_ParamT.1, %"struct.AC_WPNav::wpnav_flags", i8, %class.AP_ParamT.1, %class.AP_ParamT.1, %class.AP_ParamT.1, %class.AP_ParamT.1, %class.AP_ParamT.1, %"struct.AC_WPNav::wpnav_flags", %"struct.AC_WPNav::wpnav_flags", %class.AP_ParamT.0, %class.AP_ParamT.1, %"struct.AC_WPNav::wpnav_flags", i8, %class.AP_ParamT.1, [2 x i8], %class.AP_ParamT.0, %"struct.AC_WPNav::wpnav_flags", [3 x i8], %class.AP_ParamT.0, %class.AP_ParamT.0, %"struct.AC_WPNav::wpnav_flags", %"struct.AC_WPNav::wpnav_flags", %class.AP_ParamT.1, %class.AP_ParamT.0, %class.AP_ParamT.0, %class.AP_ParamT.1, %"struct.AC_WPNav::wpnav_flags", %"struct.AC_WPNav::wpnav_flags", %class.AP_ParamT.0, %class.AP_ParamT.0, %class.AP_ParamT.1, %"struct.AC_WPNav::wpnav_flags", i8, %class.AP_ParamT.0, %"struct.AC_WPNav::wpnav_flags", %"struct.AC_WPNav::wpnav_flags", %"struct.AC_WPNav::wpnav_flags", i8, %class.AP_ParamT.1, [2 x i8], %class.AP_ParamT.0, %"struct.AC_WPNav::wpnav_flags", %"struct.AC_WPNav::wpnav_flags", %"struct.AC_WPNav::wpnav_flags", i8, float, float, float, float, i8, i8, i16, i16, i16, i16, i16, i16, i16, float, float, i8, i8, [2 x i8], float, float, float, float, i8, i8, [2 x i8], float, i8, [3 x i8], float, %class.Location, i8, [3 x i8], i64, i64, %struct.anon, %struct.anon.2, %struct.anon, i8, [3 x i8], i32, [4 x i8], [6 x i8*], i32, [4 x i8] }>
%class.NavEKF2_core = type opaque
%struct.anon.2 = type { i32, i8, i32, %struct.Vector2 }
%struct.Vector2 = type { float, float }
%struct.anon = type { i32, i8, i32, float }
%class.NavEKF3 = type <{ i8, i8, [6 x i8], %class.NavEKF3_core*, i32, i8, %"struct.AC_WPNav::wpnav_flags", [2 x i8], %class.AP_ParamT.0, %class.AP_ParamT.0, %class.AP_ParamT.0, %class.AP_ParamT.0, %class.AP_ParamT.0, %class.AP_ParamT.0, %class.AP_ParamT.0, %class.AP_ParamT.0, %class.AP_ParamT.0, %class.AP_ParamT.0, %class.AP_ParamT.0, %class.AP_ParamT.0, %class.AP_ParamT.0, %class.AP_ParamT.0, %class.AP_ParamT.1, %class.AP_ParamT.1, %class.AP_ParamT.1, %class.AP_ParamT.1, %class.AP_ParamT.1, %class.AP_ParamT.1, %"struct.AC_WPNav::wpnav_flags", %"struct.AC_WPNav::wpnav_flags", [2 x i8], %class.AP_ParamT.0, %class.AP_ParamT.1, %"struct.AC_WPNav::wpnav_flags", i8, %class.AP_ParamT.1, [2 x i8], %class.AP_ParamT.0, %class.AP_ParamT.0, %"struct.AC_WPNav::wpnav_flags", %"struct.AC_WPNav::wpnav_flags", %class.AP_ParamT.1, %class.AP_ParamT.0, %class.AP_ParamT.0, %class.AP_ParamT.1, %"struct.AC_WPNav::wpnav_flags", %"struct.AC_WPNav::wpnav_flags", %class.AP_ParamT.0, %class.AP_ParamT.0, %class.AP_ParamT.1, %"struct.AC_WPNav::wpnav_flags", i8, %class.AP_ParamT.0, %class.AP_ParamT.0, %"struct.AC_WPNav::wpnav_flags", %"struct.AC_WPNav::wpnav_flags", [2 x i8], %class.AP_ParamT.0, %class.AP_ParamT.0, %class.AP_ParamT.0, %"struct.AC_WPNav::wpnav_flags", [3 x i8], %class.AP_ParamT.0, %class.AP_ParamT.1, %"struct.AC_WPNav::wpnav_flags", %"struct.AC_WPNav::wpnav_flags", %"struct.AC_WPNav::wpnav_flags", [3 x i8], %class.AP_ParamT.0, %class.AP_ParamT.4, %class.AP_ParamT.0, %class.AP_ParamT.0, %class.AP_ParamT.0, %class.AP_ParamT.0, %"struct.AC_WPNav::wpnav_flags", [3 x i8], %class.AP_ParamT.0, %class.AP_ParamT.0, %"struct.AC_WPNav::wpnav_flags", %class.AP_Enum, [2 x i8], %class.AP_ParamT.0, float, float, float, float, i16, i16, i16, i16, i16, i16, i16, i16, i16, [2 x i8], i32, float, float, i16, i16, float, float, float, float, i8, [3 x i8], i32, float, i8, i8, i16, i8, i8, i8, i8, float, i16, [6 x i8], i64, i32, [4 x i8], i64, %struct.anon, %struct.anon.2, %struct.anon, i8, [3 x i8], [3 x i8], i8, [3 x float], [3 x float], [4 x i8], [3 x i64], %class.Location, i8, i8, %class.AP_NavEKF_Source, [2 x i8] }>
%class.NavEKF3_core = type opaque
%class.AP_ParamT.4 = type { i32 }
%class.AP_NavEKF_Source = type { [3 x %"struct.AP_NavEKF_Source::SourceSet"], %class.AP_ParamT.1, i8, i8 }
%"struct.AP_NavEKF_Source::SourceSet" = type { %class.AP_Enum, %class.AP_Enum, %class.AP_Enum, %class.AP_Enum, %class.AP_Enum }
%"class.HALSITL::Semaphore" = type <{ %"class.AP_HAL::Semaphore", %union.pthread_mutex_t, i64, i8, [7 x i8] }>
%"class.AP_HAL::Semaphore" = type { i32 (...)** }
%union.pthread_mutex_t = type { %struct.__pthread_mutex_s }
%struct.__pthread_mutex_s = type { i32, i32, i32, i32, i32, i16, i16, %struct.__pthread_internal_list }
%struct.__pthread_internal_list = type { %struct.__pthread_internal_list*, %struct.__pthread_internal_list* }
%class.AP_Enum = type { %"struct.AC_WPNav::wpnav_flags" }
%class.Location = type { i8, i32, i32, i32 }
%class.AP_ParamV = type { %class.Vector3 }
%class.Matrix3 = type { %class.Vector3, %class.Vector3, %class.Vector3 }
%struct.anon.14 = type <{ i8, i8, i8, i8, i8, [3 x i8], %class.Vector3, %class.Matrix3, %class.Vector3, %class.Vector3, %class.Vector3, %class.Vector3, i8, [3 x i8], float, i8, [3 x i8], float, i8, i8, [2 x i8], float, %class.Vector3, i8, [3 x i8], %class.QuaternionT, i8, [3 x i8], %class.Vector3, i8, [3 x i8], %class.QuaternionT, i8, [3 x i8], %class.Location, i8, [3 x i8], %class.Location, i8, [3 x i8], %struct.Vector2, float, %class.Vector3, float, %class.Location, i8, [3 x i8], %class.Vector3, i8, [3 x i8] }>
%class.QuaternionT = type { float, float, float, float }
%class.AP_AHRS_DCM = type <{ %"class.AP_HAL::Semaphore", %class.AP_ParamT.0*, %class.AP_ParamT.0*, %class.AP_ParamT.0*, %class.AP_ParamT.0*, %"struct.AC_WPNav::wpnav_flags"*, %class.AP_Enum*, %class.Vector3, %class.Matrix3, %class.Matrix3, float, float, float, %class.Vector3, %class.Vector3, %class.Vector3, %class.Vector3, float, %class.Vector3, i8, [3 x i8], [3 x %class.Vector3], float, i16, [2 x i8], float, float, i32, i32, [3 x %class.Vector3], %class.Vector3, float, i32, i8, [3 x i8], float, %struct.Vector2, i8, [3 x i8], i32, i32, i32, float, float, i8, [3 x i8], %class.Vector3, %class.Vector3, i32, float, i32, %class.Vector3, float, i32, i32, %class.Location, %struct.Vector2, %struct.Vector2, %struct.Vector2, float, float, i32, [4 x i8] }>
%class.AP_AHRS_SIM = type <{ %"class.AP_HAL::Semaphore", %class.NavEKF3*, %"class.SITL::SIM"*, i32, [4 x i8] }>
%"class.SITL::SIM" = type <{ %"struct.SITL::sitl_fdm", float, %class.Matrix3, %class.Matrix3, %class.AP_ParamT.0, %class.AP_ParamV, [3 x %class.AP_ParamV], [3 x %class.AP_ParamV], [3 x %class.AP_ParamV], [3 x %"struct.AC_WPNav::wpnav_flags"], [3 x %"struct.AC_WPNav::wpnav_flags"], %"struct.AC_WPNav::wpnav_flags", i8, %class.AP_ParamT.0, %class.AP_ParamT.0, %class.AP_ParamT.0, %class.AP_ParamT.0, %"struct.AC_WPNav::wpnav_flags", [3 x i8], %class.AP_ParamT.0, %class.AP_ParamT.0, %class.AP_ParamT.0, %"struct.AC_WPNav::wpnav_flags", [3 x i8], [2 x %class.AP_ParamT.0], [2 x %class.AP_ParamT.1], [2 x %class.AP_ParamT.1], [2 x %"struct.AC_WPNav::wpnav_flags"], [2 x %class.AP_ParamT.1], [2 x %"struct.AC_WPNav::wpnav_flags"], [2 x %class.AP_ParamT.0], [2 x %"struct.AC_WPNav::wpnav_flags"], [2 x i8], [2 x %class.AP_ParamV], [2 x %"struct.AC_WPNav::wpnav_flags"], [2 x %"struct.AC_WPNav::wpnav_flags"], [2 x %class.AP_ParamT.0], [2 x %class.AP_ParamV], [2 x %class.AP_ParamT.0], [2 x %class.AP_ParamV], [2 x %"struct.AC_WPNav::wpnav_flags"], [2 x i8], %class.AP_ParamT.0, %class.AP_ParamT.0, %class.AP_ParamT.0, %class.AP_ParamT.1, [2 x i8], %class.AP_ParamT.0, %class.AP_ParamT.0, %"struct.AC_WPNav::wpnav_flags", %"struct.AC_WPNav::wpnav_flags", %"struct.AC_WPNav::wpnav_flags", i8, %class.AP_ParamT.4, [2 x %class.AP_Enum], %"struct.AC_WPNav::wpnav_flags", i8, %class.AP_ParamT.1, %"struct.AC_WPNav::wpnav_flags", %"struct.AC_WPNav::wpnav_flags", %class.AP_ParamT.1, [2 x i8], %class.AP_ParamT.0, %"struct.AC_WPNav::wpnav_flags", %"struct.AC_WPNav::wpnav_flags", [2 x i8], %class.AP_ParamT.0, %"struct.AC_WPNav::wpnav_flags", %"struct.AC_WPNav::wpnav_flags", [2 x i8], %class.AP_ParamT.4, [8 x %class.AP_ParamT.0], [8 x %class.AP_ParamT.4], %class.AP_ParamT.0, %class.AP_ParamT.1, %class.AP_ParamT.1, %class.AP_ParamT.4, %class.AP_ParamT.1, [2 x i8], %class.AP_ParamT.0, [3 x %"class.SITL::SIM::BaroParm"], [2 x %"class.SITL::SIM::AirspeedParm"], %"struct.AC_WPNav::wpnav_flags", [3 x i8], float, float, float, %class.AP_ParamT.0, %class.AP_ParamT.0, %class.AP_ParamT.0, %class.AP_ParamT.0, %"struct.AC_WPNav::wpnav_flags", [3 x i8], %class.AP_ParamT.0, %class.AP_ParamT.0, %class.AP_ParamT.1, %class.AP_Enum, i8, %class.AP_ParamT.1, [2 x i8], %class.AP_ParamT.0, %class.AP_ParamT.0, %"struct.AC_WPNav::wpnav_flags", [3 x i8], %class.AP_ParamV, %class.AP_ParamT.0, %class.AP_ParamV, %class.AP_ParamV, %class.AP_ParamV, %class.AP_ParamV, %class.AP_ParamT.0, %class.AP_ParamT.0, %class.AP_ParamT.0, %class.AP_ParamT.0, %"struct.AC_WPNav::wpnav_flags", %"struct.AC_WPNav::wpnav_flags", [2 x i8], %class.AP_ParamV, %class.AP_ParamT.0, %class.AP_ParamT.0, %class.AP_ParamT.1, [2 x i8], %class.AP_ParamT.4, %class.AP_ParamT.0, %struct.anon.19, %struct.anon.19, %"struct.AC_WPNav::wpnav_flags", [3 x i8], %struct.anon.21, %struct.anon.22, %struct.anon.23, i16, i16, [4 x i8], i64, %"class.SITL::Sprayer", %"class.SITL::ShipSim", %"class.SITL::Gripper_Servo", %"class.SITL::Gripper_EPM", %"class.SITL::Parachute", %"class.SITL::Buzzer", %"struct.AC_WPNav::wpnav_flags", %"struct.AC_WPNav::wpnav_flags", %class.AP_Enum, [3 x i8], %"class.SITL::SIM_Precland", %"class.SITL::RichenPower", %"class.SITL::Loweheiser", %"class.SITL::IntelligentEnergy24", %"class.SITL::FETtecOneWireESC", %"struct.AC_WPNav::wpnav_flags", [3 x i8], %class.AP_ParamT.0, %struct.anon.30, %"struct.AC_WPNav::wpnav_flags", [3 x i8], %class.AP_ParamV, %"struct.AC_WPNav::wpnav_flags", i8, %class.AP_ParamT.1, %class.AP_ParamT.1, %"struct.AC_WPNav::wpnav_flags", i8, %class.AP_ParamV, %class.AP_ParamT.0, %class.AP_ParamT.0, %class.AP_ParamT.0, %class.AP_ParamT.0, [3 x %class.AP_InertialSensor_TCal], [3 x %class.AP_ParamT.0], [3 x %class.AP_ParamV], [3 x %class.AP_ParamV], [3 x %class.AP_ParamT.0], [3 x %class.AP_ParamV], [3 x %class.AP_ParamV], %class.AP_ParamV, [3 x %class.AP_ParamT.0], %"struct.AC_WPNav::wpnav_flags", %"struct.AC_WPNav::wpnav_flags", %"struct.AC_WPNav::wpnav_flags", %"struct.AC_WPNav::wpnav_flags", %"struct.AC_WPNav::wpnav_flags", %"struct.AC_WPNav::wpnav_flags", i8, i8 }>
%"struct.SITL::sitl_fdm" = type <{ i64, %class.Location, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, double, %class.QuaternionT, double, %class.Vector3, [4 x i8], double, double, double, i8, [3 x i8], i32, [32 x float], i8, [3 x i8], [12 x float], [4 x i8], double, %class.Vector3, %class.Vector3, %struct.anon.15, [10 x float], [2 x float], %struct.Vector2, i8, [3 x i8], %class.Vector3, float, [4 x i8] }>
%struct.anon.15 = type { %"struct.SITL::vector3f_array", %"struct.SITL::float_array" }
%"struct.SITL::vector3f_array" = type { i16, %class.Vector3* }
%"struct.SITL::float_array" = type { i16, float* }
%"class.SITL::SIM::BaroParm" = type { %class.AP_ParamT.0, %class.AP_ParamT.0, %class.AP_ParamT.0, %"struct.AC_WPNav::wpnav_flags", %"struct.AC_WPNav::wpnav_flags", %class.AP_ParamT.1, %class.AP_ParamT.0, %class.AP_ParamT.0, %class.AP_ParamT.0, %class.AP_ParamT.0, %class.AP_ParamT.0, %class.AP_ParamT.0 }
%"class.SITL::SIM::AirspeedParm" = type <{ %class.AP_ParamT.0, %class.AP_ParamT.0, %class.AP_ParamT.0, %class.AP_ParamT.0, %class.AP_ParamT.0, %class.AP_ParamT.0, %"struct.AC_WPNav::wpnav_flags", [3 x i8] }>
%struct.anon.19 = type { %class.AP_ParamT.0, %class.AP_ParamT.0, %class.AP_ParamT.0, %class.AP_ParamT.4, i32 }
%struct.anon.21 = type { %"struct.AC_WPNav::wpnav_flags", %class.AP_ParamT.0, %class.AP_ParamT.0, %class.AP_ParamT.0, %class.AP_ParamT.0 }
%struct.anon.22 = type { %class.AP_ParamT.0, %class.AP_ParamT.0 }
%struct.anon.23 = type { %class.AP_ParamT.0, %class.AP_ParamT.0, %class.AP_ParamT.0, %class.AP_ParamT.0 }
%"class.SITL::Sprayer" = type <{ %"struct.AC_WPNav::wpnav_flags", %"struct.AC_WPNav::wpnav_flags", %"struct.AC_WPNav::wpnav_flags", i8, i32, i64, float, float, float, float, float, float, double, i64, i8, [7 x i8] }>
%"class.SITL::ShipSim" = type { %"struct.AC_WPNav::wpnav_flags", %class.AP_ParamT.0, %class.AP_ParamT.0, %class.AP_ParamT.0, %"struct.AC_WPNav::wpnav_flags", %class.AP_ParamV, %class.Location, i8*, i16, i8, %"class.SITL::Ship", i32, float, i32, i32, %class.SocketAPM_native, i8, %struct.__mavlink_status }
%"class.SITL::Ship" = type { %struct.Vector2, float, float, float, %"class.SITL::ShipSim"* }
%class.SocketAPM_native = type <{ i8, [3 x i8], [4 x i32], i32, i32, i8, [3 x i8] }>
%struct.__mavlink_status = type { i8, i8, i8, i32, i8, i8, i8, i16, i16, i8, i8, %struct.__mavlink_signing*, %struct.__mavlink_signing_streams* }
%struct.__mavlink_signing = type { i8, i8, i64, [32 x i8], i1 (%struct.__mavlink_status*, i32)*, i32 }
%struct.__mavlink_signing_streams = type { i16, [16 x %"struct.__mavlink_signing_streams::__mavlink_signing_stream"] }
%"struct.__mavlink_signing_streams::__mavlink_signing_stream" = type { i8, i8, i8, [6 x i8] }
%"class.SITL::Gripper_Servo" = type { %"struct.AC_WPNav::wpnav_flags", %"struct.AC_WPNav::wpnav_flags", %class.AP_ParamT.1, %class.AP_ParamT.1, %"struct.AC_WPNav::wpnav_flags", i32, i64, i8, float, float, float, float, float, i64, float, float }
%"class.SITL::Gripper_EPM" = type <{ %"struct.AC_WPNav::wpnav_flags", %"struct.AC_WPNav::wpnav_flags", [2 x i8], i32, i64, i8, [3 x i8], float, float, float, float, float, i64, float, [4 x i8] }>
%"class.SITL::Parachute" = type <{ %"struct.AC_WPNav::wpnav_flags", %"struct.AC_WPNav::wpnav_flags", [2 x i8], i32, i64, i32, [4 x i8], i64, i8, [7 x i8] }>
%"class.SITL::Buzzer" = type { %"struct.AC_WPNav::wpnav_flags", %"struct.AC_WPNav::wpnav_flags" }
%"class.SITL::SIM_Precland" = type { %"struct.AC_WPNav::wpnav_flags", %class.AP_ParamT.0, %class.AP_ParamT.0, %class.AP_ParamT.0, %class.AP_ParamT.1, %"struct.AC_WPNav::wpnav_flags", %class.AP_ParamT.4, %class.AP_ParamT.0, %class.AP_ParamT.0, %"struct.AC_WPNav::wpnav_flags", %"struct.AC_WPNav::wpnav_flags", %class.AP_Enum, i8, i32, i8, %class.Vector3.25 }
%class.Vector3.25 = type { double, double, double }
%"class.SITL::RichenPower" = type { %"class.SITL::SerialDevice.base", float, float, i32, i32, i32, %"struct.AC_WPNav::wpnav_flags", %"struct.AC_WPNav::wpnav_flags", float, i32, i32, float, %"union.SITL::RichenPower::RichenUnion", i32, %"class.SITL::SIM_GeneratorEngine", [4 x i8] }
%"class.SITL::SerialDevice.base" = type <{ i32 (...)**, %"class.SITL::SIM"*, %class.ByteBuffer*, %class.ByteBuffer*, i32 }>
%class.ByteBuffer = type <{ i8*, i32, %"struct.std::atomic", %"struct.std::atomic", i8, [3 x i8] }>
%"struct.std::atomic" = type { %class.AP_ParamT.4 }
%"union.SITL::RichenPower::RichenUnion" = type { [35 x i16] }
%"class.SITL::SIM_GeneratorEngine" = type { float, float, float, float, float, float, float, i32, i32 }
%"class.SITL::Loweheiser" = type { %"class.SITL::SerialDevice.base", i8, i8, float, float, i32, i32, i8, i8, float, i8, %struct.__mavlink_message, %struct.__mavlink_status, %"class.SITL::SIM_GeneratorEngine", float, float, float, float, float, i32, %struct.__mavlink_status }
%struct.__mavlink_message = type <{ i16, i8, i8, i8, i8, i8, i8, i8, [3 x i8], [33 x i64], [2 x i8], [13 x i8] }>
%"class.SITL::IntelligentEnergy24" = type { %"class.SITL::IntelligentEnergy.base", %"struct.AC_WPNav::wpnav_flags", %"struct.AC_WPNav::wpnav_flags", %class.AP_ParamT.4, float, float, i8, i32, i32 }
%"class.SITL::IntelligentEnergy.base" = type { %"class.SITL::SerialDevice.base" }
%"class.SITL::FETtecOneWireESC" = type { %"class.SITL::SerialDevice.base", %"struct.AC_WPNav::wpnav_flags", %class.AP_ParamT.4, %"union.SITL::FETtecOneWireESC::MessageUnion", i8, %struct.anon.28, [16 x %"class.SITL::FETtecOneWireESC::ESC"] }
%"union.SITL::FETtecOneWireESC::MessageUnion" = type <{ %"class.SITL::FETtecOneWireESC::PackedMessage.27", [245 x i8] }>
%"class.SITL::FETtecOneWireESC::PackedMessage.27" = type { i8, i8, i16, i8, %"class.SITL::FETtecOneWireESC::SetFastComLength", i8 }
%"class.SITL::FETtecOneWireESC::SetFastComLength" = type { i8, i8, i8, i8 }
%struct.anon.28 = type { i8, i8 }
%"class.SITL::FETtecOneWireESC::ESC" = type { i32, [12 x i8], i8, i8, i8, %"class.SITL::FETtecOneWireESC::SetFastComLength", i16, i8, i8, float }
%struct.anon.30 = type { [16 x [32 x %struct.anon.31]], [16 x i8], i32 }
%struct.anon.31 = type { [3 x i8] }
%class.AP_InertialSensor_TCal = type { %class.AP_Enum, %class.AP_ParamT.0, %class.AP_ParamT.0, [3 x %class.AP_ParamV], [3 x %class.AP_ParamV], %class.Vector3, %class.Vector3, %"class.AP_InertialSensor_TCal::Learn"* }
%"class.AP_InertialSensor_TCal::Learn" = type <{ [2 x %"struct.AP_InertialSensor_TCal::Learn::LearnState"], float, float, i32, [4 x i8], %class.AP_InertialSensor_TCal*, %class.Vector3, [4 x i8] }>
%"struct.AP_InertialSensor_TCal::Learn::LearnState" = type { float, i32, %class.Vector3, i32, %class.LowPassFilter2p, %class.PolyFit }
%class.LowPassFilter2p = type { %"struct.DigitalBiquadFilter<float>::biquad_params", %class.DigitalBiquadFilter }
%"struct.DigitalBiquadFilter<float>::biquad_params" = type { float, float, float, float, float, float, float }
%class.DigitalBiquadFilter = type <{ float, float, i8, [3 x i8] }>
%class.PolyFit = type { [4 x [4 x double]], [4 x %class.Vector3] }
%class.AP_AHRS_External = type { %"class.AP_HAL::Semaphore" }
%"struct.AP_AHRS_Backend::Estimates" = type <{ float, float, float, %class.Matrix3, %class.Vector3, %class.Vector3, %class.Vector3, %class.Vector3, %class.Location, i8, [3 x i8] }>
%class.AP_ParamT.1 = type { i16 }
%class.AP_AHRS_View = type { i32 (...)**, float, float, float, i32, i32, i32, i8, %class.AP_AHRS*, %class.Matrix3, %class.Matrix3, %class.Matrix3, %class.Vector3, %struct.anon.11, float, float }
%struct.anon.11 = type { float, float, float, float, float, float }
%class.AC_PosControl = type { i32 (...)**, %class.AP_AHRS_View*, %class.AP_InertialNav*, %class.AP_Motors*, %class.AC_AttitudeControl*, %class.AP_ParamT.0, %class.AP_ParamT.0, %class.AP_ParamT.0, %class.AC_P_2D, %class.AC_P_1D, [4 x i8], %class.AC_PID_2D, %class.AC_PID_Basic, %class.AC_PID, float, i32, i32, float, float, float, float, float, float, float, float, float, float, float, float, %class.Vector3.25, %class.Vector3, %class.Vector3, %class.Vector3, %class.Vector3, %class.Vector3, i8, float, float, float, float, i32, i32, i8, float }
%class.AP_Motors = type <{ i32 (...)**, %"struct.AP_Motors::AP_Motors_limit", [3 x i8], float, i16, [2 x i8], float, float, float, float, float, float, float, float, float, float, float, float, %class.LowPassFilter, %class.DerivativeFilter, %class.LowPassFilter, i8, i8, [2 x i8], i32, %struct.anon.33, float, float, float, float, %"struct.AC_WPNav::wpnav_flags", i8, i8, i8, float, %class.AP_ParamT.1, [2 x i8], i32, i8*, %"struct.AP_Motors::AP_Motors_limit", i8, i8, i8, i8, [7 x i8] }>
%class.DerivativeFilter = type { %class.FilterWithBuffer.base, i8, float, [7 x i32] }
%class.FilterWithBuffer.base = type <{ %"class.AP_HAL::Semaphore", [7 x float], i8 }>
%class.LowPassFilter = type { float, %class.DigitalBiquadFilter }
%struct.anon.33 = type { i32, float }
%"struct.AP_Motors::AP_Motors_limit" = type { i8, i8, i8, i8, i8 }
%class.AC_P_2D = type { %class.AP_ParamT.0, %struct.Vector2, float, float, float }
%class.AC_P_1D = type { %class.AP_ParamT.0, float, float, float, float, float }
%class.AC_PID_2D = type { %class.AP_ParamT.0, %class.AP_ParamT.0, %class.AP_ParamT.0, %class.AP_ParamT.0, %class.AP_ParamT.0, %class.AP_ParamT.0, %class.AP_ParamT.0, %struct.Vector2, %struct.Vector2, %struct.Vector2, %struct.Vector2, i8, %struct.AP_PIDInfo, %struct.AP_PIDInfo, %class.SlewCalculator2D, float, float, float, float, float, float, float, [4 x i8] }
%struct.AP_PIDInfo = type { float, float, float, float, float, float, float, float, float, float, i8, i8, i8, i8 }
%class.SlewCalculator2D = type { %class.SlewLimiter, %class.SlewLimiter, float, float }
%class.SlewLimiter = type <{ float*, float*, %class.LowPassFilter, float, float, float, float, float, i32, i32, i8, i8, [2 x i8], [2 x i32], [2 x i32], i8, i8, [6 x i8] }>
%class.AC_PID_Basic = type { %class.AP_ParamT.0, %class.AP_ParamT.0, %class.AP_ParamT.0, %class.AP_ParamT.0, %class.AP_ParamT.0, %class.AP_ParamT.0, %class.AP_ParamT.0, float, float, float, float, i8, %struct.AP_PIDInfo, float, float, float, float, float, float, float }
%class.AC_PID = type <{ %class.AP_ParamT.0, %class.AP_ParamT.0, %class.AP_ParamT.0, %class.AP_ParamT.0, %class.AP_ParamT.0, %class.AP_ParamT.0, %class.AP_ParamT.0, %class.AP_ParamT.0, %class.AP_ParamT.0, %class.AP_ParamT.0, %class.AP_ParamT.0, %"struct.AC_WPNav::wpnav_flags", %"struct.AC_WPNav::wpnav_flags", [2 x i8], %class.AP_ParamT.0, [4 x i8], %class.SlewLimiter, %"struct.AC_WPNav::wpnav_flags", [3 x i8], float, float, float, float, i8, [3 x i8], float, [4 x i8], %class.NotchFilter*, %class.NotchFilter*, %struct.AP_PIDInfo, float, float, float, float, float, float, float, float, float, float, [4 x i8] }>
%class.NotchFilter = type opaque
%class.AC_AttitudeControl = type <{ i32 (...)**, %class.AP_ParamT.0, %class.AP_ParamT.0, %class.AP_ParamT.0, %class.AP_ParamT.0, %class.AP_ParamT.0, %class.AP_ParamT.0, %class.AP_ParamT.0, %"struct.AC_WPNav::wpnav_flags", %"struct.AC_WPNav::wpnav_flags", [2 x i8], %class.AC_P, %class.AC_P, %class.AC_P, %class.AP_ParamT.0, %class.AP_ParamT.0, float, %class.Vector3, %class.Vector3, %class.QuaternionT, %class.Vector3, %class.Vector3, %class.Vector3, %class.Vector3, %class.QuaternionT, float, float, float, float, i8, [3 x i8], float, float, float, float, float, float, %class.Vector3, %class.Vector3, %class.Vector3, %class.Vector3, %class.AP_AHRS_View*, %struct.AP_MultiCopter*, %class.AP_Motors*, %struct.anon.34, [4 x i8] }>
%class.AC_P = type { %class.AP_ParamT.0, float }
%struct.AP_MultiCopter = type { %class.AP_ParamT.1 }
%struct.anon.34 = type { float, float, float, float, float }
%class.AP_Terrain = type <{ %"struct.AC_WPNav::wpnav_flags", [3 x i8], %class.AP_ParamT.0, %class.AP_ParamT.1, %class.AP_ParamT.1, %class.AP_ParamT.0, i8, [7 x i8], %"struct.AP_Terrain::grid_cache"*, i32, %"union.AP_Terrain::grid_io_block", [5 x i32], i32, i8, i8, i16, i8, [3 x i8], i32, i8, [3 x i8], float, %class.Location, i8, i8, [2 x i8], %class.Location, i8, [3 x i8], float, i8, [3 x i8], float, i8, i8, i16, i8, [3 x i8], i32, i16, i16, i32, i16, [6 x i8], i8*, i32, i8, [3 x i8] }>
%"struct.AP_Terrain::grid_cache" = type { %"struct.AP_Terrain::grid_block", i32, i32 }
%"struct.AP_Terrain::grid_block" = type <{ i64, i32, i32, i16, i16, i16, [28 x [32 x i16]], i16, i16, i16, i8 }>
%"union.AP_Terrain::grid_io_block" = type { [2048 x i8] }
%struct.Vector2.36 = type { double, double }

$_ZNK8AC_WPNav21get_oa_wp_destinationER8Location = comdat any

$_ZNK8AC_WPNav22reached_wp_destinationEv = comdat any

$_ZNK9AP_ParamTIfL11ap_var_type4EE3getEv = comdat any

$_ZNK9AP_ParamTIfL11ap_var_type4EEcvRKfEv = comdat any

$_ZNK13AC_PosControl6get_dtEv = comdat any

$_ZNK8AC_WPNav18get_terrain_marginEv = comdat any

$_ZN7Vector3IfEC2Efff = comdat any

$_ZN13AC_PosControl19get_vel_desired_cmsEv = comdat any

$_ZNK13AC_PosControl20get_vel_offset_z_cmsEv = comdat any

$_ZNK7Vector3IfE14length_squaredEv = comdat any

$_Z11is_positiveIfEbT_ = comdat any

$_ZNK7Vector3IfE10normalizedEv = comdat any

$_ZNK13AC_PosControl16get_pos_error_cmEv = comdat any

$_ZNK7Vector3IfE3dotERKS0_ = comdat any

$_ZN13AC_PosControl12get_pos_xy_pEv = comdat any

$_ZN7AC_P_2D2kPEv = comdat any

$_ZNK8AC_WPNav19get_wp_accelerationEv = comdat any

$_ZNK13AC_PosControl25get_shaping_jerk_xy_cmsssEv = comdat any

$_Z7is_zeroI9AP_ParamTIfL11ap_var_type4EEEbT_ = comdat any

$_ZN7Vector3IfEC2Ev = comdat any

$_ZNK8AC_WPNav23get_corner_accelerationEv = comdat any

$_ZNK11SplineCurve19reached_destinationEv = comdat any

$_ZNK13AC_PosControl19get_pos_offset_z_cmEv = comdat any

$_ZNK13AC_PosControl23get_accel_offset_z_cmssEv = comdat any

$_ZNK7Vector3IfE8todoubleEv = comdat any

$_Z2sqI9AP_ParamTIfL11ap_var_type4EEEdT_ = comdat any

$_ZN7Vector3IdEC2Eddd = comdat any

$_Z11is_positiveI9AP_ParamTIfL11ap_var_type4EEEbT_ = comdat any

$_Z7is_zerof = comdat any

$_ZNK7Vector3IdE7tofloatEv = comdat any

$_ZNK9AP_ParamTIaL11ap_var_type1EEcvRKaEv = comdat any

$_ZNK10AP_Terrain7enabledEv = comdat any

$_ZNK13AC_PosControl20get_max_speed_up_cmsEv = comdat any

$_ZNK13AC_PosControl20get_max_accel_z_cmssEv = comdat any

$_ZNK13AC_PosControl20get_max_speed_xy_cmsEv = comdat any

$_ZNK13AC_PosControl22get_max_speed_down_cmsEv = comdat any

$_ZNK7Vector3IfE2xyEv = comdat any

$_Z26get_horizontal_distance_cmIfEfRK7Vector2IT_ES4_ = comdat any

$_ZN13AC_PosControl19set_pos_offset_z_cmEf = comdat any

$_ZN7Vector3IfE4zeroEv = comdat any

$_ZNK8AC_WPNav22get_default_speed_downEv = comdat any

$_ZN9AP_ParamTIfL11ap_var_type4EE3setERKf = comdat any

$_ZNK7Vector3IfE7is_zeroEv = comdat any

$_ZN7Vector3IdEC2Ev = comdat any

$_ZN7Vector3IdE2xyEv = comdat any

$_ZNK18AC_AttitudeControl25get_ang_vel_roll_max_radsEv = comdat any

$_ZNK18AC_AttitudeControl26get_ang_vel_pitch_max_radsEv = comdat any

$_ZNK18AC_AttitudeControl12get_input_tcEv = comdat any

$_ZNK18AC_AttitudeControl24get_accel_roll_max_radssEv = comdat any

$_ZNK18AC_AttitudeControl25get_accel_pitch_max_radssEv = comdat any

$_ZNK8AC_WPNav18get_wp_destinationEv = comdat any

$_ZSt4asinIiEN9__gnu_cxx11__enable_ifIXsr12__is_integerIT_EE7__valueEdE6__typeES2_ = comdat any

$_ZN9AP_ParamTIfL11ap_var_type4EEC2Ev = comdat any

$_ZN11SplineCurveC2Ev = comdat any

$_ZN9AP_ParamTIaL11ap_var_type1EEC2Ev = comdat any

$_ZN8AP_ParamC2Ev = comdat any

$_ZN7Vector2IfEC2Ev = comdat any

$_ZNK11SplineCurve25get_destination_speed_maxEv = comdat any

$_ZN11SplineCurve25set_destination_speed_maxEf = comdat any

$_ZN7Vector3IfE2xyEv = comdat any

$_ZN13AC_PosControl20set_pos_target_xy_cmEff = comdat any

$_ZN7Vector2IdEC2Ev = comdat any

$_ZNK7Vector2IdE7tofloatEv = comdat any

$_ZN7Vector2IfEC2Eff = comdat any

$_ZNK13AC_PosControl21get_max_accel_xy_cmssEv = comdat any

$_ZN11SplineCurve19get_destination_velEv = comdat any

$_ZNK11SplineCurve20get_origin_speed_maxEv = comdat any

@llvm.global_ctors = appending global [1 x { i32, void ()*, i8* }] [{ i32, void ()*, i8* } { i32 65535, void ()* @_GLOBAL__sub_I_AC_WPNav.cpp, i8* null }]
@_ZL17DEG_TO_RAD_DOUBLE = internal global double 0.000000e+00, align 8
@_ZL7WGS84_E = internal global double 0.000000e+00, align 8
@.str = private unnamed_addr constant [6 x i8] c"SPEED\00", align 1
@.str.2 = private unnamed_addr constant [7 x i8] c"RADIUS\00", align 1
@.str.3 = private unnamed_addr constant [9 x i8] c"SPEED_UP\00", align 1
@.str.4 = private unnamed_addr constant [9 x i8] c"SPEED_DN\00", align 1
@.str.5 = private unnamed_addr constant [6 x i8] c"ACCEL\00", align 1
@.str.6 = private unnamed_addr constant [8 x i8] c"ACCEL_Z\00", align 1
@.str.7 = private unnamed_addr constant [9 x i8] c"RFND_USE\00", align 1
@.str.8 = private unnamed_addr constant [5 x i8] c"JERK\00", align 1
@.str.9 = private unnamed_addr constant [11 x i8] c"TER_MARGIN\00", align 1
@.str.10 = private unnamed_addr constant [8 x i8] c"ACCEL_C\00", align 1
@.str.11 = private unnamed_addr constant [1 x i8] zeroinitializer, align 1
@_ZN8AC_WPNav8var_infoE = dso_local constant <{ { i8*, i64, { float, [4 x i8] }, i16, i8, i8 }, { i8*, i64, { float, [4 x i8] }, i16, i8, i8 }, { i8*, i64, { float, [4 x i8] }, i16, i8, i8 }, { i8*, i64, { float, [4 x i8] }, i16, i8, i8 }, { i8*, i64, { float, [4 x i8] }, i16, i8, i8 }, { i8*, i64, { float, [4 x i8] }, i16, i8, i8 }, { i8*, i64, { float, [4 x i8] }, i16, i8, i8 }, { i8*, i64, { float, [4 x i8] }, i16, i8, i8 }, { i8*, i64, { float, [4 x i8] }, i16, i8, i8 }, { i8*, i64, { float, [4 x i8] }, i16, i8, i8 }, %"struct.AP_Param::GroupInfo" }> <{ { i8*, i64, { float, [4 x i8] }, i16, i8, i8 } { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str, i32 0, i32 0), i64 48, { float, [4 x i8] } { float 1.000000e+03, [4 x i8] undef }, i16 0, i8 0, i8 4 }, { i8*, i64, { float, [4 x i8] }, i16, i8, i8 } { i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.2, i32 0, i32 0), i64 60, { float, [4 x i8] } { float 2.000000e+02, [4 x i8] undef }, i16 0, i8 1, i8 4 }, { i8*, i64, { float, [4 x i8] }, i16, i8, i8 } { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.3, i32 0, i32 0), i64 52, { float, [4 x i8] } { float 2.500000e+02, [4 x i8] undef }, i16 0, i8 2, i8 4 }, { i8*, i64, { float, [4 x i8] }, i16, i8, i8 } { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.4, i32 0, i32 0), i64 56, { float, [4 x i8] } { float 1.500000e+02, [4 x i8] undef }, i16 0, i8 3, i8 4 }, { i8*, i64, { float, [4 x i8] }, i16, i8, i8 } { i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.5, i32 0, i32 0), i64 64, { float, [4 x i8] } { float 2.500000e+02, [4 x i8] undef }, i16 0, i8 5, i8 4 }, { i8*, i64, { float, [4 x i8] }, i16, i8, i8 } { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.6, i32 0, i32 0), i64 72, { float, [4 x i8] } { float 1.000000e+02, [4 x i8] undef }, i16 0, i8 6, i8 4 }, { i8*, i64, { float, [4 x i8] }, i16, i8, i8 } { i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.7, i32 0, i32 0), i64 2247, { float, [4 x i8] } { float 1.000000e+00, [4 x i8] undef }, i16 0, i8 10, i8 1 }, { i8*, i64, { float, [4 x i8] }, i16, i8, i8 } { i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8, i32 0, i32 0), i64 76, { float, [4 x i8] } { float 1.000000e+00, [4 x i8] undef }, i16 0, i8 11, i8 4 }, { i8*, i64, { float, [4 x i8] }, i16, i8, i8 } { i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.9, i32 0, i32 0), i64 80, { float, [4 x i8] } { float 1.000000e+01, [4 x i8] undef }, i16 0, i8 12, i8 4 }, { i8*, i64, { float, [4 x i8] }, i16, i8, i8 } { i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.10, i32 0, i32 0), i64 68, { float, [4 x i8] } { float 0.000000e+00, [4 x i8] undef }, i16 0, i8 13, i8 4 }, %"struct.AP_Param::GroupInfo" { i8* getelementptr inbounds ([1 x i8], [1 x i8]* @.str.11, i32 0, i32 0), i64 0, %union.anon zeroinitializer, i16 0, i8 -1, i8 0 } }>, align 16
@_ZTV8AC_WPNav = dso_local unnamed_addr constant { [8 x i8*] } { [8 x i8*] [i8* null, i8* bitcast ({ i8*, i8* }* @_ZTI8AC_WPNav to i8*), i8* bitcast (i1 (%class.AC_WPNav*, %class.Location*)* @_ZNK8AC_WPNav21get_oa_wp_destinationER8Location to i8*), i8* bitcast (i1 (%class.AC_WPNav*, %class.Vector3*, i1)* @_ZN8AC_WPNav18set_wp_destinationERK7Vector3IfEb to i8*), i8* bitcast (float (%class.AC_WPNav*)* @_ZNK8AC_WPNav30get_wp_distance_to_destinationEv to i8*), i8* bitcast (i32 (%class.AC_WPNav*)* @_ZNK8AC_WPNav29get_wp_bearing_to_destinationEv to i8*), i8* bitcast (i1 (%class.AC_WPNav*)* @_ZNK8AC_WPNav22reached_wp_destinationEv to i8*), i8* bitcast (i1 (%class.AC_WPNav*)* @_ZN8AC_WPNav12update_wpnavEv to i8*)] }, align 8
@_ZTVN10__cxxabiv117__class_type_infoE = external dso_local global i8*
@_ZTS8AC_WPNav = dso_local constant [10 x i8] c"8AC_WPNav\00", align 1
@_ZTI8AC_WPNav = dso_local constant { i8*, i8* } { i8* bitcast (i8** getelementptr inbounds (i8*, i8** @_ZTVN10__cxxabiv117__class_type_infoE, i64 2) to i8*), i8* getelementptr inbounds ([10 x i8], [10 x i8]* @_ZTS8AC_WPNav, i32 0, i32 0) }, align 8

@_ZN8AC_WPNavC1ERK14AP_InertialNavRK12AP_AHRS_ViewR13AC_PosControlRK18AC_AttitudeControl = dso_local unnamed_addr alias void (%class.AC_WPNav*, %class.AP_InertialNav*, %class.AP_AHRS_View*, %class.AC_PosControl*, %class.AC_AttitudeControl*), void (%class.AC_WPNav*, %class.AP_InertialNav*, %class.AP_AHRS_View*, %class.AC_PosControl*, %class.AC_AttitudeControl*)* @_ZN8AC_WPNavC2ERK14AP_InertialNavRK12AP_AHRS_ViewR13AC_PosControlRK18AC_AttitudeControl

; Function Attrs: mustprogress noinline nounwind optnone uwtable
define linkonce_odr dso_local zeroext i1 @_ZNK8AC_WPNav21get_oa_wp_destinationER8Location(%class.AC_WPNav* nonnull align 8 dereferenceable(2256) %this, %class.Location* nonnull align 4 dereferenceable(16) %destination) unnamed_addr #0 comdat align 2 {
entry:
  %this.addr = alloca %class.AC_WPNav*, align 8
  %destination.addr = alloca %class.Location*, align 8
  store %class.AC_WPNav* %this, %class.AC_WPNav** %this.addr, align 8
  store %class.Location* %destination, %class.Location** %destination.addr, align 8
  %this1 = load %class.AC_WPNav*, %class.AC_WPNav** %this.addr, align 8
  %0 = load %class.Location*, %class.Location** %destination.addr, align 8
  %call = call zeroext i1 @_ZNK8AC_WPNav22get_wp_destination_locER8Location(%class.AC_WPNav* nonnull align 8 dereferenceable(2256) %this1, %class.Location* nonnull align 4 dereferenceable(16) %0)
  ret i1 %call
}

; Function Attrs: mustprogress noinline nounwind optnone uwtable
define dso_local zeroext i1 @_ZN8AC_WPNav18set_wp_destinationERK7Vector3IfEb(%class.AC_WPNav* nonnull align 8 dereferenceable(2256) %this, %class.Vector3* nonnull align 4 dereferenceable(12) %destination, i1 zeroext %terrain_alt) unnamed_addr #1 align 2 {
entry:
  %retval = alloca i1, align 1
  %this.addr = alloca %class.AC_WPNav*, align 8
  %destination.addr = alloca %class.Vector3*, align 8
  %terrain_alt.addr = alloca i8, align 1
  %agg.tmp = alloca %class.Vector3, align 4
  %agg.tmp.coerce = alloca { <2 x float>, float }, align 4
  %origin_speed = alloca float, align 4
  %curr_target_vel = alloca %class.Vector3, align 4
  %origin_terr_offset = alloca float, align 4
  store %class.AC_WPNav* %this, %class.AC_WPNav** %this.addr, align 8
  store %class.Vector3* %destination, %class.Vector3** %destination.addr, align 8
  %frombool = zext i1 %terrain_alt to i8
  store i8 %frombool, i8* %terrain_alt.addr, align 1
  %this1 = load %class.AC_WPNav*, %class.AC_WPNav** %this.addr, align 8
  %call = call zeroext i1 @_ZNK8AC_WPNav9is_activeEv(%class.AC_WPNav* nonnull align 8 dereferenceable(2256) %this1)
  br i1 %call, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %_flags = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 1
  %0 = bitcast %"struct.AC_WPNav::wpnav_flags"* %_flags to i8*
  %bf.load = load i8, i8* %0, align 8
  %bf.clear = and i8 %bf.load, 1
  %tobool = icmp ne i8 %bf.clear, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false, %entry
  %_wp_desired_speed_xy_cms = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 29
  %1 = load float, float* %_wp_desired_speed_xy_cms, align 8
  call void @_ZN7Vector3IfEC2Ev(%class.Vector3* nonnull align 4 dereferenceable(12) %agg.tmp)
  %2 = bitcast { <2 x float>, float }* %agg.tmp.coerce to i8*
  %3 = bitcast %class.Vector3* %agg.tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %2, i8* align 4 %3, i64 12, i1 false)
  %4 = getelementptr inbounds { <2 x float>, float }, { <2 x float>, float }* %agg.tmp.coerce, i32 0, i32 0
  %5 = load <2 x float>, <2 x float>* %4, align 4
  %6 = getelementptr inbounds { <2 x float>, float }, { <2 x float>, float }* %agg.tmp.coerce, i32 0, i32 1
  %7 = load float, float* %6, align 4
  call void @_ZN8AC_WPNav18wp_and_spline_initEf7Vector3IfE(%class.AC_WPNav* nonnull align 8 dereferenceable(2256) %this1, float %1, <2 x float> %5, float %7)
  br label %if.end

if.end:                                           ; preds = %if.then, %lor.lhs.false
  %_scurve_prev_leg = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 19
  call void @_ZN6SCurve4initEv(%class.SCurve* nonnull align 4 dereferenceable(604) %_scurve_prev_leg)
  store float 0.000000e+00, float* %origin_speed, align 4
  %_destination = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 31
  %_origin = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 30
  %8 = bitcast %class.Vector3* %_origin to i8*
  %9 = bitcast %class.Vector3* %_destination to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %8, i8* align 8 %9, i64 12, i1 false)
  %10 = load i8, i8* %terrain_alt.addr, align 1
  %tobool2 = trunc i8 %10 to i1
  %conv = zext i1 %tobool2 to i32
  %_terrain_alt = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 37
  %11 = load i8, i8* %_terrain_alt, align 1
  %tobool3 = trunc i8 %11 to i1
  %conv4 = zext i1 %tobool3 to i32
  %cmp = icmp eq i32 %conv, %conv4
  br i1 %cmp, label %if.then5, label %if.else14

if.then5:                                         ; preds = %if.end
  %_this_leg_is_spline = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 26
  %12 = load i8, i8* %_this_leg_is_spline, align 8
  %tobool6 = trunc i8 %12 to i1
  br i1 %tobool6, label %if.then7, label %if.else

if.then7:                                         ; preds = %if.then5
  %_pos_control = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 4
  %13 = load %class.AC_PosControl*, %class.AC_PosControl** %_pos_control, align 8
  %call8 = call nonnull align 4 dereferenceable(12) %class.Vector3* @_ZN13AC_PosControl19get_vel_desired_cmsEv(%class.AC_PosControl* nonnull align 8 dereferenceable(1056) %13)
  %14 = bitcast %class.Vector3* %curr_target_vel to i8*
  %15 = bitcast %class.Vector3* %call8 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %14, i8* align 4 %15, i64 12, i1 false)
  %_pos_control9 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 4
  %16 = load %class.AC_PosControl*, %class.AC_PosControl** %_pos_control9, align 8
  %call10 = call float @_ZNK13AC_PosControl20get_vel_offset_z_cmsEv(%class.AC_PosControl* nonnull align 8 dereferenceable(1056) %16)
  %z = getelementptr inbounds %class.Vector3, %class.Vector3* %curr_target_vel, i32 0, i32 2
  %17 = load float, float* %z, align 4
  %sub = fsub float %17, %call10
  store float %sub, float* %z, align 4
  %call11 = call float @_ZNK7Vector3IfE6lengthEv(%class.Vector3* nonnull align 4 dereferenceable(12) %curr_target_vel)
  store float %call11, float* %origin_speed, align 4
  br label %if.end13

if.else:                                          ; preds = %if.then5
  %_scurve_this_leg = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 20
  %_scurve_prev_leg12 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 19
  %18 = bitcast %class.SCurve* %_scurve_prev_leg12 to i8*
  %19 = bitcast %class.SCurve* %_scurve_this_leg to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %18, i8* align 8 %19, i64 604, i1 false)
  br label %if.end13

if.end13:                                         ; preds = %if.else, %if.then7
  br label %if.end35

if.else14:                                        ; preds = %if.end
  %call15 = call zeroext i1 @_ZN8AC_WPNav18get_terrain_offsetERf(%class.AC_WPNav* nonnull align 8 dereferenceable(2256) %this1, float* nonnull align 4 dereferenceable(4) %origin_terr_offset)
  br i1 %call15, label %if.end17, label %if.then16

if.then16:                                        ; preds = %if.else14
  store i1 false, i1* %retval, align 1
  br label %return

if.end17:                                         ; preds = %if.else14
  %20 = load i8, i8* %terrain_alt.addr, align 1
  %tobool18 = trunc i8 %20 to i1
  br i1 %tobool18, label %if.then19, label %if.else26

if.then19:                                        ; preds = %if.end17
  %21 = load float, float* %origin_terr_offset, align 4
  %_origin20 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 30
  %z21 = getelementptr inbounds %class.Vector3, %class.Vector3* %_origin20, i32 0, i32 2
  %22 = load float, float* %z21, align 4
  %sub22 = fsub float %22, %21
  store float %sub22, float* %z21, align 4
  %_pos_control23 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 4
  %23 = load %class.AC_PosControl*, %class.AC_PosControl** %_pos_control23, align 8
  %_pos_control24 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 4
  %24 = load %class.AC_PosControl*, %class.AC_PosControl** %_pos_control24, align 8
  %call25 = call float @_ZNK13AC_PosControl19get_pos_offset_z_cmEv(%class.AC_PosControl* nonnull align 8 dereferenceable(1056) %24)
  %25 = load float, float* %origin_terr_offset, align 4
  %add = fadd float %call25, %25
  call void @_ZN13AC_PosControl19set_pos_offset_z_cmEf(%class.AC_PosControl* nonnull align 8 dereferenceable(1056) %23, float %add)
  br label %if.end34

if.else26:                                        ; preds = %if.end17
  %26 = load float, float* %origin_terr_offset, align 4
  %_origin27 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 30
  %z28 = getelementptr inbounds %class.Vector3, %class.Vector3* %_origin27, i32 0, i32 2
  %27 = load float, float* %z28, align 4
  %add29 = fadd float %27, %26
  store float %add29, float* %z28, align 4
  %_pos_control30 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 4
  %28 = load %class.AC_PosControl*, %class.AC_PosControl** %_pos_control30, align 8
  %_pos_control31 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 4
  %29 = load %class.AC_PosControl*, %class.AC_PosControl** %_pos_control31, align 8
  %call32 = call float @_ZNK13AC_PosControl19get_pos_offset_z_cmEv(%class.AC_PosControl* nonnull align 8 dereferenceable(1056) %29)
  %30 = load float, float* %origin_terr_offset, align 4
  %sub33 = fsub float %call32, %30
  call void @_ZN13AC_PosControl19set_pos_offset_z_cmEf(%class.AC_PosControl* nonnull align 8 dereferenceable(1056) %28, float %sub33)
  br label %if.end34

if.end34:                                         ; preds = %if.else26, %if.then19
  br label %if.end35

if.end35:                                         ; preds = %if.end34, %if.end13
  %31 = load %class.Vector3*, %class.Vector3** %destination.addr, align 8
  %_destination36 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 31
  %32 = bitcast %class.Vector3* %_destination36 to i8*
  %33 = bitcast %class.Vector3* %31 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %32, i8* align 4 %33, i64 12, i1 false)
  %34 = load i8, i8* %terrain_alt.addr, align 1
  %tobool37 = trunc i8 %34 to i1
  %_terrain_alt38 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 37
  %frombool39 = zext i1 %tobool37 to i8
  store i8 %frombool39, i8* %_terrain_alt38, align 1
  %_flags40 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 1
  %35 = bitcast %"struct.AC_WPNav::wpnav_flags"* %_flags40 to i8*
  %bf.load41 = load i8, i8* %35, align 8
  %bf.lshr = lshr i8 %bf.load41, 1
  %bf.clear42 = and i8 %bf.lshr, 1
  %tobool43 = icmp ne i8 %bf.clear42, 0
  br i1 %tobool43, label %land.lhs.true, label %if.else53

land.lhs.true:                                    ; preds = %if.end35
  %_this_leg_is_spline44 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 26
  %36 = load i8, i8* %_this_leg_is_spline44, align 8
  %tobool45 = trunc i8 %36 to i1
  br i1 %tobool45, label %if.else53, label %land.lhs.true46

land.lhs.true46:                                  ; preds = %land.lhs.true
  %_next_leg_is_spline = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 27
  %37 = load i8, i8* %_next_leg_is_spline, align 1
  %tobool47 = trunc i8 %37 to i1
  br i1 %tobool47, label %if.else53, label %land.lhs.true48

land.lhs.true48:                                  ; preds = %land.lhs.true46
  %_scurve_next_leg = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 21
  %call49 = call zeroext i1 @_ZNK6SCurve8finishedEv(%class.SCurve* nonnull align 4 dereferenceable(604) %_scurve_next_leg)
  br i1 %call49, label %if.else53, label %if.then50

if.then50:                                        ; preds = %land.lhs.true48
  %_scurve_next_leg51 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 21
  %_scurve_this_leg52 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 20
  %38 = bitcast %class.SCurve* %_scurve_this_leg52 to i8*
  %39 = bitcast %class.SCurve* %_scurve_next_leg51 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %38, i8* align 4 %39, i64 604, i1 false)
  br label %if.end71

if.else53:                                        ; preds = %land.lhs.true48, %land.lhs.true46, %land.lhs.true, %if.end35
  %_scurve_this_leg54 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 20
  %_origin55 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 30
  %_destination56 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 31
  %_pos_control57 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 4
  %40 = load %class.AC_PosControl*, %class.AC_PosControl** %_pos_control57, align 8
  %call58 = call float @_ZNK13AC_PosControl20get_max_speed_xy_cmsEv(%class.AC_PosControl* nonnull align 8 dereferenceable(1056) %40)
  %_pos_control59 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 4
  %41 = load %class.AC_PosControl*, %class.AC_PosControl** %_pos_control59, align 8
  %call60 = call float @_ZNK13AC_PosControl20get_max_speed_up_cmsEv(%class.AC_PosControl* nonnull align 8 dereferenceable(1056) %41)
  %_pos_control61 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 4
  %42 = load %class.AC_PosControl*, %class.AC_PosControl** %_pos_control61, align 8
  %call62 = call float @_ZNK13AC_PosControl22get_max_speed_down_cmsEv(%class.AC_PosControl* nonnull align 8 dereferenceable(1056) %42)
  %call63 = call float @_ZNK8AC_WPNav19get_wp_accelerationEv(%class.AC_WPNav* nonnull align 8 dereferenceable(2256) %this1)
  %_wp_accel_z_cmss = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 12
  %call64 = call nonnull align 4 dereferenceable(4) float* @_ZNK9AP_ParamTIfL11ap_var_type4EEcvRKfEv(%class.AP_ParamT.0* nonnull align 4 dereferenceable(4) %_wp_accel_z_cmss)
  %43 = load float, float* %call64, align 4
  %_scurve_snap = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 23
  %44 = load float, float* %_scurve_snap, align 4
  %mul = fmul float %44, 1.000000e+02
  %_scurve_jerk = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 22
  %45 = load float, float* %_scurve_jerk, align 8
  %mul65 = fmul float %45, 1.000000e+02
  call void @_ZN6SCurve15calculate_trackERK7Vector3IfES3_fffffff(%class.SCurve* nonnull align 4 dereferenceable(604) %_scurve_this_leg54, %class.Vector3* nonnull align 4 dereferenceable(12) %_origin55, %class.Vector3* nonnull align 4 dereferenceable(12) %_destination56, float %call58, float %call60, float %call62, float %call63, float %43, float %mul, float %mul65)
  %46 = load float, float* %origin_speed, align 4
  %call66 = call zeroext i1 @_Z7is_zerof(float %46)
  br i1 %call66, label %if.end70, label %if.then67

if.then67:                                        ; preds = %if.else53
  %_scurve_this_leg68 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 20
  %47 = load float, float* %origin_speed, align 4
  %call69 = call float @_ZN6SCurve20set_origin_speed_maxEf(%class.SCurve* nonnull align 4 dereferenceable(604) %_scurve_this_leg68, float %47)
  br label %if.end70

if.end70:                                         ; preds = %if.then67, %if.else53
  br label %if.end71

if.end71:                                         ; preds = %if.end70, %if.then50
  %_this_leg_is_spline72 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 26
  store i8 0, i8* %_this_leg_is_spline72, align 8
  %_scurve_next_leg73 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 21
  call void @_ZN6SCurve4initEv(%class.SCurve* nonnull align 4 dereferenceable(604) %_scurve_next_leg73)
  %_next_destination = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 32
  call void @_ZN7Vector3IfE4zeroEv(%class.Vector3* nonnull align 4 dereferenceable(12) %_next_destination)
  %_flags74 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 1
  %48 = bitcast %"struct.AC_WPNav::wpnav_flags"* %_flags74 to i8*
  %bf.load75 = load i8, i8* %48, align 8
  %bf.clear76 = and i8 %bf.load75, -3
  store i8 %bf.clear76, i8* %48, align 8
  %_flags77 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 1
  %49 = bitcast %"struct.AC_WPNav::wpnav_flags"* %_flags77 to i8*
  %bf.load78 = load i8, i8* %49, align 8
  %bf.clear79 = and i8 %bf.load78, -2
  store i8 %bf.clear79, i8* %49, align 8
  store i1 true, i1* %retval, align 1
  br label %return

return:                                           ; preds = %if.end71, %if.then16
  %50 = load i1, i1* %retval, align 1
  ret i1 %50
}

; Function Attrs: mustprogress noinline nounwind optnone uwtable
define dso_local float @_ZNK8AC_WPNav30get_wp_distance_to_destinationEv(%class.AC_WPNav* nonnull align 8 dereferenceable(2256) %this) unnamed_addr #0 align 2 {
entry:
  %this.addr = alloca %class.AC_WPNav*, align 8
  store %class.AC_WPNav* %this, %class.AC_WPNav** %this.addr, align 8
  %this1 = load %class.AC_WPNav*, %class.AC_WPNav** %this.addr, align 8
  %_inav = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 2
  %0 = load %class.AP_InertialNav*, %class.AP_InertialNav** %_inav, align 8
  %call = call nonnull align 4 dereferenceable(8) %struct.Vector2* @_ZNK14AP_InertialNav18get_position_xy_cmEv(%class.AP_InertialNav* nonnull align 8 dereferenceable(32) %0)
  %_destination = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 31
  %call2 = call nonnull align 4 dereferenceable(8) %struct.Vector2* @_ZNK7Vector3IfE2xyEv(%class.Vector3* nonnull align 4 dereferenceable(12) %_destination)
  %call3 = call float @_Z26get_horizontal_distance_cmIfEfRK7Vector2IT_ES4_(%struct.Vector2* nonnull align 4 dereferenceable(8) %call, %struct.Vector2* nonnull align 4 dereferenceable(8) %call2)
  ret float %call3
}

; Function Attrs: mustprogress noinline nounwind optnone uwtable
define dso_local i32 @_ZNK8AC_WPNav29get_wp_bearing_to_destinationEv(%class.AC_WPNav* nonnull align 8 dereferenceable(2256) %this) unnamed_addr #0 align 2 {
entry:
  %this.addr = alloca %class.AC_WPNav*, align 8
  store %class.AC_WPNav* %this, %class.AC_WPNav** %this.addr, align 8
  %this1 = load %class.AC_WPNav*, %class.AC_WPNav** %this.addr, align 8
  %_inav = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 2
  %0 = load %class.AP_InertialNav*, %class.AP_InertialNav** %_inav, align 8
  %call = call nonnull align 4 dereferenceable(8) %struct.Vector2* @_ZNK14AP_InertialNav18get_position_xy_cmEv(%class.AP_InertialNav* nonnull align 8 dereferenceable(32) %0)
  %_destination = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 31
  %call2 = call nonnull align 4 dereferenceable(8) %struct.Vector2* @_ZNK7Vector3IfE2xyEv(%class.Vector3* nonnull align 4 dereferenceable(12) %_destination)
  %call3 = call float @_Z14get_bearing_cdRK7Vector2IfES2_(%struct.Vector2* nonnull align 4 dereferenceable(8) %call, %struct.Vector2* nonnull align 4 dereferenceable(8) %call2)
  %conv = fptosi float %call3 to i32
  ret i32 %conv
}

; Function Attrs: mustprogress noinline nounwind optnone uwtable
define linkonce_odr dso_local zeroext i1 @_ZNK8AC_WPNav22reached_wp_destinationEv(%class.AC_WPNav* nonnull align 8 dereferenceable(2256) %this) unnamed_addr #0 comdat align 2 {
entry:
  %this.addr = alloca %class.AC_WPNav*, align 8
  store %class.AC_WPNav* %this, %class.AC_WPNav** %this.addr, align 8
  %this1 = load %class.AC_WPNav*, %class.AC_WPNav** %this.addr, align 8
  %_flags = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 1
  %0 = bitcast %"struct.AC_WPNav::wpnav_flags"* %_flags to i8*
  %bf.load = load i8, i8* %0, align 8
  %bf.clear = and i8 %bf.load, 1
  %tobool = icmp ne i8 %bf.clear, 0
  ret i1 %tobool
}

; Function Attrs: mustprogress noinline nounwind optnone uwtable
define dso_local zeroext i1 @_ZN8AC_WPNav12update_wpnavEv(%class.AC_WPNav* nonnull align 8 dereferenceable(2256) %this) unnamed_addr #0 align 2 {
entry:
  %this.addr = alloca %class.AC_WPNav*, align 8
  %ret = alloca i8, align 1
  store %class.AC_WPNav* %this, %class.AC_WPNav** %this.addr, align 8
  %this1 = load %class.AC_WPNav*, %class.AC_WPNav** %this.addr, align 8
  %_check_wp_speed_change = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 15
  %0 = load i8, i8* %_check_wp_speed_change, align 4
  %tobool = trunc i8 %0 to i1
  br i1 %tobool, label %if.then, label %if.end9

if.then:                                          ; preds = %entry
  %_wp_speed_cms = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 6
  %call = call nonnull align 4 dereferenceable(4) float* @_ZNK9AP_ParamTIfL11ap_var_type4EE3getEv(%class.AP_ParamT.0* nonnull align 4 dereferenceable(4) %_wp_speed_cms)
  %1 = load float, float* %call, align 4
  %_last_wp_speed_cms = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 16
  %2 = load float, float* %_last_wp_speed_cms, align 8
  %call2 = call zeroext i1 @_Z8is_equalIffENSt9enable_ifIXsr3std17is_floating_pointINSt11common_typeIJT_T0_EE4typeEEE5valueEbE4typeES2_S3_(float %1, float %2)
  br i1 %call2, label %if.end, label %if.then3

if.then3:                                         ; preds = %if.then
  %_wp_speed_cms4 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 6
  %call5 = call nonnull align 4 dereferenceable(4) float* @_ZNK9AP_ParamTIfL11ap_var_type4EEcvRKfEv(%class.AP_ParamT.0* nonnull align 4 dereferenceable(4) %_wp_speed_cms4)
  %3 = load float, float* %call5, align 4
  call void @_ZN8AC_WPNav12set_speed_xyEf(%class.AC_WPNav* nonnull align 8 dereferenceable(2256) %this1, float %3)
  %_wp_speed_cms6 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 6
  %call7 = call nonnull align 4 dereferenceable(4) float* @_ZNK9AP_ParamTIfL11ap_var_type4EEcvRKfEv(%class.AP_ParamT.0* nonnull align 4 dereferenceable(4) %_wp_speed_cms6)
  %4 = load float, float* %call7, align 4
  %_last_wp_speed_cms8 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 16
  store float %4, float* %_last_wp_speed_cms8, align 8
  br label %if.end

if.end:                                           ; preds = %if.then3, %if.then
  br label %if.end9

if.end9:                                          ; preds = %if.end, %entry
  %_wp_speed_up_cms = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 7
  %call10 = call nonnull align 4 dereferenceable(4) float* @_ZNK9AP_ParamTIfL11ap_var_type4EE3getEv(%class.AP_ParamT.0* nonnull align 4 dereferenceable(4) %_wp_speed_up_cms)
  %5 = load float, float* %call10, align 4
  %_last_wp_speed_up_cms = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 17
  %6 = load float, float* %_last_wp_speed_up_cms, align 4
  %call11 = call zeroext i1 @_Z8is_equalIffENSt9enable_ifIXsr3std17is_floating_pointINSt11common_typeIJT_T0_EE4typeEEE5valueEbE4typeES2_S3_(float %5, float %6)
  br i1 %call11, label %if.end18, label %if.then12

if.then12:                                        ; preds = %if.end9
  %_wp_speed_up_cms13 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 7
  %call14 = call nonnull align 4 dereferenceable(4) float* @_ZNK9AP_ParamTIfL11ap_var_type4EEcvRKfEv(%class.AP_ParamT.0* nonnull align 4 dereferenceable(4) %_wp_speed_up_cms13)
  %7 = load float, float* %call14, align 4
  call void @_ZN8AC_WPNav12set_speed_upEf(%class.AC_WPNav* nonnull align 8 dereferenceable(2256) %this1, float %7)
  %_wp_speed_up_cms15 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 7
  %call16 = call nonnull align 4 dereferenceable(4) float* @_ZNK9AP_ParamTIfL11ap_var_type4EEcvRKfEv(%class.AP_ParamT.0* nonnull align 4 dereferenceable(4) %_wp_speed_up_cms15)
  %8 = load float, float* %call16, align 4
  %_last_wp_speed_up_cms17 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 17
  store float %8, float* %_last_wp_speed_up_cms17, align 4
  br label %if.end18

if.end18:                                         ; preds = %if.then12, %if.end9
  %_wp_speed_down_cms = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 8
  %call19 = call nonnull align 4 dereferenceable(4) float* @_ZNK9AP_ParamTIfL11ap_var_type4EE3getEv(%class.AP_ParamT.0* nonnull align 4 dereferenceable(4) %_wp_speed_down_cms)
  %9 = load float, float* %call19, align 4
  %_last_wp_speed_down_cms = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 18
  %10 = load float, float* %_last_wp_speed_down_cms, align 8
  %call20 = call zeroext i1 @_Z8is_equalIffENSt9enable_ifIXsr3std17is_floating_pointINSt11common_typeIJT_T0_EE4typeEEE5valueEbE4typeES2_S3_(float %9, float %10)
  br i1 %call20, label %if.end27, label %if.then21

if.then21:                                        ; preds = %if.end18
  %_wp_speed_down_cms22 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 8
  %call23 = call nonnull align 4 dereferenceable(4) float* @_ZNK9AP_ParamTIfL11ap_var_type4EEcvRKfEv(%class.AP_ParamT.0* nonnull align 4 dereferenceable(4) %_wp_speed_down_cms22)
  %11 = load float, float* %call23, align 4
  call void @_ZN8AC_WPNav14set_speed_downEf(%class.AC_WPNav* nonnull align 8 dereferenceable(2256) %this1, float %11)
  %_wp_speed_down_cms24 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 8
  %call25 = call nonnull align 4 dereferenceable(4) float* @_ZNK9AP_ParamTIfL11ap_var_type4EEcvRKfEv(%class.AP_ParamT.0* nonnull align 4 dereferenceable(4) %_wp_speed_down_cms24)
  %12 = load float, float* %call25, align 4
  %_last_wp_speed_down_cms26 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 18
  store float %12, float* %_last_wp_speed_down_cms26, align 8
  br label %if.end27

if.end27:                                         ; preds = %if.then21, %if.end18
  store i8 1, i8* %ret, align 1
  %_pos_control = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 4
  %13 = load %class.AC_PosControl*, %class.AC_PosControl** %_pos_control, align 8
  %call28 = call float @_ZNK13AC_PosControl6get_dtEv(%class.AC_PosControl* nonnull align 8 dereferenceable(1056) %13)
  %call29 = call zeroext i1 @_ZN8AC_WPNav29advance_wp_target_along_trackEf(%class.AC_WPNav* nonnull align 8 dereferenceable(2256) %this1, float %call28)
  br i1 %call29, label %if.end31, label %if.then30

if.then30:                                        ; preds = %if.end27
  store i8 0, i8* %ret, align 1
  br label %if.end31

if.end31:                                         ; preds = %if.then30, %if.end27
  %_pos_control32 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 4
  %14 = load %class.AC_PosControl*, %class.AC_PosControl** %_pos_control32, align 8
  call void @_ZN13AC_PosControl20update_xy_controllerEv(%class.AC_PosControl* nonnull align 8 dereferenceable(1056) %14)
  %call33 = call i32 @_ZN6AP_HAL6millisEv()
  %_wp_last_update = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 28
  store i32 %call33, i32* %_wp_last_update, align 4
  %15 = load i8, i8* %ret, align 1
  %tobool34 = trunc i8 %15 to i1
  ret i1 %tobool34
}

; Function Attrs: mustprogress noinline nounwind optnone uwtable
define linkonce_odr dso_local nonnull align 4 dereferenceable(4) float* @_ZNK9AP_ParamTIfL11ap_var_type4EE3getEv(%class.AP_ParamT.0* nonnull align 4 dereferenceable(4) %this) #0 comdat align 2 {
entry:
  %this.addr = alloca %class.AP_ParamT.0*, align 8
  store %class.AP_ParamT.0* %this, %class.AP_ParamT.0** %this.addr, align 8
  %this1 = load %class.AP_ParamT.0*, %class.AP_ParamT.0** %this.addr, align 8
  %_value = getelementptr inbounds %class.AP_ParamT.0, %class.AP_ParamT.0* %this1, i32 0, i32 0
  ret float* %_value
}

declare dso_local zeroext i1 @_Z8is_equalIffENSt9enable_ifIXsr3std17is_floating_pointINSt11common_typeIJT_T0_EE4typeEEE5valueEbE4typeES2_S3_(float, float) #2

; Function Attrs: mustprogress noinline nounwind optnone uwtable
define linkonce_odr dso_local nonnull align 4 dereferenceable(4) float* @_ZNK9AP_ParamTIfL11ap_var_type4EEcvRKfEv(%class.AP_ParamT.0* nonnull align 4 dereferenceable(4) %this) #0 comdat align 2 {
entry:
  %this.addr = alloca %class.AP_ParamT.0*, align 8
  store %class.AP_ParamT.0* %this, %class.AP_ParamT.0** %this.addr, align 8
  %this1 = load %class.AP_ParamT.0*, %class.AP_ParamT.0** %this.addr, align 8
  %_value = getelementptr inbounds %class.AP_ParamT.0, %class.AP_ParamT.0* %this1, i32 0, i32 0
  ret float* %_value
}

; Function Attrs: mustprogress noinline nounwind optnone uwtable
define dso_local void @_ZN8AC_WPNav12set_speed_xyEf(%class.AC_WPNav* nonnull align 8 dereferenceable(2256) %this, float %speed_cms) #0 align 2 {
entry:
  %this.addr = alloca %class.AC_WPNav*, align 8
  %speed_cms.addr = alloca float, align 4
  store %class.AC_WPNav* %this, %class.AC_WPNav** %this.addr, align 8
  store float %speed_cms, float* %speed_cms.addr, align 4
  %this1 = load %class.AC_WPNav*, %class.AC_WPNav** %this.addr, align 8
  %0 = load float, float* %speed_cms.addr, align 4
  %cmp = fcmp oge float %0, 2.000000e+01
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %_wp_desired_speed_xy_cms = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 29
  %1 = load float, float* %_wp_desired_speed_xy_cms, align 8
  %call = call zeroext i1 @_Z11is_positiveIfEbT_(float %1)
  br i1 %call, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %2 = load float, float* %speed_cms.addr, align 4
  %_offset_vel = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 34
  %3 = load float, float* %_offset_vel, align 4
  %mul = fmul float %2, %3
  %_wp_desired_speed_xy_cms2 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 29
  %4 = load float, float* %_wp_desired_speed_xy_cms2, align 8
  %div = fdiv float %mul, %4
  %_offset_vel3 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 34
  store float %div, float* %_offset_vel3, align 4
  %5 = load float, float* %speed_cms.addr, align 4
  %_wp_desired_speed_xy_cms4 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 29
  store float %5, float* %_wp_desired_speed_xy_cms4, align 8
  %_pos_control = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 4
  %6 = load %class.AC_PosControl*, %class.AC_PosControl** %_pos_control, align 8
  %_wp_desired_speed_xy_cms5 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 29
  %7 = load float, float* %_wp_desired_speed_xy_cms5, align 8
  %call6 = call float @_ZNK8AC_WPNav19get_wp_accelerationEv(%class.AC_WPNav* nonnull align 8 dereferenceable(2256) %this1)
  call void @_ZN13AC_PosControl22set_max_speed_accel_xyEff(%class.AC_PosControl* nonnull align 8 dereferenceable(1056) %6, float %7, float %call6)
  %_pos_control7 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 4
  %8 = load %class.AC_PosControl*, %class.AC_PosControl** %_pos_control7, align 8
  %_wp_desired_speed_xy_cms8 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 29
  %9 = load float, float* %_wp_desired_speed_xy_cms8, align 8
  %call9 = call float @_ZNK8AC_WPNav19get_wp_accelerationEv(%class.AC_WPNav* nonnull align 8 dereferenceable(2256) %this1)
  call void @_ZN13AC_PosControl29set_correction_speed_accel_xyEff(%class.AC_PosControl* nonnull align 8 dereferenceable(1056) %8, float %9, float %call9)
  call void @_ZN8AC_WPNav36update_track_with_speed_accel_limitsEv(%class.AC_WPNav* nonnull align 8 dereferenceable(2256) %this1)
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  ret void
}

; Function Attrs: mustprogress noinline nounwind optnone uwtable
define dso_local void @_ZN8AC_WPNav12set_speed_upEf(%class.AC_WPNav* nonnull align 8 dereferenceable(2256) %this, float %speed_up_cms) #0 align 2 {
entry:
  %this.addr = alloca %class.AC_WPNav*, align 8
  %speed_up_cms.addr = alloca float, align 4
  store %class.AC_WPNav* %this, %class.AC_WPNav** %this.addr, align 8
  store float %speed_up_cms, float* %speed_up_cms.addr, align 4
  %this1 = load %class.AC_WPNav*, %class.AC_WPNav** %this.addr, align 8
  %_pos_control = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 4
  %0 = load %class.AC_PosControl*, %class.AC_PosControl** %_pos_control, align 8
  %_pos_control2 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 4
  %1 = load %class.AC_PosControl*, %class.AC_PosControl** %_pos_control2, align 8
  %call = call float @_ZNK13AC_PosControl22get_max_speed_down_cmsEv(%class.AC_PosControl* nonnull align 8 dereferenceable(1056) %1)
  %2 = load float, float* %speed_up_cms.addr, align 4
  %_pos_control3 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 4
  %3 = load %class.AC_PosControl*, %class.AC_PosControl** %_pos_control3, align 8
  %call4 = call float @_ZNK13AC_PosControl20get_max_accel_z_cmssEv(%class.AC_PosControl* nonnull align 8 dereferenceable(1056) %3)
  call void @_ZN13AC_PosControl21set_max_speed_accel_zEfff(%class.AC_PosControl* nonnull align 8 dereferenceable(1056) %0, float %call, float %2, float %call4)
  call void @_ZN8AC_WPNav36update_track_with_speed_accel_limitsEv(%class.AC_WPNav* nonnull align 8 dereferenceable(2256) %this1)
  ret void
}

; Function Attrs: mustprogress noinline nounwind optnone uwtable
define dso_local void @_ZN8AC_WPNav14set_speed_downEf(%class.AC_WPNav* nonnull align 8 dereferenceable(2256) %this, float %speed_down_cms) #0 align 2 {
entry:
  %this.addr = alloca %class.AC_WPNav*, align 8
  %speed_down_cms.addr = alloca float, align 4
  store %class.AC_WPNav* %this, %class.AC_WPNav** %this.addr, align 8
  store float %speed_down_cms, float* %speed_down_cms.addr, align 4
  %this1 = load %class.AC_WPNav*, %class.AC_WPNav** %this.addr, align 8
  %_pos_control = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 4
  %0 = load %class.AC_PosControl*, %class.AC_PosControl** %_pos_control, align 8
  %1 = load float, float* %speed_down_cms.addr, align 4
  %_pos_control2 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 4
  %2 = load %class.AC_PosControl*, %class.AC_PosControl** %_pos_control2, align 8
  %call = call float @_ZNK13AC_PosControl20get_max_speed_up_cmsEv(%class.AC_PosControl* nonnull align 8 dereferenceable(1056) %2)
  %_pos_control3 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 4
  %3 = load %class.AC_PosControl*, %class.AC_PosControl** %_pos_control3, align 8
  %call4 = call float @_ZNK13AC_PosControl20get_max_accel_z_cmssEv(%class.AC_PosControl* nonnull align 8 dereferenceable(1056) %3)
  call void @_ZN13AC_PosControl21set_max_speed_accel_zEfff(%class.AC_PosControl* nonnull align 8 dereferenceable(1056) %0, float %1, float %call, float %call4)
  call void @_ZN8AC_WPNav36update_track_with_speed_accel_limitsEv(%class.AC_WPNav* nonnull align 8 dereferenceable(2256) %this1)
  ret void
}

; Function Attrs: mustprogress noinline nounwind optnone uwtable
define linkonce_odr dso_local float @_ZNK13AC_PosControl6get_dtEv(%class.AC_PosControl* nonnull align 8 dereferenceable(1056) %this) #0 comdat align 2 {
entry:
  %this.addr = alloca %class.AC_PosControl*, align 8
  store %class.AC_PosControl* %this, %class.AC_PosControl** %this.addr, align 8
  %this1 = load %class.AC_PosControl*, %class.AC_PosControl** %this.addr, align 8
  %_dt = getelementptr inbounds %class.AC_PosControl, %class.AC_PosControl* %this1, i32 0, i32 14
  %0 = load float, float* %_dt, align 8
  ret float %0
}

; Function Attrs: mustprogress noinline nounwind optnone uwtable
define dso_local zeroext i1 @_ZN8AC_WPNav29advance_wp_target_along_trackEf(%class.AC_WPNav* nonnull align 8 dereferenceable(2256) %this, float %dt) #0 align 2 {
entry:
  %retval = alloca i1, align 1
  %this.addr = alloca %class.AC_WPNav*, align 8
  %dt.addr = alloca float, align 4
  %terr_offset = alloca float, align 4
  %offset_z_scaler = alloca float, align 4
  %curr_pos = alloca %class.Vector3*, align 8
  %ref.tmp = alloca %class.Vector3, align 4
  %ref.tmp6 = alloca %class.Vector3, align 4
  %tmp.coerce = alloca { <2 x float>, float }, align 8
  %curr_target_vel = alloca %class.Vector3, align 4
  %track_scaler_dt = alloca float, align 4
  %track_direction = alloca %class.Vector3, align 4
  %tmp.coerce16 = alloca { <2 x float>, float }, align 8
  %track_error = alloca float, align 4
  %ref.tmp17 = alloca %class.Vector3, align 4
  %tmp.coerce20 = alloca { <2 x float>, float }, align 8
  %track_velocity = alloca float, align 4
  %vel_scaler_dt = alloca float, align 4
  %vel_input = alloca float, align 4
  %track_scaler_tc = alloca float, align 4
  %agg.tmp = alloca %class.AP_ParamT.0, align 4
  %target_pos = alloca %class.Vector3, align 4
  %target_vel = alloca %class.Vector3, align 4
  %target_accel = alloca %class.Vector3, align 4
  %s_finished = alloca i8, align 1
  %accel_offset = alloca %class.Vector3, align 4
  %track_direction81 = alloca %class.Vector3, align 4
  %tmp.coerce83 = alloca { <2 x float>, float }, align 8
  %ref.tmp84 = alloca %class.Vector3, align 4
  %ref.tmp85 = alloca %class.Vector3, align 4
  %ref.tmp86 = alloca %class.Vector3, align 4
  %tmp.coerce89 = alloca { <2 x float>, float }, align 8
  %tmp.coerce92 = alloca { <2 x float>, float }, align 8
  %tmp.coerce95 = alloca { <2 x float>, float }, align 8
  %ref.tmp114 = alloca %class.Vector3.25, align 8
  %dist_to_dest = alloca %class.Vector3, align 4
  %tmp.coerce133 = alloca { <2 x float>, float }, align 8
  %agg.tmp135 = alloca %class.AP_ParamT.0, align 4
  store %class.AC_WPNav* %this, %class.AC_WPNav** %this.addr, align 8
  store float %dt, float* %dt.addr, align 4
  %this1 = load %class.AC_WPNav*, %class.AC_WPNav** %this.addr, align 8
  store float 0.000000e+00, float* %terr_offset, align 4
  %_terrain_alt = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 37
  %0 = load i8, i8* %_terrain_alt, align 1
  %tobool = trunc i8 %0 to i1
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %call = call zeroext i1 @_ZN8AC_WPNav18get_terrain_offsetERf(%class.AC_WPNav* nonnull align 8 dereferenceable(2256) %this1, float* nonnull align 4 dereferenceable(4) %terr_offset)
  br i1 %call, label %if.end, label %if.then

if.then:                                          ; preds = %land.lhs.true
  store i1 false, i1* %retval, align 1
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  %_pos_control = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 4
  %1 = load %class.AC_PosControl*, %class.AC_PosControl** %_pos_control, align 8
  %2 = load float, float* %terr_offset, align 4
  %call2 = call float @_ZNK8AC_WPNav18get_terrain_marginEv(%class.AC_WPNav* nonnull align 8 dereferenceable(2256) %this1)
  %mul = fmul float %call2, 1.000000e+02
  %call3 = call float @_ZNK13AC_PosControl19pos_offset_z_scalerEff(%class.AC_PosControl* nonnull align 8 dereferenceable(1056) %1, float %2, float %mul)
  store float %call3, float* %offset_z_scaler, align 4
  %_pos_control4 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 4
  %3 = load %class.AC_PosControl*, %class.AC_PosControl** %_pos_control4, align 8
  %4 = load float, float* %terr_offset, align 4
  call void @_ZN13AC_PosControl19update_pos_offset_zEf(%class.AC_PosControl* nonnull align 8 dereferenceable(1056) %3, float %4)
  %_inav = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 2
  %5 = load %class.AP_InertialNav*, %class.AP_InertialNav** %_inav, align 8
  %call5 = call nonnull align 4 dereferenceable(12) %class.Vector3* @_ZNK14AP_InertialNav19get_position_neu_cmEv(%class.AP_InertialNav* nonnull align 8 dereferenceable(32) %5)
  %6 = load float, float* %terr_offset, align 4
  call void @_ZN7Vector3IfEC2Efff(%class.Vector3* nonnull align 4 dereferenceable(12) %ref.tmp6, float 0.000000e+00, float 0.000000e+00, float %6)
  %call7 = call { <2 x float>, float } @_ZNK7Vector3IfEmiERKS0_(%class.Vector3* nonnull align 4 dereferenceable(12) %call5, %class.Vector3* nonnull align 4 dereferenceable(12) %ref.tmp6)
  store { <2 x float>, float } %call7, { <2 x float>, float }* %tmp.coerce, align 8
  %7 = bitcast %class.Vector3* %ref.tmp to i8*
  %8 = bitcast { <2 x float>, float }* %tmp.coerce to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %7, i8* align 8 %8, i64 12, i1 false)
  store %class.Vector3* %ref.tmp, %class.Vector3** %curr_pos, align 8
  %_pos_control8 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 4
  %9 = load %class.AC_PosControl*, %class.AC_PosControl** %_pos_control8, align 8
  %call9 = call nonnull align 4 dereferenceable(12) %class.Vector3* @_ZN13AC_PosControl19get_vel_desired_cmsEv(%class.AC_PosControl* nonnull align 8 dereferenceable(1056) %9)
  %10 = bitcast %class.Vector3* %curr_target_vel to i8*
  %11 = bitcast %class.Vector3* %call9 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %10, i8* align 4 %11, i64 12, i1 false)
  %_pos_control10 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 4
  %12 = load %class.AC_PosControl*, %class.AC_PosControl** %_pos_control10, align 8
  %call11 = call float @_ZNK13AC_PosControl20get_vel_offset_z_cmsEv(%class.AC_PosControl* nonnull align 8 dereferenceable(1056) %12)
  %z = getelementptr inbounds %class.Vector3, %class.Vector3* %curr_target_vel, i32 0, i32 2
  %13 = load float, float* %z, align 4
  %sub = fsub float %13, %call11
  store float %sub, float* %z, align 4
  store float 1.000000e+00, float* %track_scaler_dt, align 4
  %call12 = call float @_ZNK7Vector3IfE14length_squaredEv(%class.Vector3* nonnull align 4 dereferenceable(12) %curr_target_vel)
  %call13 = call zeroext i1 @_Z11is_positiveIfEbT_(float %call12)
  br i1 %call13, label %if.then14, label %if.end33

if.then14:                                        ; preds = %if.end
  %call15 = call { <2 x float>, float } @_ZNK7Vector3IfE10normalizedEv(%class.Vector3* nonnull align 4 dereferenceable(12) %curr_target_vel)
  store { <2 x float>, float } %call15, { <2 x float>, float }* %tmp.coerce16, align 8
  %14 = bitcast %class.Vector3* %track_direction to i8*
  %15 = bitcast { <2 x float>, float }* %tmp.coerce16 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %14, i8* align 8 %15, i64 12, i1 false)
  %_pos_control18 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 4
  %16 = load %class.AC_PosControl*, %class.AC_PosControl** %_pos_control18, align 8
  %call19 = call { <2 x float>, float } @_ZNK13AC_PosControl16get_pos_error_cmEv(%class.AC_PosControl* nonnull align 8 dereferenceable(1056) %16)
  store { <2 x float>, float } %call19, { <2 x float>, float }* %tmp.coerce20, align 8
  %17 = bitcast %class.Vector3* %ref.tmp17 to i8*
  %18 = bitcast { <2 x float>, float }* %tmp.coerce20 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %17, i8* align 8 %18, i64 12, i1 false)
  %call21 = call float @_ZNK7Vector3IfE3dotERKS0_(%class.Vector3* nonnull align 4 dereferenceable(12) %ref.tmp17, %class.Vector3* nonnull align 4 dereferenceable(12) %track_direction)
  store float %call21, float* %track_error, align 4
  %_inav22 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 2
  %19 = load %class.AP_InertialNav*, %class.AP_InertialNav** %_inav22, align 8
  %call23 = call nonnull align 4 dereferenceable(12) %class.Vector3* @_ZNK14AP_InertialNav20get_velocity_neu_cmsEv(%class.AP_InertialNav* nonnull align 8 dereferenceable(32) %19)
  %call24 = call float @_ZNK7Vector3IfE3dotERKS0_(%class.Vector3* nonnull align 4 dereferenceable(12) %call23, %class.Vector3* nonnull align 4 dereferenceable(12) %track_direction)
  store float %call24, float* %track_velocity, align 4
  %20 = load float, float* %track_velocity, align 4
  %_pos_control25 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 4
  %21 = load %class.AC_PosControl*, %class.AC_PosControl** %_pos_control25, align 8
  %call26 = call nonnull align 4 dereferenceable(24) %class.AC_P_2D* @_ZN13AC_PosControl12get_pos_xy_pEv(%class.AC_PosControl* nonnull align 8 dereferenceable(1056) %21)
  %call27 = call nonnull align 4 dereferenceable(4) %class.AP_ParamT.0* @_ZN7AC_P_2D2kPEv(%class.AC_P_2D* nonnull align 4 dereferenceable(24) %call26)
  %call28 = call nonnull align 4 dereferenceable(4) float* @_ZNK9AP_ParamTIfL11ap_var_type4EEcvRKfEv(%class.AP_ParamT.0* nonnull align 4 dereferenceable(4) %call27)
  %22 = load float, float* %call28, align 4
  %23 = load float, float* %track_error, align 4
  %mul29 = fmul float %22, %23
  %sub30 = fsub float %20, %mul29
  %call31 = call float @_ZNK7Vector3IfE6lengthEv(%class.Vector3* nonnull align 4 dereferenceable(12) %curr_target_vel)
  %div = fdiv float %sub30, %call31
  %add = fadd float 0x3FA99999A0000000, %div
  %call32 = call float @_Z20constrain_value_lineIfET_S0_S0_S0_j(float %add, float 0.000000e+00, float 1.000000e+00, i32 485)
  store float %call32, float* %track_scaler_dt, align 4
  br label %if.end33

if.end33:                                         ; preds = %if.then14, %if.end
  store float 1.000000e+00, float* %vel_scaler_dt, align 4
  %_wp_desired_speed_xy_cms = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 29
  %24 = load float, float* %_wp_desired_speed_xy_cms, align 8
  %call34 = call zeroext i1 @_Z11is_positiveIfEbT_(float %24)
  br i1 %call34, label %if.then35, label %if.end48

if.then35:                                        ; preds = %if.end33
  %_offset_vel = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 34
  %_offset_accel = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 35
  %25 = load float, float* %_offset_accel, align 8
  %26 = load float, float* %dt.addr, align 4
  call void @_Z16update_vel_accelRfffff(float* nonnull align 4 dereferenceable(4) %_offset_vel, float %25, float %26, float 0.000000e+00, float 0.000000e+00)
  %_paused = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 36
  %27 = load i8, i8* %_paused, align 4
  %tobool36 = trunc i8 %27 to i1
  br i1 %tobool36, label %cond.false, label %cond.true

cond.true:                                        ; preds = %if.then35
  %_wp_desired_speed_xy_cms37 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 29
  %28 = load float, float* %_wp_desired_speed_xy_cms37, align 8
  %29 = load float, float* %offset_z_scaler, align 4
  %mul38 = fmul float %28, %29
  br label %cond.end

cond.false:                                       ; preds = %if.then35
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi float [ %mul38, %cond.true ], [ 0.000000e+00, %cond.false ]
  store float %cond, float* %vel_input, align 4
  %30 = load float, float* %vel_input, align 4
  %_offset_vel39 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 34
  %31 = load float, float* %_offset_vel39, align 4
  %_offset_accel40 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 35
  %call41 = call float @_ZNK8AC_WPNav19get_wp_accelerationEv(%class.AC_WPNav* nonnull align 8 dereferenceable(2256) %this1)
  %fneg = fneg float %call41
  %call42 = call float @_ZNK8AC_WPNav19get_wp_accelerationEv(%class.AC_WPNav* nonnull align 8 dereferenceable(2256) %this1)
  %_pos_control43 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 4
  %32 = load %class.AC_PosControl*, %class.AC_PosControl** %_pos_control43, align 8
  %call44 = call float @_ZNK13AC_PosControl25get_shaping_jerk_xy_cmsssEv(%class.AC_PosControl* nonnull align 8 dereferenceable(1056) %32)
  %33 = load float, float* %dt.addr, align 4
  call void @_Z15shape_vel_accelfffRfffffb(float %30, float 0.000000e+00, float %31, float* nonnull align 4 dereferenceable(4) %_offset_accel40, float %fneg, float %call42, float %call44, float %33, i1 zeroext true)
  %_offset_vel45 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 34
  %34 = load float, float* %_offset_vel45, align 4
  %_wp_desired_speed_xy_cms46 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 29
  %35 = load float, float* %_wp_desired_speed_xy_cms46, align 8
  %div47 = fdiv float %34, %35
  store float %div47, float* %vel_scaler_dt, align 4
  br label %if.end48

if.end48:                                         ; preds = %cond.end, %if.end33
  store float 1.000000e+00, float* %track_scaler_tc, align 4
  %_wp_jerk = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 13
  %36 = bitcast %class.AP_ParamT.0* %agg.tmp to i8*
  %37 = bitcast %class.AP_ParamT.0* %_wp_jerk to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %36, i8* align 4 %37, i64 4, i1 false)
  %coerce.dive = getelementptr inbounds %class.AP_ParamT.0, %class.AP_ParamT.0* %agg.tmp, i32 0, i32 0
  %38 = load float, float* %coerce.dive, align 4
  %call49 = call zeroext i1 @_Z7is_zeroI9AP_ParamTIfL11ap_var_type4EEEbT_(float %38)
  br i1 %call49, label %if.end56, label %if.then50

if.then50:                                        ; preds = %if.end48
  %call51 = call float @_ZNK8AC_WPNav19get_wp_accelerationEv(%class.AC_WPNav* nonnull align 8 dereferenceable(2256) %this1)
  %mul52 = fmul float 0x3F847AE140000000, %call51
  %_wp_jerk53 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 13
  %call54 = call nonnull align 4 dereferenceable(4) float* @_ZNK9AP_ParamTIfL11ap_var_type4EEcvRKfEv(%class.AP_ParamT.0* nonnull align 4 dereferenceable(4) %_wp_jerk53)
  %39 = load float, float* %call54, align 4
  %div55 = fdiv float %mul52, %39
  store float %div55, float* %track_scaler_tc, align 4
  br label %if.end56

if.end56:                                         ; preds = %if.then50, %if.end48
  %40 = load float, float* %track_scaler_dt, align 4
  %_track_scalar_dt = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 33
  %41 = load float, float* %_track_scalar_dt, align 8
  %sub57 = fsub float %40, %41
  %42 = load float, float* %dt.addr, align 4
  %43 = load float, float* %track_scaler_tc, align 4
  %div58 = fdiv float %42, %43
  %mul59 = fmul float %sub57, %div58
  %_track_scalar_dt60 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 33
  %44 = load float, float* %_track_scalar_dt60, align 8
  %add61 = fadd float %44, %mul59
  store float %add61, float* %_track_scalar_dt60, align 8
  call void @_ZN7Vector3IfEC2Ev(%class.Vector3* nonnull align 4 dereferenceable(12) %target_pos)
  call void @_ZN7Vector3IfEC2Ev(%class.Vector3* nonnull align 4 dereferenceable(12) %target_vel)
  call void @_ZN7Vector3IfEC2Ev(%class.Vector3* nonnull align 4 dereferenceable(12) %target_accel)
  %_this_leg_is_spline = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 26
  %45 = load i8, i8* %_this_leg_is_spline, align 8
  %tobool62 = trunc i8 %45 to i1
  br i1 %tobool62, label %if.else, label %if.then63

if.then63:                                        ; preds = %if.end56
  %_origin = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 30
  %46 = bitcast %class.Vector3* %target_pos to i8*
  %47 = bitcast %class.Vector3* %_origin to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %46, i8* align 4 %47, i64 12, i1 false)
  %_scurve_this_leg = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 20
  %_scurve_prev_leg = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 19
  %_scurve_next_leg = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 21
  %_wp_radius_cm = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 9
  %call64 = call nonnull align 4 dereferenceable(4) float* @_ZNK9AP_ParamTIfL11ap_var_type4EEcvRKfEv(%class.AP_ParamT.0* nonnull align 4 dereferenceable(4) %_wp_radius_cm)
  %48 = load float, float* %call64, align 4
  %call65 = call float @_ZNK8AC_WPNav23get_corner_accelerationEv(%class.AC_WPNav* nonnull align 8 dereferenceable(2256) %this1)
  %_flags = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 1
  %49 = bitcast %"struct.AC_WPNav::wpnav_flags"* %_flags to i8*
  %bf.load = load i8, i8* %49, align 8
  %bf.lshr = lshr i8 %bf.load, 1
  %bf.clear = and i8 %bf.lshr, 1
  %tobool66 = icmp ne i8 %bf.clear, 0
  %_track_scalar_dt67 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 33
  %50 = load float, float* %_track_scalar_dt67, align 8
  %51 = load float, float* %vel_scaler_dt, align 4
  %mul68 = fmul float %50, %51
  %52 = load float, float* %dt.addr, align 4
  %mul69 = fmul float %mul68, %52
  %call70 = call zeroext i1 @_ZN6SCurve26advance_target_along_trackERS_S0_ffbfR7Vector3IfES3_S3_(%class.SCurve* nonnull align 4 dereferenceable(604) %_scurve_this_leg, %class.SCurve* nonnull align 4 dereferenceable(604) %_scurve_prev_leg, %class.SCurve* nonnull align 4 dereferenceable(604) %_scurve_next_leg, float %48, float %call65, i1 zeroext %tobool66, float %mul69, %class.Vector3* nonnull align 4 dereferenceable(12) %target_pos, %class.Vector3* nonnull align 4 dereferenceable(12) %target_vel, %class.Vector3* nonnull align 4 dereferenceable(12) %target_accel)
  %frombool = zext i1 %call70 to i8
  store i8 %frombool, i8* %s_finished, align 1
  br label %if.end77

if.else:                                          ; preds = %if.end56
  %53 = bitcast %class.Vector3* %target_vel to i8*
  %54 = bitcast %class.Vector3* %curr_target_vel to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %53, i8* align 4 %54, i64 12, i1 false)
  %_spline_this_leg = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 24
  %_track_scalar_dt71 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 33
  %55 = load float, float* %_track_scalar_dt71, align 8
  %56 = load float, float* %vel_scaler_dt, align 4
  %mul72 = fmul float %55, %56
  %57 = load float, float* %dt.addr, align 4
  %mul73 = fmul float %mul72, %57
  call void @_ZN11SplineCurve26advance_target_along_trackEfR7Vector3IfES2_(%class.SplineCurve* nonnull align 4 dereferenceable(130) %_spline_this_leg, float %mul73, %class.Vector3* nonnull align 4 dereferenceable(12) %target_pos, %class.Vector3* nonnull align 4 dereferenceable(12) %target_vel)
  %_spline_this_leg74 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 24
  %call75 = call zeroext i1 @_ZNK11SplineCurve19reached_destinationEv(%class.SplineCurve* nonnull align 4 dereferenceable(130) %_spline_this_leg74)
  %frombool76 = zext i1 %call75 to i8
  store i8 %frombool76, i8* %s_finished, align 1
  br label %if.end77

if.end77:                                         ; preds = %if.else, %if.then63
  call void @_ZN7Vector3IfEC2Ev(%class.Vector3* nonnull align 4 dereferenceable(12) %accel_offset)
  %call78 = call float @_ZNK7Vector3IfE14length_squaredEv(%class.Vector3* nonnull align 4 dereferenceable(12) %target_vel)
  %call79 = call zeroext i1 @_Z11is_positiveIfEbT_(float %call78)
  br i1 %call79, label %if.then80, label %if.end96

if.then80:                                        ; preds = %if.end77
  %call82 = call { <2 x float>, float } @_ZNK7Vector3IfE10normalizedEv(%class.Vector3* nonnull align 4 dereferenceable(12) %target_vel)
  store { <2 x float>, float } %call82, { <2 x float>, float }* %tmp.coerce83, align 8
  %58 = bitcast %class.Vector3* %track_direction81 to i8*
  %59 = bitcast { <2 x float>, float }* %tmp.coerce83 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %58, i8* align 8 %59, i64 12, i1 false)
  %_offset_accel87 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 35
  %60 = load float, float* %_offset_accel87, align 8
  %call88 = call { <2 x float>, float } @_ZNK7Vector3IfEmlEf(%class.Vector3* nonnull align 4 dereferenceable(12) %track_direction81, float %60)
  store { <2 x float>, float } %call88, { <2 x float>, float }* %tmp.coerce89, align 8
  %61 = bitcast %class.Vector3* %ref.tmp86 to i8*
  %62 = bitcast { <2 x float>, float }* %tmp.coerce89 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %61, i8* align 8 %62, i64 12, i1 false)
  %call90 = call float @_ZNK7Vector3IfE6lengthEv(%class.Vector3* nonnull align 4 dereferenceable(12) %target_vel)
  %call91 = call { <2 x float>, float } @_ZNK7Vector3IfEmlEf(%class.Vector3* nonnull align 4 dereferenceable(12) %ref.tmp86, float %call90)
  store { <2 x float>, float } %call91, { <2 x float>, float }* %tmp.coerce92, align 8
  %63 = bitcast %class.Vector3* %ref.tmp85 to i8*
  %64 = bitcast { <2 x float>, float }* %tmp.coerce92 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %63, i8* align 8 %64, i64 12, i1 false)
  %_wp_desired_speed_xy_cms93 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 29
  %65 = load float, float* %_wp_desired_speed_xy_cms93, align 8
  %call94 = call { <2 x float>, float } @_ZNK7Vector3IfEdvEf(%class.Vector3* nonnull align 4 dereferenceable(12) %ref.tmp85, float %65)
  store { <2 x float>, float } %call94, { <2 x float>, float }* %tmp.coerce95, align 8
  %66 = bitcast %class.Vector3* %ref.tmp84 to i8*
  %67 = bitcast { <2 x float>, float }* %tmp.coerce95 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %66, i8* align 8 %67, i64 12, i1 false)
  %68 = bitcast %class.Vector3* %accel_offset to i8*
  %69 = bitcast %class.Vector3* %ref.tmp84 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %68, i8* align 4 %69, i64 12, i1 false)
  br label %if.end96

if.end96:                                         ; preds = %if.then80, %if.end77
  %70 = load float, float* %vel_scaler_dt, align 4
  %call97 = call nonnull align 4 dereferenceable(12) %class.Vector3* @_ZN7Vector3IfEmLEf(%class.Vector3* nonnull align 4 dereferenceable(12) %target_vel, float %70)
  %71 = load float, float* %vel_scaler_dt, align 4
  %call98 = call float @_ZL2sqf(float %71)
  %call99 = call nonnull align 4 dereferenceable(12) %class.Vector3* @_ZN7Vector3IfEmLEf(%class.Vector3* nonnull align 4 dereferenceable(12) %target_accel, float %call98)
  %call100 = call nonnull align 4 dereferenceable(12) %class.Vector3* @_ZN7Vector3IfEpLERKS0_(%class.Vector3* nonnull align 4 dereferenceable(12) %target_accel, %class.Vector3* nonnull align 4 dereferenceable(12) %accel_offset)
  %_pos_control101 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 4
  %72 = load %class.AC_PosControl*, %class.AC_PosControl** %_pos_control101, align 8
  %call102 = call float @_ZNK13AC_PosControl19get_pos_offset_z_cmEv(%class.AC_PosControl* nonnull align 8 dereferenceable(1056) %72)
  %z103 = getelementptr inbounds %class.Vector3, %class.Vector3* %target_pos, i32 0, i32 2
  %73 = load float, float* %z103, align 4
  %add104 = fadd float %73, %call102
  store float %add104, float* %z103, align 4
  %_pos_control105 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 4
  %74 = load %class.AC_PosControl*, %class.AC_PosControl** %_pos_control105, align 8
  %call106 = call float @_ZNK13AC_PosControl20get_vel_offset_z_cmsEv(%class.AC_PosControl* nonnull align 8 dereferenceable(1056) %74)
  %z107 = getelementptr inbounds %class.Vector3, %class.Vector3* %target_vel, i32 0, i32 2
  %75 = load float, float* %z107, align 4
  %add108 = fadd float %75, %call106
  store float %add108, float* %z107, align 4
  %_pos_control109 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 4
  %76 = load %class.AC_PosControl*, %class.AC_PosControl** %_pos_control109, align 8
  %call110 = call float @_ZNK13AC_PosControl23get_accel_offset_z_cmssEv(%class.AC_PosControl* nonnull align 8 dereferenceable(1056) %76)
  %z111 = getelementptr inbounds %class.Vector3, %class.Vector3* %target_accel, i32 0, i32 2
  %77 = load float, float* %z111, align 4
  %add112 = fadd float %77, %call110
  store float %add112, float* %z111, align 4
  %_pos_control113 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 4
  %78 = load %class.AC_PosControl*, %class.AC_PosControl** %_pos_control113, align 8
  call void @_ZNK7Vector3IfE8todoubleEv(%class.Vector3.25* sret(%class.Vector3.25) align 8 %ref.tmp114, %class.Vector3* nonnull align 4 dereferenceable(12) %target_pos)
  call void @_ZN13AC_PosControl17set_pos_vel_accelERK7Vector3IdERKS0_IfES6_(%class.AC_PosControl* nonnull align 8 dereferenceable(1056) %78, %class.Vector3.25* nonnull align 8 dereferenceable(24) %ref.tmp114, %class.Vector3* nonnull align 4 dereferenceable(12) %target_vel, %class.Vector3* nonnull align 4 dereferenceable(12) %target_accel)
  %_flags115 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 1
  %79 = bitcast %"struct.AC_WPNav::wpnav_flags"* %_flags115 to i8*
  %bf.load116 = load i8, i8* %79, align 8
  %bf.clear117 = and i8 %bf.load116, 1
  %tobool118 = icmp ne i8 %bf.clear117, 0
  br i1 %tobool118, label %if.end147, label %if.then119

if.then119:                                       ; preds = %if.end96
  %80 = load i8, i8* %s_finished, align 1
  %tobool120 = trunc i8 %80 to i1
  br i1 %tobool120, label %if.then121, label %if.end146

if.then121:                                       ; preds = %if.then119
  %_flags122 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 1
  %81 = bitcast %"struct.AC_WPNav::wpnav_flags"* %_flags122 to i8*
  %bf.load123 = load i8, i8* %81, align 8
  %bf.lshr124 = lshr i8 %bf.load123, 1
  %bf.clear125 = and i8 %bf.lshr124, 1
  %tobool126 = icmp ne i8 %bf.clear125, 0
  br i1 %tobool126, label %if.then127, label %if.else131

if.then127:                                       ; preds = %if.then121
  %_flags128 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 1
  %82 = bitcast %"struct.AC_WPNav::wpnav_flags"* %_flags128 to i8*
  %bf.load129 = load i8, i8* %82, align 8
  %bf.clear130 = and i8 %bf.load129, -2
  %bf.set = or i8 %bf.clear130, 1
  store i8 %bf.set, i8* %82, align 8
  br label %if.end145

if.else131:                                       ; preds = %if.then121
  %83 = load %class.Vector3*, %class.Vector3** %curr_pos, align 8
  %_destination = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 31
  %call132 = call { <2 x float>, float } @_ZNK7Vector3IfEmiERKS0_(%class.Vector3* nonnull align 4 dereferenceable(12) %83, %class.Vector3* nonnull align 4 dereferenceable(12) %_destination)
  store { <2 x float>, float } %call132, { <2 x float>, float }* %tmp.coerce133, align 8
  %84 = bitcast %class.Vector3* %dist_to_dest to i8*
  %85 = bitcast { <2 x float>, float }* %tmp.coerce133 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %84, i8* align 8 %85, i64 12, i1 false)
  %call134 = call float @_ZNK7Vector3IfE14length_squaredEv(%class.Vector3* nonnull align 4 dereferenceable(12) %dist_to_dest)
  %conv = fpext float %call134 to double
  %_wp_radius_cm136 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 9
  %86 = bitcast %class.AP_ParamT.0* %agg.tmp135 to i8*
  %87 = bitcast %class.AP_ParamT.0* %_wp_radius_cm136 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %86, i8* align 4 %87, i64 4, i1 false)
  %coerce.dive137 = getelementptr inbounds %class.AP_ParamT.0, %class.AP_ParamT.0* %agg.tmp135, i32 0, i32 0
  %88 = load float, float* %coerce.dive137, align 4
  %call138 = call double @_Z2sqI9AP_ParamTIfL11ap_var_type4EEEdT_(float %88)
  %cmp = fcmp ole double %conv, %call138
  br i1 %cmp, label %if.then139, label %if.end144

if.then139:                                       ; preds = %if.else131
  %_flags140 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 1
  %89 = bitcast %"struct.AC_WPNav::wpnav_flags"* %_flags140 to i8*
  %bf.load141 = load i8, i8* %89, align 8
  %bf.clear142 = and i8 %bf.load141, -2
  %bf.set143 = or i8 %bf.clear142, 1
  store i8 %bf.set143, i8* %89, align 8
  br label %if.end144

if.end144:                                        ; preds = %if.then139, %if.else131
  br label %if.end145

if.end145:                                        ; preds = %if.end144, %if.then127
  br label %if.end146

if.end146:                                        ; preds = %if.end145, %if.then119
  br label %if.end147

if.end147:                                        ; preds = %if.end146, %if.end96
  store i1 true, i1* %retval, align 1
  br label %return

return:                                           ; preds = %if.end147, %if.then
  %90 = load i1, i1* %retval, align 1
  ret i1 %90
}

declare dso_local void @_ZN13AC_PosControl20update_xy_controllerEv(%class.AC_PosControl* nonnull align 8 dereferenceable(1056)) #2

declare dso_local i32 @_ZN6AP_HAL6millisEv() #2

; Function Attrs: mustprogress noinline nounwind optnone uwtable
define dso_local zeroext i1 @_ZN8AC_WPNav18get_terrain_offsetERf(%class.AC_WPNav* nonnull align 8 dereferenceable(2256) %this, float* nonnull align 4 dereferenceable(4) %offset_cm) #0 align 2 {
entry:
  %retval = alloca i1, align 1
  %this.addr = alloca %class.AC_WPNav*, align 8
  %offset_cm.addr = alloca float*, align 8
  %terr_alt = alloca float, align 4
  %terrain = alloca %class.AP_Terrain*, align 8
  store %class.AC_WPNav* %this, %class.AC_WPNav** %this.addr, align 8
  store float* %offset_cm, float** %offset_cm.addr, align 8
  %this1 = load %class.AC_WPNav*, %class.AC_WPNav** %this.addr, align 8
  %call = call i32 @_ZNK8AC_WPNav18get_terrain_sourceEv(%class.AC_WPNav* nonnull align 8 dereferenceable(2256) %this1)
  switch i32 %call, label %sw.epilog [
    i32 0, label %sw.bb
    i32 1, label %sw.bb2
    i32 2, label %sw.bb3
  ]

sw.bb:                                            ; preds = %entry
  store i1 false, i1* %retval, align 1
  br label %return

sw.bb2:                                           ; preds = %entry
  %_rangefinder_healthy = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 40
  %0 = load i8, i8* %_rangefinder_healthy, align 8
  %tobool = trunc i8 %0 to i1
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %sw.bb2
  %_rangefinder_terrain_offset_cm = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 41
  %1 = load float, float* %_rangefinder_terrain_offset_cm, align 4
  %2 = load float*, float** %offset_cm.addr, align 8
  store float %1, float* %2, align 4
  store i1 true, i1* %retval, align 1
  br label %return

if.end:                                           ; preds = %sw.bb2
  store i1 false, i1* %retval, align 1
  br label %return

sw.bb3:                                           ; preds = %entry
  store float 0.000000e+00, float* %terr_alt, align 4
  %call4 = call %class.AP_Terrain* @_ZN2AP7terrainEv()
  store %class.AP_Terrain* %call4, %class.AP_Terrain** %terrain, align 8
  %3 = load %class.AP_Terrain*, %class.AP_Terrain** %terrain, align 8
  %cmp = icmp ne %class.AP_Terrain* %3, null
  br i1 %cmp, label %land.lhs.true, label %if.end8

land.lhs.true:                                    ; preds = %sw.bb3
  %4 = load %class.AP_Terrain*, %class.AP_Terrain** %terrain, align 8
  %call5 = call zeroext i1 @_ZN10AP_Terrain20height_above_terrainERfb(%class.AP_Terrain* nonnull align 8 dereferenceable(2221) %4, float* nonnull align 4 dereferenceable(4) %terr_alt, i1 zeroext true)
  br i1 %call5, label %if.then6, label %if.end8

if.then6:                                         ; preds = %land.lhs.true
  %_inav = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 2
  %5 = load %class.AP_InertialNav*, %class.AP_InertialNav** %_inav, align 8
  %call7 = call float @_ZNK14AP_InertialNav20get_position_z_up_cmEv(%class.AP_InertialNav* nonnull align 8 dereferenceable(32) %5)
  %6 = load float, float* %terr_alt, align 4
  %mul = fmul float %6, 1.000000e+02
  %sub = fsub float %call7, %mul
  %7 = load float*, float** %offset_cm.addr, align 8
  store float %sub, float* %7, align 4
  store i1 true, i1* %retval, align 1
  br label %return

if.end8:                                          ; preds = %land.lhs.true, %sw.bb3
  store i1 false, i1* %retval, align 1
  br label %return

sw.epilog:                                        ; preds = %entry
  store i1 false, i1* %retval, align 1
  br label %return

return:                                           ; preds = %sw.epilog, %if.end8, %if.then6, %if.end, %if.then, %sw.bb
  %8 = load i1, i1* %retval, align 1
  ret i1 %8
}

; Function Attrs: mustprogress noinline nounwind optnone uwtable
define linkonce_odr dso_local float @_ZNK8AC_WPNav18get_terrain_marginEv(%class.AC_WPNav* nonnull align 8 dereferenceable(2256) %this) #0 comdat align 2 {
entry:
  %this.addr = alloca %class.AC_WPNav*, align 8
  %ref.tmp = alloca float, align 4
  store %class.AC_WPNav* %this, %class.AC_WPNav** %this.addr, align 8
  %this1 = load %class.AC_WPNav*, %class.AC_WPNav** %this.addr, align 8
  %_terrain_margin = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 14
  store float 0x3FB99999A0000000, float* %ref.tmp, align 4
  %call = call nonnull align 4 dereferenceable(4) float* @_ZL3MAXI9AP_ParamTIfL11ap_var_type4EEfEDTqugtfp_fp0_fp_fp0_ERKT_RKT0_(%class.AP_ParamT.0* nonnull align 4 dereferenceable(4) %_terrain_margin, float* nonnull align 4 dereferenceable(4) %ref.tmp)
  %0 = load float, float* %call, align 4
  ret float %0
}

declare dso_local float @_ZNK13AC_PosControl19pos_offset_z_scalerEff(%class.AC_PosControl* nonnull align 8 dereferenceable(1056), float, float) #2

declare dso_local void @_ZN13AC_PosControl19update_pos_offset_zEf(%class.AC_PosControl* nonnull align 8 dereferenceable(1056), float) #2

declare dso_local nonnull align 4 dereferenceable(12) %class.Vector3* @_ZNK14AP_InertialNav19get_position_neu_cmEv(%class.AP_InertialNav* nonnull align 8 dereferenceable(32)) #2

; Function Attrs: noinline nounwind optnone uwtable
define linkonce_odr dso_local void @_ZN7Vector3IfEC2Efff(%class.Vector3* nonnull align 4 dereferenceable(12) %this, float %x0, float %y0, float %z0) unnamed_addr #3 comdat align 2 {
entry:
  %this.addr = alloca %class.Vector3*, align 8
  %x0.addr = alloca float, align 4
  %y0.addr = alloca float, align 4
  %z0.addr = alloca float, align 4
  store %class.Vector3* %this, %class.Vector3** %this.addr, align 8
  store float %x0, float* %x0.addr, align 4
  store float %y0, float* %y0.addr, align 4
  store float %z0, float* %z0.addr, align 4
  %this1 = load %class.Vector3*, %class.Vector3** %this.addr, align 8
  %x = getelementptr inbounds %class.Vector3, %class.Vector3* %this1, i32 0, i32 0
  %0 = load float, float* %x0.addr, align 4
  store float %0, float* %x, align 4
  %y = getelementptr inbounds %class.Vector3, %class.Vector3* %this1, i32 0, i32 1
  %1 = load float, float* %y0.addr, align 4
  store float %1, float* %y, align 4
  %z = getelementptr inbounds %class.Vector3, %class.Vector3* %this1, i32 0, i32 2
  %2 = load float, float* %z0.addr, align 4
  store float %2, float* %z, align 4
  ret void
}

declare dso_local { <2 x float>, float } @_ZNK7Vector3IfEmiERKS0_(%class.Vector3* nonnull align 4 dereferenceable(12), %class.Vector3* nonnull align 4 dereferenceable(12)) #2

; Function Attrs: argmemonly nofree nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #4

; Function Attrs: mustprogress noinline nounwind optnone uwtable
define linkonce_odr dso_local nonnull align 4 dereferenceable(12) %class.Vector3* @_ZN13AC_PosControl19get_vel_desired_cmsEv(%class.AC_PosControl* nonnull align 8 dereferenceable(1056) %this) #0 comdat align 2 {
entry:
  %this.addr = alloca %class.AC_PosControl*, align 8
  store %class.AC_PosControl* %this, %class.AC_PosControl** %this.addr, align 8
  %this1 = load %class.AC_PosControl*, %class.AC_PosControl** %this.addr, align 8
  %_vel_desired = getelementptr inbounds %class.AC_PosControl, %class.AC_PosControl* %this1, i32 0, i32 30
  ret %class.Vector3* %_vel_desired
}

; Function Attrs: mustprogress noinline nounwind optnone uwtable
define linkonce_odr dso_local float @_ZNK13AC_PosControl20get_vel_offset_z_cmsEv(%class.AC_PosControl* nonnull align 8 dereferenceable(1056) %this) #0 comdat align 2 {
entry:
  %this.addr = alloca %class.AC_PosControl*, align 8
  store %class.AC_PosControl* %this, %class.AC_PosControl** %this.addr, align 8
  %this1 = load %class.AC_PosControl*, %class.AC_PosControl** %this.addr, align 8
  %_vel_offset_z = getelementptr inbounds %class.AC_PosControl, %class.AC_PosControl* %this1, i32 0, i32 38
  %0 = load float, float* %_vel_offset_z, align 8
  ret float %0
}

; Function Attrs: mustprogress noinline nounwind optnone uwtable
define linkonce_odr dso_local float @_ZNK7Vector3IfE14length_squaredEv(%class.Vector3* nonnull align 4 dereferenceable(12) %this) #0 comdat align 2 {
entry:
  %this.addr = alloca %class.Vector3*, align 8
  store %class.Vector3* %this, %class.Vector3** %this.addr, align 8
  %this1 = load %class.Vector3*, %class.Vector3** %this.addr, align 8
  %call = call float @_ZNK7Vector3IfEmlERKS0_(%class.Vector3* nonnull align 4 dereferenceable(12) %this1, %class.Vector3* nonnull align 4 dereferenceable(12) %this1)
  ret float %call
}

; Function Attrs: mustprogress noinline nounwind optnone uwtable
define linkonce_odr dso_local zeroext i1 @_Z11is_positiveIfEbT_(float %fVal1) #0 comdat {
entry:
  %fVal1.addr = alloca float, align 4
  store float %fVal1, float* %fVal1.addr, align 4
  %0 = load float, float* %fVal1.addr, align 4
  %cmp = fcmp oge float %0, 0x3E80000000000000
  ret i1 %cmp
}

; Function Attrs: mustprogress noinline nounwind optnone uwtable
define linkonce_odr dso_local { <2 x float>, float } @_ZNK7Vector3IfE10normalizedEv(%class.Vector3* nonnull align 4 dereferenceable(12) %this) #0 comdat align 2 {
entry:
  %retval = alloca %class.Vector3, align 4
  %this.addr = alloca %class.Vector3*, align 8
  %tmp.coerce = alloca { <2 x float>, float }, align 8
  %retval.coerce = alloca { <2 x float>, float }, align 8
  store %class.Vector3* %this, %class.Vector3** %this.addr, align 8
  %this1 = load %class.Vector3*, %class.Vector3** %this.addr, align 8
  %call = call float @_ZNK7Vector3IfE6lengthEv(%class.Vector3* nonnull align 4 dereferenceable(12) %this1)
  %call2 = call { <2 x float>, float } @_ZNK7Vector3IfEdvEf(%class.Vector3* nonnull align 4 dereferenceable(12) %this1, float %call)
  store { <2 x float>, float } %call2, { <2 x float>, float }* %tmp.coerce, align 8
  %0 = bitcast %class.Vector3* %retval to i8*
  %1 = bitcast { <2 x float>, float }* %tmp.coerce to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %0, i8* align 8 %1, i64 12, i1 false)
  %2 = bitcast { <2 x float>, float }* %retval.coerce to i8*
  %3 = bitcast %class.Vector3* %retval to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %2, i8* align 4 %3, i64 12, i1 false)
  %4 = load { <2 x float>, float }, { <2 x float>, float }* %retval.coerce, align 8
  ret { <2 x float>, float } %4
}

; Function Attrs: mustprogress noinline nounwind optnone uwtable
define linkonce_odr dso_local { <2 x float>, float } @_ZNK13AC_PosControl16get_pos_error_cmEv(%class.AC_PosControl* nonnull align 8 dereferenceable(1056) %this) #0 comdat align 2 {
entry:
  %retval = alloca %class.Vector3, align 4
  %this.addr = alloca %class.AC_PosControl*, align 8
  %ref.tmp = alloca %class.Vector3.25, align 8
  %ref.tmp2 = alloca %class.Vector3.25, align 8
  %tmp.coerce = alloca { <2 x float>, float }, align 8
  %retval.coerce = alloca { <2 x float>, float }, align 8
  store %class.AC_PosControl* %this, %class.AC_PosControl** %this.addr, align 8
  %this1 = load %class.AC_PosControl*, %class.AC_PosControl** %this.addr, align 8
  %_pos_target = getelementptr inbounds %class.AC_PosControl, %class.AC_PosControl* %this1, i32 0, i32 29
  %_inav = getelementptr inbounds %class.AC_PosControl, %class.AC_PosControl* %this1, i32 0, i32 2
  %0 = load %class.AP_InertialNav*, %class.AP_InertialNav** %_inav, align 8
  %call = call nonnull align 4 dereferenceable(12) %class.Vector3* @_ZNK14AP_InertialNav19get_position_neu_cmEv(%class.AP_InertialNav* nonnull align 8 dereferenceable(32) %0)
  call void @_ZNK7Vector3IfE8todoubleEv(%class.Vector3.25* sret(%class.Vector3.25) align 8 %ref.tmp2, %class.Vector3* nonnull align 4 dereferenceable(12) %call)
  call void @_ZNK7Vector3IdEmiERKS0_(%class.Vector3.25* sret(%class.Vector3.25) align 8 %ref.tmp, %class.Vector3.25* nonnull align 8 dereferenceable(24) %_pos_target, %class.Vector3.25* nonnull align 8 dereferenceable(24) %ref.tmp2)
  %call3 = call { <2 x float>, float } @_ZNK7Vector3IdE7tofloatEv(%class.Vector3.25* nonnull align 8 dereferenceable(24) %ref.tmp)
  store { <2 x float>, float } %call3, { <2 x float>, float }* %tmp.coerce, align 8
  %1 = bitcast %class.Vector3* %retval to i8*
  %2 = bitcast { <2 x float>, float }* %tmp.coerce to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %1, i8* align 8 %2, i64 12, i1 false)
  %3 = bitcast { <2 x float>, float }* %retval.coerce to i8*
  %4 = bitcast %class.Vector3* %retval to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %3, i8* align 4 %4, i64 12, i1 false)
  %5 = load { <2 x float>, float }, { <2 x float>, float }* %retval.coerce, align 8
  ret { <2 x float>, float } %5
}

; Function Attrs: mustprogress noinline nounwind optnone uwtable
define linkonce_odr dso_local float @_ZNK7Vector3IfE3dotERKS0_(%class.Vector3* nonnull align 4 dereferenceable(12) %this, %class.Vector3* nonnull align 4 dereferenceable(12) %v) #0 comdat align 2 {
entry:
  %this.addr = alloca %class.Vector3*, align 8
  %v.addr = alloca %class.Vector3*, align 8
  store %class.Vector3* %this, %class.Vector3** %this.addr, align 8
  store %class.Vector3* %v, %class.Vector3** %v.addr, align 8
  %this1 = load %class.Vector3*, %class.Vector3** %this.addr, align 8
  %0 = load %class.Vector3*, %class.Vector3** %v.addr, align 8
  %call = call float @_ZNK7Vector3IfEmlERKS0_(%class.Vector3* nonnull align 4 dereferenceable(12) %this1, %class.Vector3* nonnull align 4 dereferenceable(12) %0)
  ret float %call
}

declare dso_local nonnull align 4 dereferenceable(12) %class.Vector3* @_ZNK14AP_InertialNav20get_velocity_neu_cmsEv(%class.AP_InertialNav* nonnull align 8 dereferenceable(32)) #2

; Function Attrs: mustprogress noinline nounwind optnone uwtable
define linkonce_odr dso_local nonnull align 4 dereferenceable(24) %class.AC_P_2D* @_ZN13AC_PosControl12get_pos_xy_pEv(%class.AC_PosControl* nonnull align 8 dereferenceable(1056) %this) #0 comdat align 2 {
entry:
  %this.addr = alloca %class.AC_PosControl*, align 8
  store %class.AC_PosControl* %this, %class.AC_PosControl** %this.addr, align 8
  %this1 = load %class.AC_PosControl*, %class.AC_PosControl** %this.addr, align 8
  %_p_pos_xy = getelementptr inbounds %class.AC_PosControl, %class.AC_PosControl* %this1, i32 0, i32 8
  ret %class.AC_P_2D* %_p_pos_xy
}

; Function Attrs: mustprogress noinline nounwind optnone uwtable
define linkonce_odr dso_local nonnull align 4 dereferenceable(4) %class.AP_ParamT.0* @_ZN7AC_P_2D2kPEv(%class.AC_P_2D* nonnull align 4 dereferenceable(24) %this) #0 comdat align 2 {
entry:
  %this.addr = alloca %class.AC_P_2D*, align 8
  store %class.AC_P_2D* %this, %class.AC_P_2D** %this.addr, align 8
  %this1 = load %class.AC_P_2D*, %class.AC_P_2D** %this.addr, align 8
  %_kp = getelementptr inbounds %class.AC_P_2D, %class.AC_P_2D* %this1, i32 0, i32 0
  ret %class.AP_ParamT.0* %_kp
}

declare dso_local float @_ZNK7Vector3IfE6lengthEv(%class.Vector3* nonnull align 4 dereferenceable(12)) #2

declare dso_local float @_Z20constrain_value_lineIfET_S0_S0_S0_j(float, float, float, i32) #2

declare dso_local void @_Z16update_vel_accelRfffff(float* nonnull align 4 dereferenceable(4), float, float, float, float) #2

; Function Attrs: mustprogress noinline nounwind optnone uwtable
define linkonce_odr dso_local float @_ZNK8AC_WPNav19get_wp_accelerationEv(%class.AC_WPNav* nonnull align 8 dereferenceable(2256) %this) #0 comdat align 2 {
entry:
  %this.addr = alloca %class.AC_WPNav*, align 8
  %agg.tmp = alloca %class.AP_ParamT.0, align 4
  store %class.AC_WPNav* %this, %class.AC_WPNav** %this.addr, align 8
  %this1 = load %class.AC_WPNav*, %class.AC_WPNav** %this.addr, align 8
  %_wp_accel_cmss = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 10
  %0 = bitcast %class.AP_ParamT.0* %agg.tmp to i8*
  %1 = bitcast %class.AP_ParamT.0* %_wp_accel_cmss to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %0, i8* align 8 %1, i64 4, i1 false)
  %coerce.dive = getelementptr inbounds %class.AP_ParamT.0, %class.AP_ParamT.0* %agg.tmp, i32 0, i32 0
  %2 = load float, float* %coerce.dive, align 4
  %call = call zeroext i1 @_Z11is_positiveI9AP_ParamTIfL11ap_var_type4EEEbT_(float %2)
  br i1 %call, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %_wp_accel_cmss2 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 10
  %call3 = call nonnull align 4 dereferenceable(4) float* @_ZNK9AP_ParamTIfL11ap_var_type4EEcvRKfEv(%class.AP_ParamT.0* nonnull align 4 dereferenceable(4) %_wp_accel_cmss2)
  %3 = load float, float* %call3, align 4
  br label %cond.end

cond.false:                                       ; preds = %entry
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi float [ %3, %cond.true ], [ 2.500000e+02, %cond.false ]
  ret float %cond
}

; Function Attrs: mustprogress noinline nounwind optnone uwtable
define linkonce_odr dso_local float @_ZNK13AC_PosControl25get_shaping_jerk_xy_cmsssEv(%class.AC_PosControl* nonnull align 8 dereferenceable(1056) %this) #0 comdat align 2 {
entry:
  %this.addr = alloca %class.AC_PosControl*, align 8
  store %class.AC_PosControl* %this, %class.AC_PosControl** %this.addr, align 8
  %this1 = load %class.AC_PosControl*, %class.AC_PosControl** %this.addr, align 8
  %_shaping_jerk_xy = getelementptr inbounds %class.AC_PosControl, %class.AC_PosControl* %this1, i32 0, i32 6
  %call = call nonnull align 4 dereferenceable(4) float* @_ZNK9AP_ParamTIfL11ap_var_type4EEcvRKfEv(%class.AP_ParamT.0* nonnull align 4 dereferenceable(4) %_shaping_jerk_xy)
  %0 = load float, float* %call, align 4
  %mul = fmul float %0, 1.000000e+02
  ret float %mul
}

declare dso_local void @_Z15shape_vel_accelfffRfffffb(float, float, float, float* nonnull align 4 dereferenceable(4), float, float, float, float, i1 zeroext) #2

; Function Attrs: mustprogress noinline nounwind optnone uwtable
define linkonce_odr dso_local zeroext i1 @_Z7is_zeroI9AP_ParamTIfL11ap_var_type4EEEbT_(float %fVal1.coerce) #0 comdat {
entry:
  %fVal1 = alloca %class.AP_ParamT.0, align 4
  %coerce.dive = getelementptr inbounds %class.AP_ParamT.0, %class.AP_ParamT.0* %fVal1, i32 0, i32 0
  store float %fVal1.coerce, float* %coerce.dive, align 4
  %call = call nonnull align 4 dereferenceable(4) float* @_ZNK9AP_ParamTIfL11ap_var_type4EEcvRKfEv(%class.AP_ParamT.0* nonnull align 4 dereferenceable(4) %fVal1)
  %0 = load float, float* %call, align 4
  %call1 = call zeroext i1 @_Z7is_zerof(float %0)
  ret i1 %call1
}

; Function Attrs: noinline nounwind optnone uwtable
define linkonce_odr dso_local void @_ZN7Vector3IfEC2Ev(%class.Vector3* nonnull align 4 dereferenceable(12) %this) unnamed_addr #3 comdat align 2 {
entry:
  %this.addr = alloca %class.Vector3*, align 8
  store %class.Vector3* %this, %class.Vector3** %this.addr, align 8
  %this1 = load %class.Vector3*, %class.Vector3** %this.addr, align 8
  %x = getelementptr inbounds %class.Vector3, %class.Vector3* %this1, i32 0, i32 0
  store float 0.000000e+00, float* %x, align 4
  %y = getelementptr inbounds %class.Vector3, %class.Vector3* %this1, i32 0, i32 1
  store float 0.000000e+00, float* %y, align 4
  %z = getelementptr inbounds %class.Vector3, %class.Vector3* %this1, i32 0, i32 2
  store float 0.000000e+00, float* %z, align 4
  ret void
}

; Function Attrs: mustprogress noinline nounwind optnone uwtable
define linkonce_odr dso_local float @_ZNK8AC_WPNav23get_corner_accelerationEv(%class.AC_WPNav* nonnull align 8 dereferenceable(2256) %this) #0 comdat align 2 {
entry:
  %this.addr = alloca %class.AC_WPNav*, align 8
  %agg.tmp = alloca %class.AP_ParamT.0, align 4
  store %class.AC_WPNav* %this, %class.AC_WPNav** %this.addr, align 8
  %this1 = load %class.AC_WPNav*, %class.AC_WPNav** %this.addr, align 8
  %_wp_accel_c_cmss = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 11
  %0 = bitcast %class.AP_ParamT.0* %agg.tmp to i8*
  %1 = bitcast %class.AP_ParamT.0* %_wp_accel_c_cmss to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %0, i8* align 4 %1, i64 4, i1 false)
  %coerce.dive = getelementptr inbounds %class.AP_ParamT.0, %class.AP_ParamT.0* %agg.tmp, i32 0, i32 0
  %2 = load float, float* %coerce.dive, align 4
  %call = call zeroext i1 @_Z11is_positiveI9AP_ParamTIfL11ap_var_type4EEEbT_(float %2)
  br i1 %call, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %_wp_accel_c_cmss2 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 11
  %call3 = call nonnull align 4 dereferenceable(4) float* @_ZNK9AP_ParamTIfL11ap_var_type4EEcvRKfEv(%class.AP_ParamT.0* nonnull align 4 dereferenceable(4) %_wp_accel_c_cmss2)
  %3 = load float, float* %call3, align 4
  br label %cond.end

cond.false:                                       ; preds = %entry
  %call4 = call float @_ZNK8AC_WPNav19get_wp_accelerationEv(%class.AC_WPNav* nonnull align 8 dereferenceable(2256) %this1)
  %mul = fmul float 2.000000e+00, %call4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi float [ %3, %cond.true ], [ %mul, %cond.false ]
  ret float %cond
}

declare dso_local zeroext i1 @_ZN6SCurve26advance_target_along_trackERS_S0_ffbfR7Vector3IfES3_S3_(%class.SCurve* nonnull align 4 dereferenceable(604), %class.SCurve* nonnull align 4 dereferenceable(604), %class.SCurve* nonnull align 4 dereferenceable(604), float, float, i1 zeroext, float, %class.Vector3* nonnull align 4 dereferenceable(12), %class.Vector3* nonnull align 4 dereferenceable(12), %class.Vector3* nonnull align 4 dereferenceable(12)) #2

declare dso_local void @_ZN11SplineCurve26advance_target_along_trackEfR7Vector3IfES2_(%class.SplineCurve* nonnull align 4 dereferenceable(130), float, %class.Vector3* nonnull align 4 dereferenceable(12), %class.Vector3* nonnull align 4 dereferenceable(12)) #2

; Function Attrs: mustprogress noinline nounwind optnone uwtable
define linkonce_odr dso_local zeroext i1 @_ZNK11SplineCurve19reached_destinationEv(%class.SplineCurve* nonnull align 4 dereferenceable(130) %this) #0 comdat align 2 {
entry:
  %this.addr = alloca %class.SplineCurve*, align 8
  store %class.SplineCurve* %this, %class.SplineCurve** %this.addr, align 8
  %this1 = load %class.SplineCurve*, %class.SplineCurve** %this.addr, align 8
  %_reached_destination = getelementptr inbounds %class.SplineCurve, %class.SplineCurve* %this1, i32 0, i32 13
  %0 = load i8, i8* %_reached_destination, align 4
  %tobool = trunc i8 %0 to i1
  ret i1 %tobool
}

declare dso_local { <2 x float>, float } @_ZNK7Vector3IfEmlEf(%class.Vector3* nonnull align 4 dereferenceable(12), float) #2

declare dso_local { <2 x float>, float } @_ZNK7Vector3IfEdvEf(%class.Vector3* nonnull align 4 dereferenceable(12), float) #2

declare dso_local nonnull align 4 dereferenceable(12) %class.Vector3* @_ZN7Vector3IfEmLEf(%class.Vector3* nonnull align 4 dereferenceable(12), float) #2

; Function Attrs: mustprogress noinline nounwind optnone uwtable
define internal float @_ZL2sqf(float %val) #0 {
entry:
  %val.addr = alloca float, align 4
  store float %val, float* %val.addr, align 4
  %0 = load float, float* %val.addr, align 4
  %1 = load float, float* %val.addr, align 4
  %mul = fmul float %0, %1
  ret float %mul
}

declare dso_local nonnull align 4 dereferenceable(12) %class.Vector3* @_ZN7Vector3IfEpLERKS0_(%class.Vector3* nonnull align 4 dereferenceable(12), %class.Vector3* nonnull align 4 dereferenceable(12)) #2

; Function Attrs: mustprogress noinline nounwind optnone uwtable
define linkonce_odr dso_local float @_ZNK13AC_PosControl19get_pos_offset_z_cmEv(%class.AC_PosControl* nonnull align 8 dereferenceable(1056) %this) #0 comdat align 2 {
entry:
  %this.addr = alloca %class.AC_PosControl*, align 8
  store %class.AC_PosControl* %this, %class.AC_PosControl** %this.addr, align 8
  %this1 = load %class.AC_PosControl*, %class.AC_PosControl** %this.addr, align 8
  %_pos_offset_z = getelementptr inbounds %class.AC_PosControl, %class.AC_PosControl* %this1, i32 0, i32 37
  %0 = load float, float* %_pos_offset_z, align 4
  ret float %0
}

; Function Attrs: mustprogress noinline nounwind optnone uwtable
define linkonce_odr dso_local float @_ZNK13AC_PosControl23get_accel_offset_z_cmssEv(%class.AC_PosControl* nonnull align 8 dereferenceable(1056) %this) #0 comdat align 2 {
entry:
  %this.addr = alloca %class.AC_PosControl*, align 8
  store %class.AC_PosControl* %this, %class.AC_PosControl** %this.addr, align 8
  %this1 = load %class.AC_PosControl*, %class.AC_PosControl** %this.addr, align 8
  %_accel_offset_z = getelementptr inbounds %class.AC_PosControl, %class.AC_PosControl* %this1, i32 0, i32 39
  %0 = load float, float* %_accel_offset_z, align 4
  ret float %0
}

; Function Attrs: mustprogress noinline nounwind optnone uwtable
define linkonce_odr dso_local void @_ZNK7Vector3IfE8todoubleEv(%class.Vector3.25* noalias sret(%class.Vector3.25) align 8 %agg.result, %class.Vector3* nonnull align 4 dereferenceable(12) %this) #0 comdat align 2 {
entry:
  %this.addr = alloca %class.Vector3*, align 8
  store %class.Vector3* %this, %class.Vector3** %this.addr, align 8
  %this1 = load %class.Vector3*, %class.Vector3** %this.addr, align 8
  %x = getelementptr inbounds %class.Vector3, %class.Vector3* %this1, i32 0, i32 0
  %0 = load float, float* %x, align 4
  %conv = fpext float %0 to double
  %y = getelementptr inbounds %class.Vector3, %class.Vector3* %this1, i32 0, i32 1
  %1 = load float, float* %y, align 4
  %conv2 = fpext float %1 to double
  %z = getelementptr inbounds %class.Vector3, %class.Vector3* %this1, i32 0, i32 2
  %2 = load float, float* %z, align 4
  %conv3 = fpext float %2 to double
  call void @_ZN7Vector3IdEC2Eddd(%class.Vector3.25* nonnull align 8 dereferenceable(24) %agg.result, double %conv, double %conv2, double %conv3)
  ret void
}

declare dso_local void @_ZN13AC_PosControl17set_pos_vel_accelERK7Vector3IdERKS0_IfES6_(%class.AC_PosControl* nonnull align 8 dereferenceable(1056), %class.Vector3.25* nonnull align 8 dereferenceable(24), %class.Vector3* nonnull align 4 dereferenceable(12), %class.Vector3* nonnull align 4 dereferenceable(12)) #2

; Function Attrs: mustprogress noinline nounwind optnone uwtable
define linkonce_odr dso_local double @_Z2sqI9AP_ParamTIfL11ap_var_type4EEEdT_(float %val.coerce) #0 comdat {
entry:
  %val = alloca %class.AP_ParamT.0, align 4
  %v = alloca double, align 8
  %coerce.dive = getelementptr inbounds %class.AP_ParamT.0, %class.AP_ParamT.0* %val, i32 0, i32 0
  store float %val.coerce, float* %coerce.dive, align 4
  %call = call nonnull align 4 dereferenceable(4) float* @_ZNK9AP_ParamTIfL11ap_var_type4EEcvRKfEv(%class.AP_ParamT.0* nonnull align 4 dereferenceable(4) %val)
  %0 = load float, float* %call, align 4
  %conv = fpext float %0 to double
  store double %conv, double* %v, align 8
  %1 = load double, double* %v, align 8
  %2 = load double, double* %v, align 8
  %mul = fmul double %1, %2
  ret double %mul
}

; Function Attrs: noinline nounwind optnone uwtable
define linkonce_odr dso_local void @_ZN7Vector3IdEC2Eddd(%class.Vector3.25* nonnull align 8 dereferenceable(24) %this, double %x0, double %y0, double %z0) unnamed_addr #3 comdat align 2 {
entry:
  %this.addr = alloca %class.Vector3.25*, align 8
  %x0.addr = alloca double, align 8
  %y0.addr = alloca double, align 8
  %z0.addr = alloca double, align 8
  store %class.Vector3.25* %this, %class.Vector3.25** %this.addr, align 8
  store double %x0, double* %x0.addr, align 8
  store double %y0, double* %y0.addr, align 8
  store double %z0, double* %z0.addr, align 8
  %this1 = load %class.Vector3.25*, %class.Vector3.25** %this.addr, align 8
  %x = getelementptr inbounds %class.Vector3.25, %class.Vector3.25* %this1, i32 0, i32 0
  %0 = load double, double* %x0.addr, align 8
  store double %0, double* %x, align 8
  %y = getelementptr inbounds %class.Vector3.25, %class.Vector3.25* %this1, i32 0, i32 1
  %1 = load double, double* %y0.addr, align 8
  store double %1, double* %y, align 8
  %z = getelementptr inbounds %class.Vector3.25, %class.Vector3.25* %this1, i32 0, i32 2
  %2 = load double, double* %z0.addr, align 8
  store double %2, double* %z, align 8
  ret void
}

; Function Attrs: mustprogress noinline nounwind optnone uwtable
define linkonce_odr dso_local zeroext i1 @_Z11is_positiveI9AP_ParamTIfL11ap_var_type4EEEbT_(float %fVal1.coerce) #0 comdat {
entry:
  %fVal1 = alloca %class.AP_ParamT.0, align 4
  %coerce.dive = getelementptr inbounds %class.AP_ParamT.0, %class.AP_ParamT.0* %fVal1, i32 0, i32 0
  store float %fVal1.coerce, float* %coerce.dive, align 4
  %call = call nonnull align 4 dereferenceable(4) float* @_ZNK9AP_ParamTIfL11ap_var_type4EEcvRKfEv(%class.AP_ParamT.0* nonnull align 4 dereferenceable(4) %fVal1)
  %0 = load float, float* %call, align 4
  %cmp = fcmp oge float %0, 0x3E80000000000000
  ret i1 %cmp
}

; Function Attrs: mustprogress noinline nounwind optnone uwtable
define linkonce_odr dso_local zeroext i1 @_Z7is_zerof(float %x) #0 comdat {
entry:
  %x.addr = alloca float, align 4
  store float %x, float* %x.addr, align 4
  %0 = load float, float* %x.addr, align 4
  %1 = call float @llvm.fabs.f32(float %0)
  %cmp = fcmp olt float %1, 0x3E80000000000000
  ret i1 %cmp
}

; Function Attrs: nofree nosync nounwind readnone speculatable willreturn
declare float @llvm.fabs.f32(float) #5

declare dso_local float @_ZNK7Vector3IfEmlERKS0_(%class.Vector3* nonnull align 4 dereferenceable(12), %class.Vector3* nonnull align 4 dereferenceable(12)) #2

declare dso_local void @_ZNK7Vector3IdEmiERKS0_(%class.Vector3.25* sret(%class.Vector3.25) align 8, %class.Vector3.25* nonnull align 8 dereferenceable(24), %class.Vector3.25* nonnull align 8 dereferenceable(24)) #2

; Function Attrs: mustprogress noinline nounwind optnone uwtable
define linkonce_odr dso_local { <2 x float>, float } @_ZNK7Vector3IdE7tofloatEv(%class.Vector3.25* nonnull align 8 dereferenceable(24) %this) #0 comdat align 2 {
entry:
  %retval = alloca %class.Vector3, align 4
  %this.addr = alloca %class.Vector3.25*, align 8
  %retval.coerce = alloca { <2 x float>, float }, align 8
  store %class.Vector3.25* %this, %class.Vector3.25** %this.addr, align 8
  %this1 = load %class.Vector3.25*, %class.Vector3.25** %this.addr, align 8
  %x = getelementptr inbounds %class.Vector3.25, %class.Vector3.25* %this1, i32 0, i32 0
  %0 = load double, double* %x, align 8
  %conv = fptrunc double %0 to float
  %y = getelementptr inbounds %class.Vector3.25, %class.Vector3.25* %this1, i32 0, i32 1
  %1 = load double, double* %y, align 8
  %conv2 = fptrunc double %1 to float
  %z = getelementptr inbounds %class.Vector3.25, %class.Vector3.25* %this1, i32 0, i32 2
  %2 = load double, double* %z, align 8
  %conv3 = fptrunc double %2 to float
  call void @_ZN7Vector3IfEC2Efff(%class.Vector3* nonnull align 4 dereferenceable(12) %retval, float %conv, float %conv2, float %conv3)
  %3 = bitcast { <2 x float>, float }* %retval.coerce to i8*
  %4 = bitcast %class.Vector3* %retval to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %3, i8* align 4 %4, i64 12, i1 false)
  %5 = load { <2 x float>, float }, { <2 x float>, float }* %retval.coerce, align 8
  ret { <2 x float>, float } %5
}

; Function Attrs: mustprogress noinline nounwind optnone uwtable
define internal nonnull align 4 dereferenceable(4) float* @_ZL3MAXI9AP_ParamTIfL11ap_var_type4EEfEDTqugtfp_fp0_fp_fp0_ERKT_RKT0_(%class.AP_ParamT.0* nonnull align 4 dereferenceable(4) %one, float* nonnull align 4 dereferenceable(4) %two) #0 {
entry:
  %one.addr = alloca %class.AP_ParamT.0*, align 8
  %two.addr = alloca float*, align 8
  store %class.AP_ParamT.0* %one, %class.AP_ParamT.0** %one.addr, align 8
  store float* %two, float** %two.addr, align 8
  %0 = load %class.AP_ParamT.0*, %class.AP_ParamT.0** %one.addr, align 8
  %call = call nonnull align 4 dereferenceable(4) float* @_ZNK9AP_ParamTIfL11ap_var_type4EEcvRKfEv(%class.AP_ParamT.0* nonnull align 4 dereferenceable(4) %0)
  %1 = load float, float* %call, align 4
  %2 = load float*, float** %two.addr, align 8
  %3 = load float, float* %2, align 4
  %cmp = fcmp ogt float %1, %3
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %4 = load %class.AP_ParamT.0*, %class.AP_ParamT.0** %one.addr, align 8
  %call1 = call nonnull align 4 dereferenceable(4) float* @_ZNK9AP_ParamTIfL11ap_var_type4EEcvRKfEv(%class.AP_ParamT.0* nonnull align 4 dereferenceable(4) %4)
  br label %cond.end

cond.false:                                       ; preds = %entry
  %5 = load float*, float** %two.addr, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond-lvalue = phi float* [ %call1, %cond.true ], [ %5, %cond.false ]
  ret float* %cond-lvalue
}

; Function Attrs: mustprogress noinline nounwind optnone uwtable
define dso_local i32 @_ZNK8AC_WPNav18get_terrain_sourceEv(%class.AC_WPNav* nonnull align 8 dereferenceable(2256) %this) #0 align 2 {
entry:
  %retval = alloca i32, align 4
  %this.addr = alloca %class.AC_WPNav*, align 8
  %terrain = alloca %class.AP_Terrain*, align 8
  store %class.AC_WPNav* %this, %class.AC_WPNav** %this.addr, align 8
  %this1 = load %class.AC_WPNav*, %class.AC_WPNav** %this.addr, align 8
  %_rangefinder_available = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 38
  %0 = load i8, i8* %_rangefinder_available, align 2
  %tobool = trunc i8 %0 to i1
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %_rangefinder_use = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 39
  %call = call nonnull align 1 dereferenceable(1) i8* @_ZNK9AP_ParamTIaL11ap_var_type1EEcvRKaEv(%"struct.AC_WPNav::wpnav_flags"* nonnull align 1 dereferenceable(1) %_rangefinder_use)
  %1 = load i8, i8* %call, align 1
  %tobool2 = icmp ne i8 %1, 0
  br i1 %tobool2, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  store i32 1, i32* %retval, align 4
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  %call3 = call %class.AP_Terrain* @_ZN2AP7terrainEv()
  store %class.AP_Terrain* %call3, %class.AP_Terrain** %terrain, align 8
  %2 = load %class.AP_Terrain*, %class.AP_Terrain** %terrain, align 8
  %cmp = icmp ne %class.AP_Terrain* %2, null
  br i1 %cmp, label %land.lhs.true4, label %if.else

land.lhs.true4:                                   ; preds = %if.end
  %3 = load %class.AP_Terrain*, %class.AP_Terrain** %terrain, align 8
  %call5 = call zeroext i1 @_ZNK10AP_Terrain7enabledEv(%class.AP_Terrain* nonnull align 8 dereferenceable(2221) %3)
  br i1 %call5, label %if.then6, label %if.else

if.then6:                                         ; preds = %land.lhs.true4
  store i32 2, i32* %retval, align 4
  br label %return

if.else:                                          ; preds = %land.lhs.true4, %if.end
  store i32 0, i32* %retval, align 4
  br label %return

return:                                           ; preds = %if.else, %if.then6, %if.then
  %4 = load i32, i32* %retval, align 4
  ret i32 %4
}

declare dso_local %class.AP_Terrain* @_ZN2AP7terrainEv() #2

declare dso_local zeroext i1 @_ZN10AP_Terrain20height_above_terrainERfb(%class.AP_Terrain* nonnull align 8 dereferenceable(2221), float* nonnull align 4 dereferenceable(4), i1 zeroext) #2

declare dso_local float @_ZNK14AP_InertialNav20get_position_z_up_cmEv(%class.AP_InertialNav* nonnull align 8 dereferenceable(32)) #2

; Function Attrs: mustprogress noinline nounwind optnone uwtable
define linkonce_odr dso_local nonnull align 1 dereferenceable(1) i8* @_ZNK9AP_ParamTIaL11ap_var_type1EEcvRKaEv(%"struct.AC_WPNav::wpnav_flags"* nonnull align 1 dereferenceable(1) %this) #0 comdat align 2 {
entry:
  %this.addr = alloca %"struct.AC_WPNav::wpnav_flags"*, align 8
  store %"struct.AC_WPNav::wpnav_flags"* %this, %"struct.AC_WPNav::wpnav_flags"** %this.addr, align 8
  %this1 = load %"struct.AC_WPNav::wpnav_flags"*, %"struct.AC_WPNav::wpnav_flags"** %this.addr, align 8
  %_value = getelementptr inbounds %"struct.AC_WPNav::wpnav_flags", %"struct.AC_WPNav::wpnav_flags"* %this1, i32 0, i32 0
  ret i8* %_value
}

; Function Attrs: mustprogress noinline nounwind optnone uwtable
define linkonce_odr dso_local zeroext i1 @_ZNK10AP_Terrain7enabledEv(%class.AP_Terrain* nonnull align 8 dereferenceable(2221) %this) #0 comdat align 2 {
entry:
  %this.addr = alloca %class.AP_Terrain*, align 8
  store %class.AP_Terrain* %this, %class.AP_Terrain** %this.addr, align 8
  %this1 = load %class.AP_Terrain*, %class.AP_Terrain** %this.addr, align 8
  %enable = getelementptr inbounds %class.AP_Terrain, %class.AP_Terrain* %this1, i32 0, i32 0
  %call = call nonnull align 1 dereferenceable(1) i8* @_ZNK9AP_ParamTIaL11ap_var_type1EEcvRKaEv(%"struct.AC_WPNav::wpnav_flags"* nonnull align 1 dereferenceable(1) %enable)
  %0 = load i8, i8* %call, align 1
  %tobool = icmp ne i8 %0, 0
  ret i1 %tobool
}

; Function Attrs: mustprogress noinline nounwind optnone uwtable
define linkonce_odr dso_local float @_ZNK13AC_PosControl20get_max_speed_up_cmsEv(%class.AC_PosControl* nonnull align 8 dereferenceable(1056) %this) #0 comdat align 2 {
entry:
  %this.addr = alloca %class.AC_PosControl*, align 8
  store %class.AC_PosControl* %this, %class.AC_PosControl** %this.addr, align 8
  %this1 = load %class.AC_PosControl*, %class.AC_PosControl** %this.addr, align 8
  %_vel_max_up_cms = getelementptr inbounds %class.AC_PosControl, %class.AC_PosControl* %this1, i32 0, i32 18
  %0 = load float, float* %_vel_max_up_cms, align 8
  ret float %0
}

; Function Attrs: mustprogress noinline nounwind optnone uwtable
define linkonce_odr dso_local float @_ZNK13AC_PosControl20get_max_accel_z_cmssEv(%class.AC_PosControl* nonnull align 8 dereferenceable(1056) %this) #0 comdat align 2 {
entry:
  %this.addr = alloca %class.AC_PosControl*, align 8
  store %class.AC_PosControl* %this, %class.AC_PosControl** %this.addr, align 8
  %this1 = load %class.AC_PosControl*, %class.AC_PosControl** %this.addr, align 8
  %_accel_max_z_cmss = getelementptr inbounds %class.AC_PosControl, %class.AC_PosControl* %this1, i32 0, i32 21
  %0 = load float, float* %_accel_max_z_cmss, align 4
  ret float %0
}

declare dso_local void @_ZN13AC_PosControl21set_max_speed_accel_zEfff(%class.AC_PosControl* nonnull align 8 dereferenceable(1056), float, float, float) #2

; Function Attrs: mustprogress noinline nounwind optnone uwtable
define dso_local void @_ZN8AC_WPNav36update_track_with_speed_accel_limitsEv(%class.AC_WPNav* nonnull align 8 dereferenceable(2256) %this) #0 align 2 {
entry:
  %this.addr = alloca %class.AC_WPNav*, align 8
  store %class.AC_WPNav* %this, %class.AC_WPNav** %this.addr, align 8
  %this1 = load %class.AC_WPNav*, %class.AC_WPNav** %this.addr, align 8
  %_this_leg_is_spline = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 26
  %0 = load i8, i8* %_this_leg_is_spline, align 8
  %tobool = trunc i8 %0 to i1
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %_spline_this_leg = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 24
  %_pos_control = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 4
  %1 = load %class.AC_PosControl*, %class.AC_PosControl** %_pos_control, align 8
  %call = call float @_ZNK13AC_PosControl20get_max_speed_xy_cmsEv(%class.AC_PosControl* nonnull align 8 dereferenceable(1056) %1)
  %_pos_control2 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 4
  %2 = load %class.AC_PosControl*, %class.AC_PosControl** %_pos_control2, align 8
  %call3 = call float @_ZNK13AC_PosControl20get_max_speed_up_cmsEv(%class.AC_PosControl* nonnull align 8 dereferenceable(1056) %2)
  %_pos_control4 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 4
  %3 = load %class.AC_PosControl*, %class.AC_PosControl** %_pos_control4, align 8
  %call5 = call float @_ZNK13AC_PosControl22get_max_speed_down_cmsEv(%class.AC_PosControl* nonnull align 8 dereferenceable(1056) %3)
  %call6 = call float @_ZNK8AC_WPNav19get_wp_accelerationEv(%class.AC_WPNav* nonnull align 8 dereferenceable(2256) %this1)
  %_wp_accel_z_cmss = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 12
  %call7 = call nonnull align 4 dereferenceable(4) float* @_ZNK9AP_ParamTIfL11ap_var_type4EEcvRKfEv(%class.AP_ParamT.0* nonnull align 4 dereferenceable(4) %_wp_accel_z_cmss)
  %4 = load float, float* %call7, align 4
  call void @_ZN11SplineCurve15set_speed_accelEfffff(%class.SplineCurve* nonnull align 4 dereferenceable(130) %_spline_this_leg, float %call, float %call3, float %call5, float %call6, float %4)
  br label %if.end

if.else:                                          ; preds = %entry
  %_scurve_this_leg = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 20
  %_pos_control8 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 4
  %5 = load %class.AC_PosControl*, %class.AC_PosControl** %_pos_control8, align 8
  %call9 = call float @_ZNK13AC_PosControl20get_max_speed_xy_cmsEv(%class.AC_PosControl* nonnull align 8 dereferenceable(1056) %5)
  %_pos_control10 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 4
  %6 = load %class.AC_PosControl*, %class.AC_PosControl** %_pos_control10, align 8
  %call11 = call float @_ZNK13AC_PosControl20get_max_speed_up_cmsEv(%class.AC_PosControl* nonnull align 8 dereferenceable(1056) %6)
  %_pos_control12 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 4
  %7 = load %class.AC_PosControl*, %class.AC_PosControl** %_pos_control12, align 8
  %call13 = call float @_ZNK13AC_PosControl22get_max_speed_down_cmsEv(%class.AC_PosControl* nonnull align 8 dereferenceable(1056) %7)
  call void @_ZN6SCurve13set_speed_maxEfff(%class.SCurve* nonnull align 4 dereferenceable(604) %_scurve_this_leg, float %call9, float %call11, float %call13)
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %_next_leg_is_spline = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 27
  %8 = load i8, i8* %_next_leg_is_spline, align 1
  %tobool14 = trunc i8 %8 to i1
  br i1 %tobool14, label %if.then15, label %if.else25

if.then15:                                        ; preds = %if.end
  %_spline_next_leg = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 25
  %_pos_control16 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 4
  %9 = load %class.AC_PosControl*, %class.AC_PosControl** %_pos_control16, align 8
  %call17 = call float @_ZNK13AC_PosControl20get_max_speed_xy_cmsEv(%class.AC_PosControl* nonnull align 8 dereferenceable(1056) %9)
  %_pos_control18 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 4
  %10 = load %class.AC_PosControl*, %class.AC_PosControl** %_pos_control18, align 8
  %call19 = call float @_ZNK13AC_PosControl20get_max_speed_up_cmsEv(%class.AC_PosControl* nonnull align 8 dereferenceable(1056) %10)
  %_pos_control20 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 4
  %11 = load %class.AC_PosControl*, %class.AC_PosControl** %_pos_control20, align 8
  %call21 = call float @_ZNK13AC_PosControl22get_max_speed_down_cmsEv(%class.AC_PosControl* nonnull align 8 dereferenceable(1056) %11)
  %call22 = call float @_ZNK8AC_WPNav19get_wp_accelerationEv(%class.AC_WPNav* nonnull align 8 dereferenceable(2256) %this1)
  %_wp_accel_z_cmss23 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 12
  %call24 = call nonnull align 4 dereferenceable(4) float* @_ZNK9AP_ParamTIfL11ap_var_type4EEcvRKfEv(%class.AP_ParamT.0* nonnull align 4 dereferenceable(4) %_wp_accel_z_cmss23)
  %12 = load float, float* %call24, align 4
  call void @_ZN11SplineCurve15set_speed_accelEfffff(%class.SplineCurve* nonnull align 4 dereferenceable(130) %_spline_next_leg, float %call17, float %call19, float %call21, float %call22, float %12)
  br label %if.end32

if.else25:                                        ; preds = %if.end
  %_scurve_next_leg = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 21
  %_pos_control26 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 4
  %13 = load %class.AC_PosControl*, %class.AC_PosControl** %_pos_control26, align 8
  %call27 = call float @_ZNK13AC_PosControl20get_max_speed_xy_cmsEv(%class.AC_PosControl* nonnull align 8 dereferenceable(1056) %13)
  %_pos_control28 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 4
  %14 = load %class.AC_PosControl*, %class.AC_PosControl** %_pos_control28, align 8
  %call29 = call float @_ZNK13AC_PosControl20get_max_speed_up_cmsEv(%class.AC_PosControl* nonnull align 8 dereferenceable(1056) %14)
  %_pos_control30 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 4
  %15 = load %class.AC_PosControl*, %class.AC_PosControl** %_pos_control30, align 8
  %call31 = call float @_ZNK13AC_PosControl22get_max_speed_down_cmsEv(%class.AC_PosControl* nonnull align 8 dereferenceable(1056) %15)
  call void @_ZN6SCurve13set_speed_maxEfff(%class.SCurve* nonnull align 4 dereferenceable(604) %_scurve_next_leg, float %call27, float %call29, float %call31)
  br label %if.end32

if.end32:                                         ; preds = %if.else25, %if.then15
  ret void
}

; Function Attrs: mustprogress noinline nounwind optnone uwtable
define linkonce_odr dso_local float @_ZNK13AC_PosControl20get_max_speed_xy_cmsEv(%class.AC_PosControl* nonnull align 8 dereferenceable(1056) %this) #0 comdat align 2 {
entry:
  %this.addr = alloca %class.AC_PosControl*, align 8
  store %class.AC_PosControl* %this, %class.AC_PosControl** %this.addr, align 8
  %this1 = load %class.AC_PosControl*, %class.AC_PosControl** %this.addr, align 8
  %_vel_max_xy_cms = getelementptr inbounds %class.AC_PosControl, %class.AC_PosControl* %this1, i32 0, i32 17
  %0 = load float, float* %_vel_max_xy_cms, align 4
  ret float %0
}

; Function Attrs: mustprogress noinline nounwind optnone uwtable
define linkonce_odr dso_local float @_ZNK13AC_PosControl22get_max_speed_down_cmsEv(%class.AC_PosControl* nonnull align 8 dereferenceable(1056) %this) #0 comdat align 2 {
entry:
  %this.addr = alloca %class.AC_PosControl*, align 8
  store %class.AC_PosControl* %this, %class.AC_PosControl** %this.addr, align 8
  %this1 = load %class.AC_PosControl*, %class.AC_PosControl** %this.addr, align 8
  %_vel_max_down_cms = getelementptr inbounds %class.AC_PosControl, %class.AC_PosControl* %this1, i32 0, i32 19
  %0 = load float, float* %_vel_max_down_cms, align 4
  ret float %0
}

declare dso_local void @_ZN11SplineCurve15set_speed_accelEfffff(%class.SplineCurve* nonnull align 4 dereferenceable(130), float, float, float, float, float) #2

declare dso_local void @_ZN6SCurve13set_speed_maxEfff(%class.SCurve* nonnull align 4 dereferenceable(604), float, float, float) #2

declare dso_local void @_ZN13AC_PosControl22set_max_speed_accel_xyEff(%class.AC_PosControl* nonnull align 8 dereferenceable(1056), float, float) #2

declare dso_local void @_ZN13AC_PosControl29set_correction_speed_accel_xyEff(%class.AC_PosControl* nonnull align 8 dereferenceable(1056), float, float) #2

declare dso_local nonnull align 4 dereferenceable(8) %struct.Vector2* @_ZNK14AP_InertialNav18get_position_xy_cmEv(%class.AP_InertialNav* nonnull align 8 dereferenceable(32)) #2

; Function Attrs: mustprogress noinline nounwind optnone uwtable
define linkonce_odr dso_local nonnull align 4 dereferenceable(8) %struct.Vector2* @_ZNK7Vector3IfE2xyEv(%class.Vector3* nonnull align 4 dereferenceable(12) %this) #0 comdat align 2 {
entry:
  %this.addr = alloca %class.Vector3*, align 8
  store %class.Vector3* %this, %class.Vector3** %this.addr, align 8
  %this1 = load %class.Vector3*, %class.Vector3** %this.addr, align 8
  %0 = bitcast %class.Vector3* %this1 to %struct.Vector2*
  ret %struct.Vector2* %0
}

declare dso_local float @_Z14get_bearing_cdRK7Vector2IfES2_(%struct.Vector2* nonnull align 4 dereferenceable(8), %struct.Vector2* nonnull align 4 dereferenceable(8)) #2

; Function Attrs: mustprogress noinline nounwind optnone uwtable
define linkonce_odr dso_local float @_Z26get_horizontal_distance_cmIfEfRK7Vector2IT_ES4_(%struct.Vector2* nonnull align 4 dereferenceable(8) %origin, %struct.Vector2* nonnull align 4 dereferenceable(8) %destination) #1 comdat {
entry:
  %origin.addr = alloca %struct.Vector2*, align 8
  %destination.addr = alloca %struct.Vector2*, align 8
  %ref.tmp = alloca %struct.Vector2, align 4
  store %struct.Vector2* %origin, %struct.Vector2** %origin.addr, align 8
  store %struct.Vector2* %destination, %struct.Vector2** %destination.addr, align 8
  %0 = load %struct.Vector2*, %struct.Vector2** %destination.addr, align 8
  %1 = load %struct.Vector2*, %struct.Vector2** %origin.addr, align 8
  %call = call <2 x float> @_ZNK7Vector2IfEmiERKS0_(%struct.Vector2* nonnull align 4 dereferenceable(8) %0, %struct.Vector2* nonnull align 4 dereferenceable(8) %1)
  %2 = bitcast %struct.Vector2* %ref.tmp to <2 x float>*
  store <2 x float> %call, <2 x float>* %2, align 4
  %call1 = call float @_ZNK7Vector2IfE6lengthEv(%struct.Vector2* nonnull align 4 dereferenceable(8) %ref.tmp)
  ret float %call1
}

declare dso_local <2 x float> @_ZNK7Vector2IfEmiERKS0_(%struct.Vector2* nonnull align 4 dereferenceable(8), %struct.Vector2* nonnull align 4 dereferenceable(8)) #2

declare dso_local float @_ZNK7Vector2IfE6lengthEv(%struct.Vector2* nonnull align 4 dereferenceable(8)) #2

; Function Attrs: mustprogress noinline nounwind optnone uwtable
define dso_local zeroext i1 @_ZNK8AC_WPNav9is_activeEv(%class.AC_WPNav* nonnull align 8 dereferenceable(2256) %this) #0 align 2 {
entry:
  %this.addr = alloca %class.AC_WPNav*, align 8
  store %class.AC_WPNav* %this, %class.AC_WPNav** %this.addr, align 8
  %this1 = load %class.AC_WPNav*, %class.AC_WPNav** %this.addr, align 8
  %call = call i32 @_ZN6AP_HAL6millisEv()
  %_wp_last_update = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 28
  %0 = load i32, i32* %_wp_last_update, align 4
  %sub = sub i32 %call, %0
  %cmp = icmp ult i32 %sub, 200
  ret i1 %cmp
}

; Function Attrs: mustprogress noinline nounwind optnone uwtable
define dso_local void @_ZN8AC_WPNav18wp_and_spline_initEf7Vector3IfE(%class.AC_WPNav* nonnull align 8 dereferenceable(2256) %this, float %speed_cms, <2 x float> %stopping_point.coerce0, float %stopping_point.coerce1) #1 align 2 {
entry:
  %stopping_point = alloca %class.Vector3, align 4
  %coerce = alloca { <2 x float>, float }, align 4
  %this.addr = alloca %class.AC_WPNav*, align 8
  %speed_cms.addr = alloca float, align 4
  %ref.tmp = alloca float, align 4
  %ref.tmp4 = alloca float, align 4
  %ref.tmp12 = alloca float, align 4
  %agg.tmp = alloca %class.AP_ParamT.0, align 4
  %ref.tmp34 = alloca float, align 4
  %0 = getelementptr inbounds { <2 x float>, float }, { <2 x float>, float }* %coerce, i32 0, i32 0
  store <2 x float> %stopping_point.coerce0, <2 x float>* %0, align 4
  %1 = getelementptr inbounds { <2 x float>, float }, { <2 x float>, float }* %coerce, i32 0, i32 1
  store float %stopping_point.coerce1, float* %1, align 4
  %2 = bitcast %class.Vector3* %stopping_point to i8*
  %3 = bitcast { <2 x float>, float }* %coerce to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %2, i8* align 4 %3, i64 12, i1 false)
  store %class.AC_WPNav* %this, %class.AC_WPNav** %this.addr, align 8
  store float %speed_cms, float* %speed_cms.addr, align 4
  %this1 = load %class.AC_WPNav*, %class.AC_WPNav** %this.addr, align 8
  %_wp_radius_cm = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 9
  %_wp_radius_cm2 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 9
  store float 5.000000e+00, float* %ref.tmp, align 4
  %call = call nonnull align 4 dereferenceable(4) float* @_ZL3MAXI9AP_ParamTIfL11ap_var_type4EEfEDTqugtfp_fp0_fp_fp0_ERKT_RKT0_(%class.AP_ParamT.0* nonnull align 4 dereferenceable(4) %_wp_radius_cm2, float* nonnull align 4 dereferenceable(4) %ref.tmp)
  call void @_ZN9AP_ParamTIfL11ap_var_type4EE22set_and_save_ifchangedERKf(%class.AP_ParamT.0* nonnull align 4 dereferenceable(4) %_wp_radius_cm, float* nonnull align 4 dereferenceable(4) %call)
  %_wp_speed_cms = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 6
  %_wp_speed_cms3 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 6
  store float 2.000000e+01, float* %ref.tmp4, align 4
  %call5 = call nonnull align 4 dereferenceable(4) float* @_ZL3MAXI9AP_ParamTIfL11ap_var_type4EEfEDTqugtfp_fp0_fp_fp0_ERKT_RKT0_(%class.AP_ParamT.0* nonnull align 4 dereferenceable(4) %_wp_speed_cms3, float* nonnull align 4 dereferenceable(4) %ref.tmp4)
  call void @_ZN9AP_ParamTIfL11ap_var_type4EE22set_and_save_ifchangedERKf(%class.AP_ParamT.0* nonnull align 4 dereferenceable(4) %_wp_speed_cms, float* nonnull align 4 dereferenceable(4) %call5)
  %_pos_control = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 4
  %4 = load %class.AC_PosControl*, %class.AC_PosControl** %_pos_control, align 8
  call void @_ZN13AC_PosControl32init_z_controller_stopping_pointEv(%class.AC_PosControl* nonnull align 8 dereferenceable(1056) %4)
  %_pos_control6 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 4
  %5 = load %class.AC_PosControl*, %class.AC_PosControl** %_pos_control6, align 8
  call void @_ZN13AC_PosControl33init_xy_controller_stopping_pointEv(%class.AC_PosControl* nonnull align 8 dereferenceable(1056) %5)
  %6 = load float, float* %speed_cms.addr, align 4
  %call7 = call zeroext i1 @_Z11is_positiveIfEbT_(float %6)
  %lnot = xor i1 %call7, true
  %_check_wp_speed_change = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 15
  %frombool = zext i1 %lnot to i8
  store i8 %frombool, i8* %_check_wp_speed_change, align 4
  %7 = load float, float* %speed_cms.addr, align 4
  %call8 = call zeroext i1 @_Z11is_positiveIfEbT_(float %7)
  br i1 %call8, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %8 = load float, float* %speed_cms.addr, align 4
  br label %cond.end

cond.false:                                       ; preds = %entry
  %_wp_speed_cms9 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 6
  %call10 = call nonnull align 4 dereferenceable(4) float* @_ZNK9AP_ParamTIfL11ap_var_type4EEcvRKfEv(%class.AP_ParamT.0* nonnull align 4 dereferenceable(4) %_wp_speed_cms9)
  %9 = load float, float* %call10, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi float [ %8, %cond.true ], [ %9, %cond.false ]
  %_wp_desired_speed_xy_cms = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 29
  store float %cond, float* %_wp_desired_speed_xy_cms, align 8
  %_wp_desired_speed_xy_cms11 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 29
  store float 2.000000e+01, float* %ref.tmp12, align 4
  %call13 = call nonnull align 4 dereferenceable(4) float* @_ZL3MAXIffEDTqugtfp_fp0_fp_fp0_ERKT_RKT0_(float* nonnull align 4 dereferenceable(4) %_wp_desired_speed_xy_cms11, float* nonnull align 4 dereferenceable(4) %ref.tmp12)
  %10 = load float, float* %call13, align 4
  %_wp_desired_speed_xy_cms14 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 29
  store float %10, float* %_wp_desired_speed_xy_cms14, align 8
  %_pos_control15 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 4
  %11 = load %class.AC_PosControl*, %class.AC_PosControl** %_pos_control15, align 8
  %_wp_desired_speed_xy_cms16 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 29
  %12 = load float, float* %_wp_desired_speed_xy_cms16, align 8
  %call17 = call float @_ZNK8AC_WPNav19get_wp_accelerationEv(%class.AC_WPNav* nonnull align 8 dereferenceable(2256) %this1)
  call void @_ZN13AC_PosControl22set_max_speed_accel_xyEff(%class.AC_PosControl* nonnull align 8 dereferenceable(1056) %11, float %12, float %call17)
  %_pos_control18 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 4
  %13 = load %class.AC_PosControl*, %class.AC_PosControl** %_pos_control18, align 8
  %_wp_desired_speed_xy_cms19 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 29
  %14 = load float, float* %_wp_desired_speed_xy_cms19, align 8
  %call20 = call float @_ZNK8AC_WPNav19get_wp_accelerationEv(%class.AC_WPNav* nonnull align 8 dereferenceable(2256) %this1)
  call void @_ZN13AC_PosControl29set_correction_speed_accel_xyEff(%class.AC_PosControl* nonnull align 8 dereferenceable(1056) %13, float %14, float %call20)
  %_pos_control21 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 4
  %15 = load %class.AC_PosControl*, %class.AC_PosControl** %_pos_control21, align 8
  %call22 = call float @_ZNK8AC_WPNav22get_default_speed_downEv(%class.AC_WPNav* nonnull align 8 dereferenceable(2256) %this1)
  %fneg = fneg float %call22
  %_wp_speed_up_cms = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 7
  %call23 = call nonnull align 4 dereferenceable(4) float* @_ZNK9AP_ParamTIfL11ap_var_type4EEcvRKfEv(%class.AP_ParamT.0* nonnull align 4 dereferenceable(4) %_wp_speed_up_cms)
  %16 = load float, float* %call23, align 4
  %_wp_accel_z_cmss = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 12
  %call24 = call nonnull align 4 dereferenceable(4) float* @_ZNK9AP_ParamTIfL11ap_var_type4EEcvRKfEv(%class.AP_ParamT.0* nonnull align 4 dereferenceable(4) %_wp_accel_z_cmss)
  %17 = load float, float* %call24, align 4
  call void @_ZN13AC_PosControl21set_max_speed_accel_zEfff(%class.AC_PosControl* nonnull align 8 dereferenceable(1056) %15, float %fneg, float %16, float %17)
  %_pos_control25 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 4
  %18 = load %class.AC_PosControl*, %class.AC_PosControl** %_pos_control25, align 8
  %call26 = call float @_ZNK8AC_WPNav22get_default_speed_downEv(%class.AC_WPNav* nonnull align 8 dereferenceable(2256) %this1)
  %fneg27 = fneg float %call26
  %_wp_speed_up_cms28 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 7
  %call29 = call nonnull align 4 dereferenceable(4) float* @_ZNK9AP_ParamTIfL11ap_var_type4EEcvRKfEv(%class.AP_ParamT.0* nonnull align 4 dereferenceable(4) %_wp_speed_up_cms28)
  %19 = load float, float* %call29, align 4
  %_wp_accel_z_cmss30 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 12
  %call31 = call nonnull align 4 dereferenceable(4) float* @_ZNK9AP_ParamTIfL11ap_var_type4EEcvRKfEv(%class.AP_ParamT.0* nonnull align 4 dereferenceable(4) %_wp_accel_z_cmss30)
  %20 = load float, float* %call31, align 4
  call void @_ZN13AC_PosControl28set_correction_speed_accel_zEfff(%class.AC_PosControl* nonnull align 8 dereferenceable(1056) %18, float %fneg27, float %19, float %20)
  %_wp_jerk = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 13
  %21 = bitcast %class.AP_ParamT.0* %agg.tmp to i8*
  %22 = bitcast %class.AP_ParamT.0* %_wp_jerk to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %21, i8* align 4 %22, i64 4, i1 false)
  %coerce.dive = getelementptr inbounds %class.AP_ParamT.0, %class.AP_ParamT.0* %agg.tmp, i32 0, i32 0
  %23 = load float, float* %coerce.dive, align 4
  %call32 = call zeroext i1 @_Z11is_positiveI9AP_ParamTIfL11ap_var_type4EEEbT_(float %23)
  br i1 %call32, label %if.end, label %if.then

if.then:                                          ; preds = %cond.end
  %_wp_jerk33 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 13
  %call35 = call float @_ZNK8AC_WPNav19get_wp_accelerationEv(%class.AC_WPNav* nonnull align 8 dereferenceable(2256) %this1)
  store float %call35, float* %ref.tmp34, align 4
  call void @_ZN9AP_ParamTIfL11ap_var_type4EE3setERKf(%class.AP_ParamT.0* nonnull align 4 dereferenceable(4) %_wp_jerk33, float* nonnull align 4 dereferenceable(4) %ref.tmp34)
  br label %if.end

if.end:                                           ; preds = %if.then, %cond.end
  call void @_ZN8AC_WPNav25calc_scurve_jerk_and_snapEv(%class.AC_WPNav* nonnull align 8 dereferenceable(2256) %this1)
  %_scurve_prev_leg = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 19
  call void @_ZN6SCurve4initEv(%class.SCurve* nonnull align 4 dereferenceable(604) %_scurve_prev_leg)
  %_scurve_this_leg = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 20
  call void @_ZN6SCurve4initEv(%class.SCurve* nonnull align 4 dereferenceable(604) %_scurve_this_leg)
  %_scurve_next_leg = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 21
  call void @_ZN6SCurve4initEv(%class.SCurve* nonnull align 4 dereferenceable(604) %_scurve_next_leg)
  %_track_scalar_dt = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 33
  store float 1.000000e+00, float* %_track_scalar_dt, align 8
  %_flags = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 1
  %24 = bitcast %"struct.AC_WPNav::wpnav_flags"* %_flags to i8*
  %bf.load = load i8, i8* %24, align 8
  %bf.clear = and i8 %bf.load, -2
  %bf.set = or i8 %bf.clear, 1
  store i8 %bf.set, i8* %24, align 8
  %_flags36 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 1
  %25 = bitcast %"struct.AC_WPNav::wpnav_flags"* %_flags36 to i8*
  %bf.load37 = load i8, i8* %25, align 8
  %bf.clear38 = and i8 %bf.load37, -3
  store i8 %bf.clear38, i8* %25, align 8
  %call39 = call zeroext i1 @_ZNK7Vector3IfE7is_zeroEv(%class.Vector3* nonnull align 4 dereferenceable(12) %stopping_point)
  br i1 %call39, label %if.then40, label %if.end41

if.then40:                                        ; preds = %if.end
  call void @_ZNK8AC_WPNav21get_wp_stopping_pointER7Vector3IfE(%class.AC_WPNav* nonnull align 8 dereferenceable(2256) %this1, %class.Vector3* nonnull align 4 dereferenceable(12) %stopping_point)
  br label %if.end41

if.end41:                                         ; preds = %if.then40, %if.end
  %_destination = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 31
  %26 = bitcast %class.Vector3* %_destination to i8*
  %27 = bitcast %class.Vector3* %stopping_point to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %26, i8* align 4 %27, i64 12, i1 false)
  %_origin = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 30
  %28 = bitcast %class.Vector3* %_origin to i8*
  %29 = bitcast %class.Vector3* %_destination to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %28, i8* align 4 %29, i64 12, i1 false)
  %_terrain_alt = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 37
  store i8 0, i8* %_terrain_alt, align 1
  %_this_leg_is_spline = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 26
  store i8 0, i8* %_this_leg_is_spline, align 8
  %_wp_desired_speed_xy_cms42 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 29
  %30 = load float, float* %_wp_desired_speed_xy_cms42, align 8
  %_offset_vel = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 34
  store float %30, float* %_offset_vel, align 4
  %_offset_accel = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 35
  store float 0.000000e+00, float* %_offset_accel, align 8
  %_paused = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 36
  store i8 0, i8* %_paused, align 4
  %call43 = call i32 @_ZN6AP_HAL6millisEv()
  %_wp_last_update = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 28
  store i32 %call43, i32* %_wp_last_update, align 4
  ret void
}

declare dso_local void @_ZN6SCurve4initEv(%class.SCurve* nonnull align 4 dereferenceable(604)) #2

; Function Attrs: mustprogress noinline nounwind optnone uwtable
define linkonce_odr dso_local void @_ZN13AC_PosControl19set_pos_offset_z_cmEf(%class.AC_PosControl* nonnull align 8 dereferenceable(1056) %this, float %pos_offset_z) #0 comdat align 2 {
entry:
  %this.addr = alloca %class.AC_PosControl*, align 8
  %pos_offset_z.addr = alloca float, align 4
  store %class.AC_PosControl* %this, %class.AC_PosControl** %this.addr, align 8
  store float %pos_offset_z, float* %pos_offset_z.addr, align 4
  %this1 = load %class.AC_PosControl*, %class.AC_PosControl** %this.addr, align 8
  %0 = load float, float* %pos_offset_z.addr, align 4
  %_pos_offset_z = getelementptr inbounds %class.AC_PosControl, %class.AC_PosControl* %this1, i32 0, i32 37
  store float %0, float* %_pos_offset_z, align 4
  ret void
}

declare dso_local zeroext i1 @_ZNK6SCurve8finishedEv(%class.SCurve* nonnull align 4 dereferenceable(604)) #2

declare dso_local void @_ZN6SCurve15calculate_trackERK7Vector3IfES3_fffffff(%class.SCurve* nonnull align 4 dereferenceable(604), %class.Vector3* nonnull align 4 dereferenceable(12), %class.Vector3* nonnull align 4 dereferenceable(12), float, float, float, float, float, float, float) #2

declare dso_local float @_ZN6SCurve20set_origin_speed_maxEf(%class.SCurve* nonnull align 4 dereferenceable(604), float) #2

; Function Attrs: mustprogress noinline nounwind optnone uwtable
define linkonce_odr dso_local void @_ZN7Vector3IfE4zeroEv(%class.Vector3* nonnull align 4 dereferenceable(12) %this) #0 comdat align 2 {
entry:
  %this.addr = alloca %class.Vector3*, align 8
  store %class.Vector3* %this, %class.Vector3** %this.addr, align 8
  %this1 = load %class.Vector3*, %class.Vector3** %this.addr, align 8
  %z = getelementptr inbounds %class.Vector3, %class.Vector3* %this1, i32 0, i32 2
  store float 0.000000e+00, float* %z, align 4
  %y = getelementptr inbounds %class.Vector3, %class.Vector3* %this1, i32 0, i32 1
  store float 0.000000e+00, float* %y, align 4
  %x = getelementptr inbounds %class.Vector3, %class.Vector3* %this1, i32 0, i32 0
  store float 0.000000e+00, float* %x, align 4
  ret void
}

declare dso_local void @_ZN9AP_ParamTIfL11ap_var_type4EE22set_and_save_ifchangedERKf(%class.AP_ParamT.0* nonnull align 4 dereferenceable(4), float* nonnull align 4 dereferenceable(4)) #2

declare dso_local void @_ZN13AC_PosControl32init_z_controller_stopping_pointEv(%class.AC_PosControl* nonnull align 8 dereferenceable(1056)) #2

declare dso_local void @_ZN13AC_PosControl33init_xy_controller_stopping_pointEv(%class.AC_PosControl* nonnull align 8 dereferenceable(1056)) #2

; Function Attrs: mustprogress noinline nounwind optnone uwtable
define internal nonnull align 4 dereferenceable(4) float* @_ZL3MAXIffEDTqugtfp_fp0_fp_fp0_ERKT_RKT0_(float* nonnull align 4 dereferenceable(4) %one, float* nonnull align 4 dereferenceable(4) %two) #0 {
entry:
  %one.addr = alloca float*, align 8
  %two.addr = alloca float*, align 8
  store float* %one, float** %one.addr, align 8
  store float* %two, float** %two.addr, align 8
  %0 = load float*, float** %one.addr, align 8
  %1 = load float, float* %0, align 4
  %2 = load float*, float** %two.addr, align 8
  %3 = load float, float* %2, align 4
  %cmp = fcmp ogt float %1, %3
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %4 = load float*, float** %one.addr, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  %5 = load float*, float** %two.addr, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond-lvalue = phi float* [ %4, %cond.true ], [ %5, %cond.false ]
  ret float* %cond-lvalue
}

; Function Attrs: mustprogress noinline nounwind optnone uwtable
define linkonce_odr dso_local float @_ZNK8AC_WPNav22get_default_speed_downEv(%class.AC_WPNav* nonnull align 8 dereferenceable(2256) %this) #0 comdat align 2 {
entry:
  %this.addr = alloca %class.AC_WPNav*, align 8
  store %class.AC_WPNav* %this, %class.AC_WPNav** %this.addr, align 8
  %this1 = load %class.AC_WPNav*, %class.AC_WPNav** %this.addr, align 8
  %_wp_speed_down_cms = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 8
  %call = call nonnull align 4 dereferenceable(4) float* @_ZNK9AP_ParamTIfL11ap_var_type4EEcvRKfEv(%class.AP_ParamT.0* nonnull align 4 dereferenceable(4) %_wp_speed_down_cms)
  %0 = load float, float* %call, align 4
  %1 = call float @llvm.fabs.f32(float %0)
  ret float %1
}

declare dso_local void @_ZN13AC_PosControl28set_correction_speed_accel_zEfff(%class.AC_PosControl* nonnull align 8 dereferenceable(1056), float, float, float) #2

; Function Attrs: mustprogress noinline nounwind optnone uwtable
define linkonce_odr dso_local void @_ZN9AP_ParamTIfL11ap_var_type4EE3setERKf(%class.AP_ParamT.0* nonnull align 4 dereferenceable(4) %this, float* nonnull align 4 dereferenceable(4) %v) #0 comdat align 2 {
entry:
  %this.addr = alloca %class.AP_ParamT.0*, align 8
  %v.addr = alloca float*, align 8
  store %class.AP_ParamT.0* %this, %class.AP_ParamT.0** %this.addr, align 8
  store float* %v, float** %v.addr, align 8
  %this1 = load %class.AP_ParamT.0*, %class.AP_ParamT.0** %this.addr, align 8
  %0 = load float*, float** %v.addr, align 8
  %1 = load float, float* %0, align 4
  %_value = getelementptr inbounds %class.AP_ParamT.0, %class.AP_ParamT.0* %this1, i32 0, i32 0
  store float %1, float* %_value, align 4
  ret void
}

; Function Attrs: mustprogress noinline nounwind optnone uwtable
define dso_local void @_ZN8AC_WPNav25calc_scurve_jerk_and_snapEv(%class.AC_WPNav* nonnull align 8 dereferenceable(2256) %this) #0 align 2 {
entry:
  %this.addr = alloca %class.AC_WPNav*, align 8
  %ref.tmp = alloca float, align 4
  %ref.tmp2 = alloca float, align 4
  %ref.tmp17 = alloca float, align 4
  %ref.tmp20 = alloca float, align 4
  %snap = alloca float, align 4
  %ref.tmp23 = alloca float, align 4
  %ref.tmp26 = alloca float, align 4
  store %class.AC_WPNav* %this, %class.AC_WPNav** %this.addr, align 8
  %this1 = load %class.AC_WPNav*, %class.AC_WPNav** %this.addr, align 8
  %_attitude_control = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 5
  %0 = load %class.AC_AttitudeControl*, %class.AC_AttitudeControl** %_attitude_control, align 8
  %call = call float @_ZNK18AC_AttitudeControl25get_ang_vel_roll_max_radsEv(%class.AC_AttitudeControl* nonnull align 8 dereferenceable(316) %0)
  %mul = fmul float %call, 0x40239D0140000000
  store float %mul, float* %ref.tmp, align 4
  %_attitude_control3 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 5
  %1 = load %class.AC_AttitudeControl*, %class.AC_AttitudeControl** %_attitude_control3, align 8
  %call4 = call float @_ZNK18AC_AttitudeControl26get_ang_vel_pitch_max_radsEv(%class.AC_AttitudeControl* nonnull align 8 dereferenceable(316) %1)
  %mul5 = fmul float %call4, 0x40239D0140000000
  store float %mul5, float* %ref.tmp2, align 4
  %call6 = call nonnull align 4 dereferenceable(4) float* @_ZL3MINIffEDTqultfp_fp0_fp_fp0_ERKT_RKT0_(float* nonnull align 4 dereferenceable(4) %ref.tmp, float* nonnull align 4 dereferenceable(4) %ref.tmp2)
  %2 = load float, float* %call6, align 4
  %_scurve_jerk = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 22
  store float %2, float* %_scurve_jerk, align 8
  %_scurve_jerk7 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 22
  %3 = load float, float* %_scurve_jerk7, align 8
  %call8 = call zeroext i1 @_Z7is_zerof(float %3)
  br i1 %call8, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %_wp_jerk = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 13
  %call9 = call nonnull align 4 dereferenceable(4) float* @_ZNK9AP_ParamTIfL11ap_var_type4EEcvRKfEv(%class.AP_ParamT.0* nonnull align 4 dereferenceable(4) %_wp_jerk)
  %4 = load float, float* %call9, align 4
  %_scurve_jerk10 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 22
  store float %4, float* %_scurve_jerk10, align 8
  br label %if.end

if.else:                                          ; preds = %entry
  %_scurve_jerk11 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 22
  %_wp_jerk12 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 13
  %call13 = call nonnull align 4 dereferenceable(4) float* @_ZL3MINIf9AP_ParamTIfL11ap_var_type4EEEDTqultfp_fp0_fp_fp0_ERKT_RKT0_(float* nonnull align 4 dereferenceable(4) %_scurve_jerk11, %class.AP_ParamT.0* nonnull align 4 dereferenceable(4) %_wp_jerk12)
  %5 = load float, float* %call13, align 4
  %_scurve_jerk14 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 22
  store float %5, float* %_scurve_jerk14, align 8
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %_scurve_jerk15 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 22
  %6 = load float, float* %_scurve_jerk15, align 8
  %mul16 = fmul float %6, 0x400921FB60000000
  %_attitude_control18 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 5
  %7 = load %class.AC_AttitudeControl*, %class.AC_AttitudeControl** %_attitude_control18, align 8
  %call19 = call float @_ZNK18AC_AttitudeControl12get_input_tcEv(%class.AC_AttitudeControl* nonnull align 8 dereferenceable(316) %7)
  store float %call19, float* %ref.tmp17, align 4
  store float 0x3FB99999A0000000, float* %ref.tmp20, align 4
  %call21 = call nonnull align 4 dereferenceable(4) float* @_ZL3MAXIffEDTqugtfp_fp0_fp_fp0_ERKT_RKT0_(float* nonnull align 4 dereferenceable(4) %ref.tmp17, float* nonnull align 4 dereferenceable(4) %ref.tmp20)
  %8 = load float, float* %call21, align 4
  %mul22 = fmul float 2.000000e+00, %8
  %div = fdiv float %mul16, %mul22
  %_scurve_snap = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 23
  store float %div, float* %_scurve_snap, align 4
  %_attitude_control24 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 5
  %9 = load %class.AC_AttitudeControl*, %class.AC_AttitudeControl** %_attitude_control24, align 8
  %call25 = call float @_ZNK18AC_AttitudeControl24get_accel_roll_max_radssEv(%class.AC_AttitudeControl* nonnull align 8 dereferenceable(316) %9)
  store float %call25, float* %ref.tmp23, align 4
  %_attitude_control27 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 5
  %10 = load %class.AC_AttitudeControl*, %class.AC_AttitudeControl** %_attitude_control27, align 8
  %call28 = call float @_ZNK18AC_AttitudeControl25get_accel_pitch_max_radssEv(%class.AC_AttitudeControl* nonnull align 8 dereferenceable(316) %10)
  store float %call28, float* %ref.tmp26, align 4
  %call29 = call nonnull align 4 dereferenceable(4) float* @_ZL3MINIffEDTqultfp_fp0_fp_fp0_ERKT_RKT0_(float* nonnull align 4 dereferenceable(4) %ref.tmp23, float* nonnull align 4 dereferenceable(4) %ref.tmp26)
  %11 = load float, float* %call29, align 4
  %mul30 = fmul float %11, 0x40239D0140000000
  store float %mul30, float* %snap, align 4
  %12 = load float, float* %snap, align 4
  %call31 = call zeroext i1 @_Z11is_positiveIfEbT_(float %12)
  br i1 %call31, label %if.then32, label %if.end36

if.then32:                                        ; preds = %if.end
  %_scurve_snap33 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 23
  %call34 = call nonnull align 4 dereferenceable(4) float* @_ZL3MINIffEDTqultfp_fp0_fp_fp0_ERKT_RKT0_(float* nonnull align 4 dereferenceable(4) %_scurve_snap33, float* nonnull align 4 dereferenceable(4) %snap)
  %13 = load float, float* %call34, align 4
  %_scurve_snap35 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 23
  store float %13, float* %_scurve_snap35, align 4
  br label %if.end36

if.end36:                                         ; preds = %if.then32, %if.end
  %_scurve_snap37 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 23
  %14 = load float, float* %_scurve_snap37, align 4
  %mul38 = fmul float %14, 5.000000e-01
  store float %mul38, float* %_scurve_snap37, align 4
  ret void
}

; Function Attrs: mustprogress noinline nounwind optnone uwtable
define linkonce_odr dso_local zeroext i1 @_ZNK7Vector3IfE7is_zeroEv(%class.Vector3* nonnull align 4 dereferenceable(12) %this) #0 comdat align 2 {
entry:
  %this.addr = alloca %class.Vector3*, align 8
  store %class.Vector3* %this, %class.Vector3** %this.addr, align 8
  %this1 = load %class.Vector3*, %class.Vector3** %this.addr, align 8
  %x = getelementptr inbounds %class.Vector3, %class.Vector3* %this1, i32 0, i32 0
  %0 = load float, float* %x, align 4
  %call = call zeroext i1 @_Z7is_zerof(float %0)
  br i1 %call, label %land.lhs.true, label %land.end

land.lhs.true:                                    ; preds = %entry
  %y = getelementptr inbounds %class.Vector3, %class.Vector3* %this1, i32 0, i32 1
  %1 = load float, float* %y, align 4
  %call2 = call zeroext i1 @_Z7is_zerof(float %1)
  br i1 %call2, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %land.lhs.true
  %z = getelementptr inbounds %class.Vector3, %class.Vector3* %this1, i32 0, i32 2
  %2 = load float, float* %z, align 4
  %call3 = call zeroext i1 @_Z7is_zerof(float %2)
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %entry
  %3 = phi i1 [ false, %land.lhs.true ], [ false, %entry ], [ %call3, %land.rhs ]
  ret i1 %3
}

; Function Attrs: mustprogress noinline nounwind optnone uwtable
define dso_local void @_ZNK8AC_WPNav21get_wp_stopping_pointER7Vector3IfE(%class.AC_WPNav* nonnull align 8 dereferenceable(2256) %this, %class.Vector3* nonnull align 4 dereferenceable(12) %stopping_point) #0 align 2 {
entry:
  %this.addr = alloca %class.AC_WPNav*, align 8
  %stopping_point.addr = alloca %class.Vector3*, align 8
  %stop = alloca %class.Vector3.25, align 8
  %ref.tmp = alloca %class.Vector3, align 4
  %tmp.coerce = alloca { <2 x float>, float }, align 8
  store %class.AC_WPNav* %this, %class.AC_WPNav** %this.addr, align 8
  store %class.Vector3* %stopping_point, %class.Vector3** %stopping_point.addr, align 8
  %this1 = load %class.AC_WPNav*, %class.AC_WPNav** %this.addr, align 8
  call void @_ZN7Vector3IdEC2Ev(%class.Vector3.25* nonnull align 8 dereferenceable(24) %stop)
  %_pos_control = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 4
  %0 = load %class.AC_PosControl*, %class.AC_PosControl** %_pos_control, align 8
  %call = call nonnull align 8 dereferenceable(16) %struct.Vector2.36* @_ZN7Vector3IdE2xyEv(%class.Vector3.25* nonnull align 8 dereferenceable(24) %stop)
  call void @_ZNK13AC_PosControl24get_stopping_point_xy_cmER7Vector2IdE(%class.AC_PosControl* nonnull align 8 dereferenceable(1056) %0, %struct.Vector2.36* nonnull align 8 dereferenceable(16) %call)
  %_pos_control2 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 4
  %1 = load %class.AC_PosControl*, %class.AC_PosControl** %_pos_control2, align 8
  %z = getelementptr inbounds %class.Vector3.25, %class.Vector3.25* %stop, i32 0, i32 2
  call void @_ZNK13AC_PosControl23get_stopping_point_z_cmERd(%class.AC_PosControl* nonnull align 8 dereferenceable(1056) %1, double* nonnull align 8 dereferenceable(8) %z)
  %call3 = call { <2 x float>, float } @_ZNK7Vector3IdE7tofloatEv(%class.Vector3.25* nonnull align 8 dereferenceable(24) %stop)
  store { <2 x float>, float } %call3, { <2 x float>, float }* %tmp.coerce, align 8
  %2 = bitcast %class.Vector3* %ref.tmp to i8*
  %3 = bitcast { <2 x float>, float }* %tmp.coerce to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %2, i8* align 8 %3, i64 12, i1 false)
  %4 = load %class.Vector3*, %class.Vector3** %stopping_point.addr, align 8
  %5 = bitcast %class.Vector3* %4 to i8*
  %6 = bitcast %class.Vector3* %ref.tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %5, i8* align 4 %6, i64 12, i1 false)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define linkonce_odr dso_local void @_ZN7Vector3IdEC2Ev(%class.Vector3.25* nonnull align 8 dereferenceable(24) %this) unnamed_addr #3 comdat align 2 {
entry:
  %this.addr = alloca %class.Vector3.25*, align 8
  store %class.Vector3.25* %this, %class.Vector3.25** %this.addr, align 8
  %this1 = load %class.Vector3.25*, %class.Vector3.25** %this.addr, align 8
  %x = getelementptr inbounds %class.Vector3.25, %class.Vector3.25* %this1, i32 0, i32 0
  store double 0.000000e+00, double* %x, align 8
  %y = getelementptr inbounds %class.Vector3.25, %class.Vector3.25* %this1, i32 0, i32 1
  store double 0.000000e+00, double* %y, align 8
  %z = getelementptr inbounds %class.Vector3.25, %class.Vector3.25* %this1, i32 0, i32 2
  store double 0.000000e+00, double* %z, align 8
  ret void
}

; Function Attrs: mustprogress noinline nounwind optnone uwtable
define linkonce_odr dso_local nonnull align 8 dereferenceable(16) %struct.Vector2.36* @_ZN7Vector3IdE2xyEv(%class.Vector3.25* nonnull align 8 dereferenceable(24) %this) #0 comdat align 2 {
entry:
  %this.addr = alloca %class.Vector3.25*, align 8
  store %class.Vector3.25* %this, %class.Vector3.25** %this.addr, align 8
  %this1 = load %class.Vector3.25*, %class.Vector3.25** %this.addr, align 8
  %0 = bitcast %class.Vector3.25* %this1 to %struct.Vector2.36*
  ret %struct.Vector2.36* %0
}

declare dso_local void @_ZNK13AC_PosControl24get_stopping_point_xy_cmER7Vector2IdE(%class.AC_PosControl* nonnull align 8 dereferenceable(1056), %struct.Vector2.36* nonnull align 8 dereferenceable(16)) #2

declare dso_local void @_ZNK13AC_PosControl23get_stopping_point_z_cmERd(%class.AC_PosControl* nonnull align 8 dereferenceable(1056), double* nonnull align 8 dereferenceable(8)) #2

; Function Attrs: mustprogress noinline nounwind optnone uwtable
define linkonce_odr dso_local float @_ZNK18AC_AttitudeControl25get_ang_vel_roll_max_radsEv(%class.AC_AttitudeControl* nonnull align 8 dereferenceable(316) %this) #0 comdat align 2 {
entry:
  %this.addr = alloca %class.AC_AttitudeControl*, align 8
  store %class.AC_AttitudeControl* %this, %class.AC_AttitudeControl** %this.addr, align 8
  %this1 = load %class.AC_AttitudeControl*, %class.AC_AttitudeControl** %this.addr, align 8
  %_ang_vel_roll_max = getelementptr inbounds %class.AC_AttitudeControl, %class.AC_AttitudeControl* %this1, i32 0, i32 2
  %call = call nonnull align 4 dereferenceable(4) float* @_ZNK9AP_ParamTIfL11ap_var_type4EEcvRKfEv(%class.AP_ParamT.0* nonnull align 4 dereferenceable(4) %_ang_vel_roll_max)
  %0 = load float, float* %call, align 4
  %conv = fpext float %0 to double
  %call2 = call double @_ZL7radiansd(double %conv)
  %conv3 = fptrunc double %call2 to float
  ret float %conv3
}

; Function Attrs: mustprogress noinline nounwind optnone uwtable
define linkonce_odr dso_local float @_ZNK18AC_AttitudeControl26get_ang_vel_pitch_max_radsEv(%class.AC_AttitudeControl* nonnull align 8 dereferenceable(316) %this) #0 comdat align 2 {
entry:
  %this.addr = alloca %class.AC_AttitudeControl*, align 8
  store %class.AC_AttitudeControl* %this, %class.AC_AttitudeControl** %this.addr, align 8
  %this1 = load %class.AC_AttitudeControl*, %class.AC_AttitudeControl** %this.addr, align 8
  %_ang_vel_pitch_max = getelementptr inbounds %class.AC_AttitudeControl, %class.AC_AttitudeControl* %this1, i32 0, i32 3
  %call = call nonnull align 4 dereferenceable(4) float* @_ZNK9AP_ParamTIfL11ap_var_type4EEcvRKfEv(%class.AP_ParamT.0* nonnull align 4 dereferenceable(4) %_ang_vel_pitch_max)
  %0 = load float, float* %call, align 4
  %conv = fpext float %0 to double
  %call2 = call double @_ZL7radiansd(double %conv)
  %conv3 = fptrunc double %call2 to float
  ret float %conv3
}

; Function Attrs: mustprogress noinline nounwind optnone uwtable
define internal nonnull align 4 dereferenceable(4) float* @_ZL3MINIffEDTqultfp_fp0_fp_fp0_ERKT_RKT0_(float* nonnull align 4 dereferenceable(4) %one, float* nonnull align 4 dereferenceable(4) %two) #0 {
entry:
  %one.addr = alloca float*, align 8
  %two.addr = alloca float*, align 8
  store float* %one, float** %one.addr, align 8
  store float* %two, float** %two.addr, align 8
  %0 = load float*, float** %one.addr, align 8
  %1 = load float, float* %0, align 4
  %2 = load float*, float** %two.addr, align 8
  %3 = load float, float* %2, align 4
  %cmp = fcmp olt float %1, %3
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %4 = load float*, float** %one.addr, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  %5 = load float*, float** %two.addr, align 8
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond-lvalue = phi float* [ %4, %cond.true ], [ %5, %cond.false ]
  ret float* %cond-lvalue
}

; Function Attrs: mustprogress noinline nounwind optnone uwtable
define internal nonnull align 4 dereferenceable(4) float* @_ZL3MINIf9AP_ParamTIfL11ap_var_type4EEEDTqultfp_fp0_fp_fp0_ERKT_RKT0_(float* nonnull align 4 dereferenceable(4) %one, %class.AP_ParamT.0* nonnull align 4 dereferenceable(4) %two) #0 {
entry:
  %one.addr = alloca float*, align 8
  %two.addr = alloca %class.AP_ParamT.0*, align 8
  store float* %one, float** %one.addr, align 8
  store %class.AP_ParamT.0* %two, %class.AP_ParamT.0** %two.addr, align 8
  %0 = load float*, float** %one.addr, align 8
  %1 = load float, float* %0, align 4
  %2 = load %class.AP_ParamT.0*, %class.AP_ParamT.0** %two.addr, align 8
  %call = call nonnull align 4 dereferenceable(4) float* @_ZNK9AP_ParamTIfL11ap_var_type4EEcvRKfEv(%class.AP_ParamT.0* nonnull align 4 dereferenceable(4) %2)
  %3 = load float, float* %call, align 4
  %cmp = fcmp olt float %1, %3
  br i1 %cmp, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %4 = load float*, float** %one.addr, align 8
  br label %cond.end

cond.false:                                       ; preds = %entry
  %5 = load %class.AP_ParamT.0*, %class.AP_ParamT.0** %two.addr, align 8
  %call1 = call nonnull align 4 dereferenceable(4) float* @_ZNK9AP_ParamTIfL11ap_var_type4EEcvRKfEv(%class.AP_ParamT.0* nonnull align 4 dereferenceable(4) %5)
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond-lvalue = phi float* [ %4, %cond.true ], [ %call1, %cond.false ]
  ret float* %cond-lvalue
}

; Function Attrs: mustprogress noinline nounwind optnone uwtable
define linkonce_odr dso_local float @_ZNK18AC_AttitudeControl12get_input_tcEv(%class.AC_AttitudeControl* nonnull align 8 dereferenceable(316) %this) #0 comdat align 2 {
entry:
  %this.addr = alloca %class.AC_AttitudeControl*, align 8
  store %class.AC_AttitudeControl* %this, %class.AC_AttitudeControl** %this.addr, align 8
  %this1 = load %class.AC_AttitudeControl*, %class.AC_AttitudeControl** %this.addr, align 8
  %_input_tc = getelementptr inbounds %class.AC_AttitudeControl, %class.AC_AttitudeControl* %this1, i32 0, i32 15
  %call = call nonnull align 4 dereferenceable(4) float* @_ZNK9AP_ParamTIfL11ap_var_type4EEcvRKfEv(%class.AP_ParamT.0* nonnull align 4 dereferenceable(4) %_input_tc)
  %0 = load float, float* %call, align 4
  ret float %0
}

; Function Attrs: mustprogress noinline nounwind optnone uwtable
define linkonce_odr dso_local float @_ZNK18AC_AttitudeControl24get_accel_roll_max_radssEv(%class.AC_AttitudeControl* nonnull align 8 dereferenceable(316) %this) #0 comdat align 2 {
entry:
  %this.addr = alloca %class.AC_AttitudeControl*, align 8
  store %class.AC_AttitudeControl* %this, %class.AC_AttitudeControl** %this.addr, align 8
  %this1 = load %class.AC_AttitudeControl*, %class.AC_AttitudeControl** %this.addr, align 8
  %_accel_roll_max = getelementptr inbounds %class.AC_AttitudeControl, %class.AC_AttitudeControl* %this1, i32 0, i32 5
  %call = call nonnull align 4 dereferenceable(4) float* @_ZNK9AP_ParamTIfL11ap_var_type4EEcvRKfEv(%class.AP_ParamT.0* nonnull align 4 dereferenceable(4) %_accel_roll_max)
  %0 = load float, float* %call, align 4
  %mul = fmul float %0, 0x3F847AE140000000
  %conv = fpext float %mul to double
  %call2 = call double @_ZL7radiansd(double %conv)
  %conv3 = fptrunc double %call2 to float
  ret float %conv3
}

; Function Attrs: mustprogress noinline nounwind optnone uwtable
define linkonce_odr dso_local float @_ZNK18AC_AttitudeControl25get_accel_pitch_max_radssEv(%class.AC_AttitudeControl* nonnull align 8 dereferenceable(316) %this) #0 comdat align 2 {
entry:
  %this.addr = alloca %class.AC_AttitudeControl*, align 8
  store %class.AC_AttitudeControl* %this, %class.AC_AttitudeControl** %this.addr, align 8
  %this1 = load %class.AC_AttitudeControl*, %class.AC_AttitudeControl** %this.addr, align 8
  %_accel_pitch_max = getelementptr inbounds %class.AC_AttitudeControl, %class.AC_AttitudeControl* %this1, i32 0, i32 6
  %call = call nonnull align 4 dereferenceable(4) float* @_ZNK9AP_ParamTIfL11ap_var_type4EEcvRKfEv(%class.AP_ParamT.0* nonnull align 4 dereferenceable(4) %_accel_pitch_max)
  %0 = load float, float* %call, align 4
  %mul = fmul float %0, 0x3F847AE140000000
  %conv = fpext float %mul to double
  %call2 = call double @_ZL7radiansd(double %conv)
  %conv3 = fptrunc double %call2 to float
  ret float %conv3
}

; Function Attrs: mustprogress noinline nounwind optnone uwtable
define internal double @_ZL7radiansd(double %deg) #0 {
entry:
  %deg.addr = alloca double, align 8
  store double %deg, double* %deg.addr, align 8
  %0 = load double, double* %deg.addr, align 8
  %mul = fmul double %0, 0x3F91DF46A0000000
  ret double %mul
}

; Function Attrs: mustprogress noinline nounwind optnone uwtable
define dso_local zeroext i1 @_ZNK8AC_WPNav22get_wp_destination_locER8Location(%class.AC_WPNav* nonnull align 8 dereferenceable(2256) %this, %class.Location* nonnull align 4 dereferenceable(16) %destination) #0 align 2 {
entry:
  %retval = alloca i1, align 1
  %this.addr = alloca %class.AC_WPNav*, align 8
  %destination.addr = alloca %class.Location*, align 8
  %ref.tmp = alloca %class.Location, align 4
  store %class.AC_WPNav* %this, %class.AC_WPNav** %this.addr, align 8
  store %class.Location* %destination, %class.Location** %destination.addr, align 8
  %this1 = load %class.AC_WPNav*, %class.AC_WPNav** %this.addr, align 8
  %call = call nonnull align 8 dereferenceable(2438) %class.AP_AHRS* @_ZN2AP4ahrsEv()
  %0 = load %class.Location*, %class.Location** %destination.addr, align 8
  %call2 = call zeroext i1 @_ZNK7AP_AHRS10get_originER8Location(%class.AP_AHRS* nonnull align 8 dereferenceable(2438) %call, %class.Location* nonnull align 4 dereferenceable(16) %0)
  br i1 %call2, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i1 false, i1* %retval, align 1
  br label %return

if.end:                                           ; preds = %entry
  %call3 = call nonnull align 4 dereferenceable(12) %class.Vector3* @_ZNK8AC_WPNav18get_wp_destinationEv(%class.AC_WPNav* nonnull align 8 dereferenceable(2256) %this1)
  %_terrain_alt = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 37
  %1 = load i8, i8* %_terrain_alt, align 1
  %tobool = trunc i8 %1 to i1
  %2 = zext i1 %tobool to i64
  %cond = select i1 %tobool, i32 3, i32 2
  call void @_ZN8LocationC1ERK7Vector3IfENS_8AltFrameE(%class.Location* nonnull align 4 dereferenceable(16) %ref.tmp, %class.Vector3* nonnull align 4 dereferenceable(12) %call3, i32 %cond)
  %3 = load %class.Location*, %class.Location** %destination.addr, align 8
  %4 = bitcast %class.Location* %3 to i8*
  %5 = bitcast %class.Location* %ref.tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %4, i8* align 4 %5, i64 16, i1 false)
  store i1 true, i1* %retval, align 1
  br label %return

return:                                           ; preds = %if.end, %if.then
  %6 = load i1, i1* %retval, align 1
  ret i1 %6
}

declare dso_local nonnull align 8 dereferenceable(2438) %class.AP_AHRS* @_ZN2AP4ahrsEv() #2

declare dso_local zeroext i1 @_ZNK7AP_AHRS10get_originER8Location(%class.AP_AHRS* nonnull align 8 dereferenceable(2438), %class.Location* nonnull align 4 dereferenceable(16)) #2

; Function Attrs: mustprogress noinline nounwind optnone uwtable
define linkonce_odr dso_local nonnull align 4 dereferenceable(12) %class.Vector3* @_ZNK8AC_WPNav18get_wp_destinationEv(%class.AC_WPNav* nonnull align 8 dereferenceable(2256) %this) #0 comdat align 2 {
entry:
  %this.addr = alloca %class.AC_WPNav*, align 8
  store %class.AC_WPNav* %this, %class.AC_WPNav** %this.addr, align 8
  %this1 = load %class.AC_WPNav*, %class.AC_WPNav** %this.addr, align 8
  %_destination = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 31
  ret %class.Vector3* %_destination
}

declare dso_local void @_ZN8LocationC1ERK7Vector3IfENS_8AltFrameE(%class.Location* nonnull align 4 dereferenceable(16), %class.Vector3* nonnull align 4 dereferenceable(12), i32) unnamed_addr #2

; Function Attrs: noinline nounwind uwtable
define internal void @_GLOBAL__sub_I_AC_WPNav.cpp() #6 section ".text.startup" {
entry:
  call void @__cxx_global_var_init()
  call void @__cxx_global_var_init.1()
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @__cxx_global_var_init() #6 section ".text.startup" {
entry:
  %call = call double @_ZSt4asinIiEN9__gnu_cxx11__enable_ifIXsr12__is_integerIT_EE7__valueEdE6__typeES2_(i32 1)
  %div = fdiv double %call, 9.000000e+01
  store double %div, double* @_ZL17DEG_TO_RAD_DOUBLE, align 8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define internal void @__cxx_global_var_init.1() #6 section ".text.startup" {
entry:
  %call = call double @sqrt(double 0x3F7B6B90F1FE94F0) #8
  store double %call, double* @_ZL7WGS84_E, align 8
  ret void
}

; Function Attrs: nounwind
declare dso_local double @sqrt(double) #7

; Function Attrs: mustprogress noinline nounwind optnone uwtable
define linkonce_odr dso_local double @_ZSt4asinIiEN9__gnu_cxx11__enable_ifIXsr12__is_integerIT_EE7__valueEdE6__typeES2_(i32 %__x) #0 comdat {
entry:
  %__x.addr = alloca i32, align 4
  store i32 %__x, i32* %__x.addr, align 4
  %0 = load i32, i32* %__x.addr, align 4
  %conv = sitofp i32 %0 to double
  %call = call double @asin(double %conv) #8
  ret double %call
}

; Function Attrs: nounwind
declare dso_local double @asin(double) #7

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @_ZN8AC_WPNavC2ERK14AP_InertialNavRK12AP_AHRS_ViewR13AC_PosControlRK18AC_AttitudeControl(%class.AC_WPNav* nonnull align 8 dereferenceable(2256) %this, %class.AP_InertialNav* nonnull align 8 dereferenceable(32) %inav, %class.AP_AHRS_View* nonnull align 8 dereferenceable(200) %ahrs, %class.AC_PosControl* nonnull align 8 dereferenceable(1056) %pos_control, %class.AC_AttitudeControl* nonnull align 8 dereferenceable(316) %attitude_control) unnamed_addr #3 align 2 {
entry:
  %this.addr = alloca %class.AC_WPNav*, align 8
  %inav.addr = alloca %class.AP_InertialNav*, align 8
  %ahrs.addr = alloca %class.AP_AHRS_View*, align 8
  %pos_control.addr = alloca %class.AC_PosControl*, align 8
  %attitude_control.addr = alloca %class.AC_AttitudeControl*, align 8
  store %class.AC_WPNav* %this, %class.AC_WPNav** %this.addr, align 8
  store %class.AP_InertialNav* %inav, %class.AP_InertialNav** %inav.addr, align 8
  store %class.AP_AHRS_View* %ahrs, %class.AP_AHRS_View** %ahrs.addr, align 8
  store %class.AC_PosControl* %pos_control, %class.AC_PosControl** %pos_control.addr, align 8
  store %class.AC_AttitudeControl* %attitude_control, %class.AC_AttitudeControl** %attitude_control.addr, align 8
  %this1 = load %class.AC_WPNav*, %class.AC_WPNav** %this.addr, align 8
  %0 = bitcast %class.AC_WPNav* %this1 to i32 (...)***
  store i32 (...)** bitcast (i8** getelementptr inbounds ({ [8 x i8*] }, { [8 x i8*] }* @_ZTV8AC_WPNav, i32 0, inrange i32 0, i32 2) to i32 (...)**), i32 (...)*** %0, align 8
  %_flags = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 1
  %_inav = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 2
  %1 = load %class.AP_InertialNav*, %class.AP_InertialNav** %inav.addr, align 8
  store %class.AP_InertialNav* %1, %class.AP_InertialNav** %_inav, align 8
  %_ahrs = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 3
  %2 = load %class.AP_AHRS_View*, %class.AP_AHRS_View** %ahrs.addr, align 8
  store %class.AP_AHRS_View* %2, %class.AP_AHRS_View** %_ahrs, align 8
  %_pos_control = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 4
  %3 = load %class.AC_PosControl*, %class.AC_PosControl** %pos_control.addr, align 8
  store %class.AC_PosControl* %3, %class.AC_PosControl** %_pos_control, align 8
  %_attitude_control = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 5
  %4 = load %class.AC_AttitudeControl*, %class.AC_AttitudeControl** %attitude_control.addr, align 8
  store %class.AC_AttitudeControl* %4, %class.AC_AttitudeControl** %_attitude_control, align 8
  %_wp_speed_cms = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 6
  call void @_ZN9AP_ParamTIfL11ap_var_type4EEC2Ev(%class.AP_ParamT.0* nonnull align 4 dereferenceable(4) %_wp_speed_cms)
  %_wp_speed_up_cms = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 7
  call void @_ZN9AP_ParamTIfL11ap_var_type4EEC2Ev(%class.AP_ParamT.0* nonnull align 4 dereferenceable(4) %_wp_speed_up_cms)
  %_wp_speed_down_cms = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 8
  call void @_ZN9AP_ParamTIfL11ap_var_type4EEC2Ev(%class.AP_ParamT.0* nonnull align 4 dereferenceable(4) %_wp_speed_down_cms)
  %_wp_radius_cm = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 9
  call void @_ZN9AP_ParamTIfL11ap_var_type4EEC2Ev(%class.AP_ParamT.0* nonnull align 4 dereferenceable(4) %_wp_radius_cm)
  %_wp_accel_cmss = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 10
  call void @_ZN9AP_ParamTIfL11ap_var_type4EEC2Ev(%class.AP_ParamT.0* nonnull align 4 dereferenceable(4) %_wp_accel_cmss)
  %_wp_accel_c_cmss = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 11
  call void @_ZN9AP_ParamTIfL11ap_var_type4EEC2Ev(%class.AP_ParamT.0* nonnull align 4 dereferenceable(4) %_wp_accel_c_cmss)
  %_wp_accel_z_cmss = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 12
  call void @_ZN9AP_ParamTIfL11ap_var_type4EEC2Ev(%class.AP_ParamT.0* nonnull align 4 dereferenceable(4) %_wp_accel_z_cmss)
  %_wp_jerk = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 13
  call void @_ZN9AP_ParamTIfL11ap_var_type4EEC2Ev(%class.AP_ParamT.0* nonnull align 4 dereferenceable(4) %_wp_jerk)
  %_terrain_margin = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 14
  call void @_ZN9AP_ParamTIfL11ap_var_type4EEC2Ev(%class.AP_ParamT.0* nonnull align 4 dereferenceable(4) %_terrain_margin)
  %_scurve_prev_leg = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 19
  call void @_ZN6SCurveC1Ev(%class.SCurve* nonnull align 4 dereferenceable(604) %_scurve_prev_leg)
  %_scurve_this_leg = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 20
  call void @_ZN6SCurveC1Ev(%class.SCurve* nonnull align 4 dereferenceable(604) %_scurve_this_leg)
  %_scurve_next_leg = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 21
  call void @_ZN6SCurveC1Ev(%class.SCurve* nonnull align 4 dereferenceable(604) %_scurve_next_leg)
  %_spline_this_leg = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 24
  call void @_ZN11SplineCurveC2Ev(%class.SplineCurve* nonnull align 4 dereferenceable(130) %_spline_this_leg)
  %_spline_next_leg = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 25
  call void @_ZN11SplineCurveC2Ev(%class.SplineCurve* nonnull align 4 dereferenceable(130) %_spline_next_leg)
  %_origin = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 30
  call void @_ZN7Vector3IfEC2Ev(%class.Vector3* nonnull align 4 dereferenceable(12) %_origin)
  %_destination = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 31
  call void @_ZN7Vector3IfEC2Ev(%class.Vector3* nonnull align 4 dereferenceable(12) %_destination)
  %_next_destination = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 32
  call void @_ZN7Vector3IfEC2Ev(%class.Vector3* nonnull align 4 dereferenceable(12) %_next_destination)
  %_rangefinder_use = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 39
  call void @_ZN9AP_ParamTIaL11ap_var_type1EEC2Ev(%"struct.AC_WPNav::wpnav_flags"* nonnull align 1 dereferenceable(1) %_rangefinder_use)
  %5 = bitcast %class.AC_WPNav* %this1 to i8*
  call void @_ZN8AP_Param21setup_object_defaultsEPKvPKNS_9GroupInfoE(i8* %5, %"struct.AP_Param::GroupInfo"* getelementptr inbounds ([11 x %"struct.AP_Param::GroupInfo"], [11 x %"struct.AP_Param::GroupInfo"]* bitcast (<{ { i8*, i64, { float, [4 x i8] }, i16, i8, i8 }, { i8*, i64, { float, [4 x i8] }, i16, i8, i8 }, { i8*, i64, { float, [4 x i8] }, i16, i8, i8 }, { i8*, i64, { float, [4 x i8] }, i16, i8, i8 }, { i8*, i64, { float, [4 x i8] }, i16, i8, i8 }, { i8*, i64, { float, [4 x i8] }, i16, i8, i8 }, { i8*, i64, { float, [4 x i8] }, i16, i8, i8 }, { i8*, i64, { float, [4 x i8] }, i16, i8, i8 }, { i8*, i64, { float, [4 x i8] }, i16, i8, i8 }, { i8*, i64, { float, [4 x i8] }, i16, i8, i8 }, %"struct.AP_Param::GroupInfo" }>* @_ZN8AC_WPNav8var_infoE to [11 x %"struct.AP_Param::GroupInfo"]*), i64 0, i64 0))
  %_flags2 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 1
  %6 = bitcast %"struct.AC_WPNav::wpnav_flags"* %_flags2 to i8*
  %bf.load = load i8, i8* %6, align 8
  %bf.clear = and i8 %bf.load, -2
  store i8 %bf.clear, i8* %6, align 8
  %_flags3 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 1
  %7 = bitcast %"struct.AC_WPNav::wpnav_flags"* %_flags3 to i8*
  %bf.load4 = load i8, i8* %7, align 8
  %bf.clear5 = and i8 %bf.load4, -3
  store i8 %bf.clear5, i8* %7, align 8
  %_wp_speed_cms6 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 6
  %call = call nonnull align 4 dereferenceable(4) float* @_ZNK9AP_ParamTIfL11ap_var_type4EEcvRKfEv(%class.AP_ParamT.0* nonnull align 4 dereferenceable(4) %_wp_speed_cms6)
  %8 = load float, float* %call, align 4
  %_last_wp_speed_cms = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 16
  store float %8, float* %_last_wp_speed_cms, align 8
  %_wp_speed_up_cms7 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 7
  %call8 = call nonnull align 4 dereferenceable(4) float* @_ZNK9AP_ParamTIfL11ap_var_type4EEcvRKfEv(%class.AP_ParamT.0* nonnull align 4 dereferenceable(4) %_wp_speed_up_cms7)
  %9 = load float, float* %call8, align 4
  %_last_wp_speed_up_cms = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 17
  store float %9, float* %_last_wp_speed_up_cms, align 4
  %call9 = call float @_ZNK8AC_WPNav22get_default_speed_downEv(%class.AC_WPNav* nonnull align 8 dereferenceable(2256) %this1)
  %_last_wp_speed_down_cms = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 18
  store float %call9, float* %_last_wp_speed_down_cms, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define linkonce_odr dso_local void @_ZN9AP_ParamTIfL11ap_var_type4EEC2Ev(%class.AP_ParamT.0* nonnull align 4 dereferenceable(4) %this) unnamed_addr #3 comdat align 2 {
entry:
  %this.addr = alloca %class.AP_ParamT.0*, align 8
  store %class.AP_ParamT.0* %this, %class.AP_ParamT.0** %this.addr, align 8
  %this1 = load %class.AP_ParamT.0*, %class.AP_ParamT.0** %this.addr, align 8
  %0 = bitcast %class.AP_ParamT.0* %this1 to %"struct.AC_WPNav::wpnav_flags"*
  call void @_ZN8AP_ParamC2Ev(%"struct.AC_WPNav::wpnav_flags"* nonnull align 1 dereferenceable(1) %0)
  ret void
}

declare dso_local void @_ZN6SCurveC1Ev(%class.SCurve* nonnull align 4 dereferenceable(604)) unnamed_addr #2

; Function Attrs: noinline nounwind optnone uwtable
define linkonce_odr dso_local void @_ZN11SplineCurveC2Ev(%class.SplineCurve* nonnull align 4 dereferenceable(130) %this) unnamed_addr #3 comdat align 2 {
entry:
  %this.addr = alloca %class.SplineCurve*, align 8
  store %class.SplineCurve* %this, %class.SplineCurve** %this.addr, align 8
  %this1 = load %class.SplineCurve*, %class.SplineCurve** %this.addr, align 8
  %_origin = getelementptr inbounds %class.SplineCurve, %class.SplineCurve* %this1, i32 0, i32 0
  call void @_ZN7Vector3IfEC2Ev(%class.Vector3* nonnull align 4 dereferenceable(12) %_origin)
  %_destination = getelementptr inbounds %class.SplineCurve, %class.SplineCurve* %this1, i32 0, i32 1
  call void @_ZN7Vector3IfEC2Ev(%class.Vector3* nonnull align 4 dereferenceable(12) %_destination)
  %_origin_vel = getelementptr inbounds %class.SplineCurve, %class.SplineCurve* %this1, i32 0, i32 2
  call void @_ZN7Vector3IfEC2Ev(%class.Vector3* nonnull align 4 dereferenceable(12) %_origin_vel)
  %_destination_vel = getelementptr inbounds %class.SplineCurve, %class.SplineCurve* %this1, i32 0, i32 3
  call void @_ZN7Vector3IfEC2Ev(%class.Vector3* nonnull align 4 dereferenceable(12) %_destination_vel)
  %_hermite_solution = getelementptr inbounds %class.SplineCurve, %class.SplineCurve* %this1, i32 0, i32 4
  %array.begin = getelementptr inbounds [4 x %class.Vector3], [4 x %class.Vector3]* %_hermite_solution, i32 0, i32 0
  %arrayctor.end = getelementptr inbounds %class.Vector3, %class.Vector3* %array.begin, i64 4
  br label %arrayctor.loop

arrayctor.loop:                                   ; preds = %arrayctor.loop, %entry
  %arrayctor.cur = phi %class.Vector3* [ %array.begin, %entry ], [ %arrayctor.next, %arrayctor.loop ]
  call void @_ZN7Vector3IfEC2Ev(%class.Vector3* nonnull align 4 dereferenceable(12) %arrayctor.cur)
  %arrayctor.next = getelementptr inbounds %class.Vector3, %class.Vector3* %arrayctor.cur, i64 1
  %arrayctor.done = icmp eq %class.Vector3* %arrayctor.next, %arrayctor.end
  br i1 %arrayctor.done, label %arrayctor.cont, label %arrayctor.loop

arrayctor.cont:                                   ; preds = %arrayctor.loop
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define linkonce_odr dso_local void @_ZN9AP_ParamTIaL11ap_var_type1EEC2Ev(%"struct.AC_WPNav::wpnav_flags"* nonnull align 1 dereferenceable(1) %this) unnamed_addr #3 comdat align 2 {
entry:
  %this.addr = alloca %"struct.AC_WPNav::wpnav_flags"*, align 8
  store %"struct.AC_WPNav::wpnav_flags"* %this, %"struct.AC_WPNav::wpnav_flags"** %this.addr, align 8
  %this1 = load %"struct.AC_WPNav::wpnav_flags"*, %"struct.AC_WPNav::wpnav_flags"** %this.addr, align 8
  %0 = bitcast %"struct.AC_WPNav::wpnav_flags"* %this1 to %"struct.AC_WPNav::wpnav_flags"*
  call void @_ZN8AP_ParamC2Ev(%"struct.AC_WPNav::wpnav_flags"* nonnull align 1 dereferenceable(1) %0)
  ret void
}

declare dso_local void @_ZN8AP_Param21setup_object_defaultsEPKvPKNS_9GroupInfoE(i8*, %"struct.AP_Param::GroupInfo"*) #2

; Function Attrs: noinline nounwind optnone uwtable
define linkonce_odr dso_local void @_ZN8AP_ParamC2Ev(%"struct.AC_WPNav::wpnav_flags"* nonnull align 1 dereferenceable(1) %this) unnamed_addr #3 comdat align 2 {
entry:
  %this.addr = alloca %"struct.AC_WPNav::wpnav_flags"*, align 8
  store %"struct.AC_WPNav::wpnav_flags"* %this, %"struct.AC_WPNav::wpnav_flags"** %this.addr, align 8
  %this1 = load %"struct.AC_WPNav::wpnav_flags"*, %"struct.AC_WPNav::wpnav_flags"** %this.addr, align 8
  ret void
}

; Function Attrs: mustprogress noinline nounwind optnone uwtable
define dso_local zeroext i1 @_ZN8AC_WPNav22set_wp_destination_locERK8Location(%class.AC_WPNav* nonnull align 8 dereferenceable(2256) %this, %class.Location* nonnull align 4 dereferenceable(16) %destination) #0 align 2 {
entry:
  %retval = alloca i1, align 1
  %this.addr = alloca %class.AC_WPNav*, align 8
  %destination.addr = alloca %class.Location*, align 8
  %terr_alt = alloca i8, align 1
  %dest_neu = alloca %class.Vector3, align 4
  store %class.AC_WPNav* %this, %class.AC_WPNav** %this.addr, align 8
  store %class.Location* %destination, %class.Location** %destination.addr, align 8
  %this1 = load %class.AC_WPNav*, %class.AC_WPNav** %this.addr, align 8
  call void @_ZN7Vector3IfEC2Ev(%class.Vector3* nonnull align 4 dereferenceable(12) %dest_neu)
  %0 = load %class.Location*, %class.Location** %destination.addr, align 8
  %call = call zeroext i1 @_ZN8AC_WPNav14get_vector_NEUERK8LocationR7Vector3IfERb(%class.AC_WPNav* nonnull align 8 dereferenceable(2256) %this1, %class.Location* nonnull align 4 dereferenceable(16) %0, %class.Vector3* nonnull align 4 dereferenceable(12) %dest_neu, i8* nonnull align 1 dereferenceable(1) %terr_alt)
  br i1 %call, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i1 false, i1* %retval, align 1
  br label %return

if.end:                                           ; preds = %entry
  %1 = load i8, i8* %terr_alt, align 1
  %tobool = trunc i8 %1 to i1
  %2 = bitcast %class.AC_WPNav* %this1 to i1 (%class.AC_WPNav*, %class.Vector3*, i1)***
  %vtable = load i1 (%class.AC_WPNav*, %class.Vector3*, i1)**, i1 (%class.AC_WPNav*, %class.Vector3*, i1)*** %2, align 8
  %vfn = getelementptr inbounds i1 (%class.AC_WPNav*, %class.Vector3*, i1)*, i1 (%class.AC_WPNav*, %class.Vector3*, i1)** %vtable, i64 1
  %3 = load i1 (%class.AC_WPNav*, %class.Vector3*, i1)*, i1 (%class.AC_WPNav*, %class.Vector3*, i1)** %vfn, align 8
  %call2 = call zeroext i1 %3(%class.AC_WPNav* nonnull align 8 dereferenceable(2256) %this1, %class.Vector3* nonnull align 4 dereferenceable(12) %dest_neu, i1 zeroext %tobool)
  store i1 %call2, i1* %retval, align 1
  br label %return

return:                                           ; preds = %if.end, %if.then
  %4 = load i1, i1* %retval, align 1
  ret i1 %4
}

; Function Attrs: mustprogress noinline nounwind optnone uwtable
define dso_local zeroext i1 @_ZN8AC_WPNav14get_vector_NEUERK8LocationR7Vector3IfERb(%class.AC_WPNav* nonnull align 8 dereferenceable(2256) %this, %class.Location* nonnull align 4 dereferenceable(16) %loc, %class.Vector3* nonnull align 4 dereferenceable(12) %vec, i8* nonnull align 1 dereferenceable(1) %terrain_alt) #0 align 2 {
entry:
  %retval = alloca i1, align 1
  %this.addr = alloca %class.AC_WPNav*, align 8
  %loc.addr = alloca %class.Location*, align 8
  %vec.addr = alloca %class.Vector3*, align 8
  %terrain_alt.addr = alloca i8*, align 8
  %res_vec = alloca %struct.Vector2, align 4
  %terr_alt = alloca i32, align 4
  %temp_alt = alloca i32, align 4
  store %class.AC_WPNav* %this, %class.AC_WPNav** %this.addr, align 8
  store %class.Location* %loc, %class.Location** %loc.addr, align 8
  store %class.Vector3* %vec, %class.Vector3** %vec.addr, align 8
  store i8* %terrain_alt, i8** %terrain_alt.addr, align 8
  %this1 = load %class.AC_WPNav*, %class.AC_WPNav** %this.addr, align 8
  call void @_ZN7Vector2IfEC2Ev(%struct.Vector2* nonnull align 4 dereferenceable(8) %res_vec)
  %0 = load %class.Location*, %class.Location** %loc.addr, align 8
  %call = call zeroext i1 @_ZNK8Location28get_vector_xy_from_origin_NEER7Vector2IfE(%class.Location* nonnull align 4 dereferenceable(16) %0, %struct.Vector2* nonnull align 4 dereferenceable(8) %res_vec)
  br i1 %call, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i1 false, i1* %retval, align 1
  br label %return

if.end:                                           ; preds = %entry
  %1 = load %class.Location*, %class.Location** %loc.addr, align 8
  %call2 = call i32 @_ZNK8Location13get_alt_frameEv(%class.Location* nonnull align 4 dereferenceable(16) %1)
  %cmp = icmp eq i32 %call2, 3
  br i1 %cmp, label %if.then3, label %if.else

if.then3:                                         ; preds = %if.end
  %2 = load %class.Location*, %class.Location** %loc.addr, align 8
  %call4 = call zeroext i1 @_ZNK8Location10get_alt_cmENS_8AltFrameERi(%class.Location* nonnull align 4 dereferenceable(16) %2, i32 3, i32* nonnull align 4 dereferenceable(4) %terr_alt)
  br i1 %call4, label %if.end6, label %if.then5

if.then5:                                         ; preds = %if.then3
  store i1 false, i1* %retval, align 1
  br label %return

if.end6:                                          ; preds = %if.then3
  %3 = load i32, i32* %terr_alt, align 4
  %conv = sitofp i32 %3 to float
  %4 = load %class.Vector3*, %class.Vector3** %vec.addr, align 8
  %z = getelementptr inbounds %class.Vector3, %class.Vector3* %4, i32 0, i32 2
  store float %conv, float* %z, align 4
  %5 = load i8*, i8** %terrain_alt.addr, align 8
  store i8 1, i8* %5, align 1
  br label %if.end12

if.else:                                          ; preds = %if.end
  %6 = load i8*, i8** %terrain_alt.addr, align 8
  store i8 0, i8* %6, align 1
  %7 = load %class.Location*, %class.Location** %loc.addr, align 8
  %call7 = call zeroext i1 @_ZNK8Location10get_alt_cmENS_8AltFrameERi(%class.Location* nonnull align 4 dereferenceable(16) %7, i32 2, i32* nonnull align 4 dereferenceable(4) %temp_alt)
  br i1 %call7, label %if.end9, label %if.then8

if.then8:                                         ; preds = %if.else
  store i1 false, i1* %retval, align 1
  br label %return

if.end9:                                          ; preds = %if.else
  %8 = load i32, i32* %temp_alt, align 4
  %conv10 = sitofp i32 %8 to float
  %9 = load %class.Vector3*, %class.Vector3** %vec.addr, align 8
  %z11 = getelementptr inbounds %class.Vector3, %class.Vector3* %9, i32 0, i32 2
  store float %conv10, float* %z11, align 4
  %10 = load i8*, i8** %terrain_alt.addr, align 8
  store i8 0, i8* %10, align 1
  br label %if.end12

if.end12:                                         ; preds = %if.end9, %if.end6
  %x = getelementptr inbounds %struct.Vector2, %struct.Vector2* %res_vec, i32 0, i32 0
  %11 = load float, float* %x, align 4
  %12 = load %class.Vector3*, %class.Vector3** %vec.addr, align 8
  %x13 = getelementptr inbounds %class.Vector3, %class.Vector3* %12, i32 0, i32 0
  store float %11, float* %x13, align 4
  %y = getelementptr inbounds %struct.Vector2, %struct.Vector2* %res_vec, i32 0, i32 1
  %13 = load float, float* %y, align 4
  %14 = load %class.Vector3*, %class.Vector3** %vec.addr, align 8
  %y14 = getelementptr inbounds %class.Vector3, %class.Vector3* %14, i32 0, i32 1
  store float %13, float* %y14, align 4
  store i1 true, i1* %retval, align 1
  br label %return

return:                                           ; preds = %if.end12, %if.then8, %if.then5, %if.then
  %15 = load i1, i1* %retval, align 1
  ret i1 %15
}

; Function Attrs: noinline nounwind optnone uwtable
define linkonce_odr dso_local void @_ZN7Vector2IfEC2Ev(%struct.Vector2* nonnull align 4 dereferenceable(8) %this) unnamed_addr #3 comdat align 2 {
entry:
  %this.addr = alloca %struct.Vector2*, align 8
  store %struct.Vector2* %this, %struct.Vector2** %this.addr, align 8
  %this1 = load %struct.Vector2*, %struct.Vector2** %this.addr, align 8
  %x = getelementptr inbounds %struct.Vector2, %struct.Vector2* %this1, i32 0, i32 0
  store float 0.000000e+00, float* %x, align 4
  %y = getelementptr inbounds %struct.Vector2, %struct.Vector2* %this1, i32 0, i32 1
  store float 0.000000e+00, float* %y, align 4
  ret void
}

declare dso_local zeroext i1 @_ZNK8Location28get_vector_xy_from_origin_NEER7Vector2IfE(%class.Location* nonnull align 4 dereferenceable(16), %struct.Vector2* nonnull align 4 dereferenceable(8)) #2

declare dso_local i32 @_ZNK8Location13get_alt_frameEv(%class.Location* nonnull align 4 dereferenceable(16)) #2

declare dso_local zeroext i1 @_ZNK8Location10get_alt_cmENS_8AltFrameERi(%class.Location* nonnull align 4 dereferenceable(16), i32, i32* nonnull align 4 dereferenceable(4)) #2

; Function Attrs: mustprogress noinline nounwind optnone uwtable
define dso_local zeroext i1 @_ZN8AC_WPNav27set_wp_destination_next_locERK8Location(%class.AC_WPNav* nonnull align 8 dereferenceable(2256) %this, %class.Location* nonnull align 4 dereferenceable(16) %destination) #0 align 2 {
entry:
  %retval = alloca i1, align 1
  %this.addr = alloca %class.AC_WPNav*, align 8
  %destination.addr = alloca %class.Location*, align 8
  %terr_alt = alloca i8, align 1
  %dest_neu = alloca %class.Vector3, align 4
  store %class.AC_WPNav* %this, %class.AC_WPNav** %this.addr, align 8
  store %class.Location* %destination, %class.Location** %destination.addr, align 8
  %this1 = load %class.AC_WPNav*, %class.AC_WPNav** %this.addr, align 8
  call void @_ZN7Vector3IfEC2Ev(%class.Vector3* nonnull align 4 dereferenceable(12) %dest_neu)
  %0 = load %class.Location*, %class.Location** %destination.addr, align 8
  %call = call zeroext i1 @_ZN8AC_WPNav14get_vector_NEUERK8LocationR7Vector3IfERb(%class.AC_WPNav* nonnull align 8 dereferenceable(2256) %this1, %class.Location* nonnull align 4 dereferenceable(16) %0, %class.Vector3* nonnull align 4 dereferenceable(12) %dest_neu, i8* nonnull align 1 dereferenceable(1) %terr_alt)
  br i1 %call, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i1 false, i1* %retval, align 1
  br label %return

if.end:                                           ; preds = %entry
  %1 = load i8, i8* %terr_alt, align 1
  %tobool = trunc i8 %1 to i1
  %call2 = call zeroext i1 @_ZN8AC_WPNav23set_wp_destination_nextERK7Vector3IfEb(%class.AC_WPNav* nonnull align 8 dereferenceable(2256) %this1, %class.Vector3* nonnull align 4 dereferenceable(12) %dest_neu, i1 zeroext %tobool)
  store i1 %call2, i1* %retval, align 1
  br label %return

return:                                           ; preds = %if.end, %if.then
  %2 = load i1, i1* %retval, align 1
  ret i1 %2
}

; Function Attrs: mustprogress noinline nounwind optnone uwtable
define dso_local zeroext i1 @_ZN8AC_WPNav23set_wp_destination_nextERK7Vector3IfEb(%class.AC_WPNav* nonnull align 8 dereferenceable(2256) %this, %class.Vector3* nonnull align 4 dereferenceable(12) %destination, i1 zeroext %terrain_alt) #0 align 2 {
entry:
  %retval = alloca i1, align 1
  %this.addr = alloca %class.AC_WPNav*, align 8
  %destination.addr = alloca %class.Vector3*, align 8
  %terrain_alt.addr = alloca i8, align 1
  %this_leg_dest_speed_max = alloca float, align 4
  %next_leg_origin_speed_max = alloca float, align 4
  store %class.AC_WPNav* %this, %class.AC_WPNav** %this.addr, align 8
  store %class.Vector3* %destination, %class.Vector3** %destination.addr, align 8
  %frombool = zext i1 %terrain_alt to i8
  store i8 %frombool, i8* %terrain_alt.addr, align 1
  %this1 = load %class.AC_WPNav*, %class.AC_WPNav** %this.addr, align 8
  %0 = load i8, i8* %terrain_alt.addr, align 1
  %tobool = trunc i8 %0 to i1
  %conv = zext i1 %tobool to i32
  %_terrain_alt = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 37
  %1 = load i8, i8* %_terrain_alt, align 1
  %tobool2 = trunc i8 %1 to i1
  %conv3 = zext i1 %tobool2 to i32
  %cmp = icmp ne i32 %conv, %conv3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i1 true, i1* %retval, align 1
  br label %return

if.end:                                           ; preds = %entry
  %_scurve_next_leg = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 21
  %_destination = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 31
  %2 = load %class.Vector3*, %class.Vector3** %destination.addr, align 8
  %_pos_control = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 4
  %3 = load %class.AC_PosControl*, %class.AC_PosControl** %_pos_control, align 8
  %call = call float @_ZNK13AC_PosControl20get_max_speed_xy_cmsEv(%class.AC_PosControl* nonnull align 8 dereferenceable(1056) %3)
  %_pos_control4 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 4
  %4 = load %class.AC_PosControl*, %class.AC_PosControl** %_pos_control4, align 8
  %call5 = call float @_ZNK13AC_PosControl20get_max_speed_up_cmsEv(%class.AC_PosControl* nonnull align 8 dereferenceable(1056) %4)
  %_pos_control6 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 4
  %5 = load %class.AC_PosControl*, %class.AC_PosControl** %_pos_control6, align 8
  %call7 = call float @_ZNK13AC_PosControl22get_max_speed_down_cmsEv(%class.AC_PosControl* nonnull align 8 dereferenceable(1056) %5)
  %call8 = call float @_ZNK8AC_WPNav19get_wp_accelerationEv(%class.AC_WPNav* nonnull align 8 dereferenceable(2256) %this1)
  %_wp_accel_z_cmss = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 12
  %call9 = call nonnull align 4 dereferenceable(4) float* @_ZNK9AP_ParamTIfL11ap_var_type4EEcvRKfEv(%class.AP_ParamT.0* nonnull align 4 dereferenceable(4) %_wp_accel_z_cmss)
  %6 = load float, float* %call9, align 4
  %_scurve_snap = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 23
  %7 = load float, float* %_scurve_snap, align 4
  %mul = fmul float %7, 1.000000e+02
  %_scurve_jerk = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 22
  %8 = load float, float* %_scurve_jerk, align 8
  %mul10 = fmul float %8, 1.000000e+02
  call void @_ZN6SCurve15calculate_trackERK7Vector3IfES3_fffffff(%class.SCurve* nonnull align 4 dereferenceable(604) %_scurve_next_leg, %class.Vector3* nonnull align 4 dereferenceable(12) %_destination, %class.Vector3* nonnull align 4 dereferenceable(12) %2, float %call, float %call5, float %call7, float %call8, float %6, float %mul, float %mul10)
  %_this_leg_is_spline = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 26
  %9 = load i8, i8* %_this_leg_is_spline, align 8
  %tobool11 = trunc i8 %9 to i1
  br i1 %tobool11, label %if.then12, label %if.end17

if.then12:                                        ; preds = %if.end
  %_spline_this_leg = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 24
  %call13 = call float @_ZNK11SplineCurve25get_destination_speed_maxEv(%class.SplineCurve* nonnull align 4 dereferenceable(130) %_spline_this_leg)
  store float %call13, float* %this_leg_dest_speed_max, align 4
  %_scurve_next_leg14 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 21
  %10 = load float, float* %this_leg_dest_speed_max, align 4
  %call15 = call float @_ZN6SCurve20set_origin_speed_maxEf(%class.SCurve* nonnull align 4 dereferenceable(604) %_scurve_next_leg14, float %10)
  store float %call15, float* %next_leg_origin_speed_max, align 4
  %_spline_this_leg16 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 24
  %11 = load float, float* %next_leg_origin_speed_max, align 4
  call void @_ZN11SplineCurve25set_destination_speed_maxEf(%class.SplineCurve* nonnull align 4 dereferenceable(130) %_spline_this_leg16, float %11)
  br label %if.end17

if.end17:                                         ; preds = %if.then12, %if.end
  %_next_leg_is_spline = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 27
  store i8 0, i8* %_next_leg_is_spline, align 1
  %_flags = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 1
  %12 = bitcast %"struct.AC_WPNav::wpnav_flags"* %_flags to i8*
  %bf.load = load i8, i8* %12, align 8
  %bf.clear = and i8 %bf.load, -3
  %bf.set = or i8 %bf.clear, 2
  store i8 %bf.set, i8* %12, align 8
  %13 = load %class.Vector3*, %class.Vector3** %destination.addr, align 8
  %_next_destination = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 32
  %14 = bitcast %class.Vector3* %_next_destination to i8*
  %15 = bitcast %class.Vector3* %13 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %14, i8* align 4 %15, i64 12, i1 false)
  store i1 true, i1* %retval, align 1
  br label %return

return:                                           ; preds = %if.end17, %if.then
  %16 = load i1, i1* %retval, align 1
  ret i1 %16
}

; Function Attrs: mustprogress noinline nounwind optnone uwtable
define linkonce_odr dso_local float @_ZNK11SplineCurve25get_destination_speed_maxEv(%class.SplineCurve* nonnull align 4 dereferenceable(130) %this) #0 comdat align 2 {
entry:
  %this.addr = alloca %class.SplineCurve*, align 8
  store %class.SplineCurve* %this, %class.SplineCurve** %this.addr, align 8
  %this1 = load %class.SplineCurve*, %class.SplineCurve** %this.addr, align 8
  %_destination_speed_max = getelementptr inbounds %class.SplineCurve, %class.SplineCurve* %this1, i32 0, i32 12
  %0 = load float, float* %_destination_speed_max, align 4
  ret float %0
}

; Function Attrs: mustprogress noinline nounwind optnone uwtable
define linkonce_odr dso_local void @_ZN11SplineCurve25set_destination_speed_maxEf(%class.SplineCurve* nonnull align 4 dereferenceable(130) %this, float %destination_speed_max) #0 comdat align 2 {
entry:
  %this.addr = alloca %class.SplineCurve*, align 8
  %destination_speed_max.addr = alloca float, align 4
  store %class.SplineCurve* %this, %class.SplineCurve** %this.addr, align 8
  store float %destination_speed_max, float* %destination_speed_max.addr, align 4
  %this1 = load %class.SplineCurve*, %class.SplineCurve** %this.addr, align 8
  %_destination_speed_max = getelementptr inbounds %class.SplineCurve, %class.SplineCurve* %this1, i32 0, i32 12
  %call = call nonnull align 4 dereferenceable(4) float* @_ZL3MINIffEDTqultfp_fp0_fp_fp0_ERKT_RKT0_(float* nonnull align 4 dereferenceable(4) %_destination_speed_max, float* nonnull align 4 dereferenceable(4) %destination_speed_max.addr)
  %0 = load float, float* %call, align 4
  %_destination_speed_max2 = getelementptr inbounds %class.SplineCurve, %class.SplineCurve* %this1, i32 0, i32 12
  store float %0, float* %_destination_speed_max2, align 4
  ret void
}

; Function Attrs: mustprogress noinline nounwind optnone uwtable
define dso_local zeroext i1 @_ZN8AC_WPNav22set_wp_destination_NEDERK7Vector3IfE(%class.AC_WPNav* nonnull align 8 dereferenceable(2256) %this, %class.Vector3* nonnull align 4 dereferenceable(12) %destination_NED) #0 align 2 {
entry:
  %this.addr = alloca %class.AC_WPNav*, align 8
  %destination_NED.addr = alloca %class.Vector3*, align 8
  %ref.tmp = alloca %class.Vector3, align 4
  store %class.AC_WPNav* %this, %class.AC_WPNav** %this.addr, align 8
  store %class.Vector3* %destination_NED, %class.Vector3** %destination_NED.addr, align 8
  %this1 = load %class.AC_WPNav*, %class.AC_WPNav** %this.addr, align 8
  %0 = load %class.Vector3*, %class.Vector3** %destination_NED.addr, align 8
  %x = getelementptr inbounds %class.Vector3, %class.Vector3* %0, i32 0, i32 0
  %1 = load float, float* %x, align 4
  %mul = fmul float %1, 1.000000e+02
  %2 = load %class.Vector3*, %class.Vector3** %destination_NED.addr, align 8
  %y = getelementptr inbounds %class.Vector3, %class.Vector3* %2, i32 0, i32 1
  %3 = load float, float* %y, align 4
  %mul2 = fmul float %3, 1.000000e+02
  %4 = load %class.Vector3*, %class.Vector3** %destination_NED.addr, align 8
  %z = getelementptr inbounds %class.Vector3, %class.Vector3* %4, i32 0, i32 2
  %5 = load float, float* %z, align 4
  %fneg = fneg float %5
  %mul3 = fmul float %fneg, 1.000000e+02
  call void @_ZN7Vector3IfEC2Efff(%class.Vector3* nonnull align 4 dereferenceable(12) %ref.tmp, float %mul, float %mul2, float %mul3)
  %6 = bitcast %class.AC_WPNav* %this1 to i1 (%class.AC_WPNav*, %class.Vector3*, i1)***
  %vtable = load i1 (%class.AC_WPNav*, %class.Vector3*, i1)**, i1 (%class.AC_WPNav*, %class.Vector3*, i1)*** %6, align 8
  %vfn = getelementptr inbounds i1 (%class.AC_WPNav*, %class.Vector3*, i1)*, i1 (%class.AC_WPNav*, %class.Vector3*, i1)** %vtable, i64 1
  %7 = load i1 (%class.AC_WPNav*, %class.Vector3*, i1)*, i1 (%class.AC_WPNav*, %class.Vector3*, i1)** %vfn, align 8
  %call = call zeroext i1 %7(%class.AC_WPNav* nonnull align 8 dereferenceable(2256) %this1, %class.Vector3* nonnull align 4 dereferenceable(12) %ref.tmp, i1 zeroext false)
  ret i1 %call
}

; Function Attrs: mustprogress noinline nounwind optnone uwtable
define dso_local zeroext i1 @_ZN8AC_WPNav27set_wp_destination_next_NEDERK7Vector3IfE(%class.AC_WPNav* nonnull align 8 dereferenceable(2256) %this, %class.Vector3* nonnull align 4 dereferenceable(12) %destination_NED) #0 align 2 {
entry:
  %this.addr = alloca %class.AC_WPNav*, align 8
  %destination_NED.addr = alloca %class.Vector3*, align 8
  %ref.tmp = alloca %class.Vector3, align 4
  store %class.AC_WPNav* %this, %class.AC_WPNav** %this.addr, align 8
  store %class.Vector3* %destination_NED, %class.Vector3** %destination_NED.addr, align 8
  %this1 = load %class.AC_WPNav*, %class.AC_WPNav** %this.addr, align 8
  %0 = load %class.Vector3*, %class.Vector3** %destination_NED.addr, align 8
  %x = getelementptr inbounds %class.Vector3, %class.Vector3* %0, i32 0, i32 0
  %1 = load float, float* %x, align 4
  %mul = fmul float %1, 1.000000e+02
  %2 = load %class.Vector3*, %class.Vector3** %destination_NED.addr, align 8
  %y = getelementptr inbounds %class.Vector3, %class.Vector3* %2, i32 0, i32 1
  %3 = load float, float* %y, align 4
  %mul2 = fmul float %3, 1.000000e+02
  %4 = load %class.Vector3*, %class.Vector3** %destination_NED.addr, align 8
  %z = getelementptr inbounds %class.Vector3, %class.Vector3* %4, i32 0, i32 2
  %5 = load float, float* %z, align 4
  %fneg = fneg float %5
  %mul3 = fmul float %fneg, 1.000000e+02
  call void @_ZN7Vector3IfEC2Efff(%class.Vector3* nonnull align 4 dereferenceable(12) %ref.tmp, float %mul, float %mul2, float %mul3)
  %call = call zeroext i1 @_ZN8AC_WPNav23set_wp_destination_nextERK7Vector3IfEb(%class.AC_WPNav* nonnull align 8 dereferenceable(2256) %this1, %class.Vector3* nonnull align 4 dereferenceable(12) %ref.tmp, i1 zeroext false)
  ret i1 %call
}

; Function Attrs: mustprogress noinline nounwind optnone uwtable
define dso_local void @_ZN8AC_WPNav49shift_wp_origin_and_destination_to_current_pos_xyEv(%class.AC_WPNav* nonnull align 8 dereferenceable(2256) %this) #0 align 2 {
entry:
  %this.addr = alloca %class.AC_WPNav*, align 8
  %curr_pos = alloca %struct.Vector2*, align 8
  store %class.AC_WPNav* %this, %class.AC_WPNav** %this.addr, align 8
  %this1 = load %class.AC_WPNav*, %class.AC_WPNav** %this.addr, align 8
  %_pos_control = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 4
  %0 = load %class.AC_PosControl*, %class.AC_PosControl** %_pos_control, align 8
  call void @_ZN13AC_PosControl18init_xy_controllerEv(%class.AC_PosControl* nonnull align 8 dereferenceable(1056) %0)
  %_inav = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 2
  %1 = load %class.AP_InertialNav*, %class.AP_InertialNav** %_inav, align 8
  %call = call nonnull align 4 dereferenceable(8) %struct.Vector2* @_ZNK14AP_InertialNav18get_position_xy_cmEv(%class.AP_InertialNav* nonnull align 8 dereferenceable(32) %1)
  store %struct.Vector2* %call, %struct.Vector2** %curr_pos, align 8
  %2 = load %struct.Vector2*, %struct.Vector2** %curr_pos, align 8
  %_origin = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 30
  %call2 = call nonnull align 4 dereferenceable(8) %struct.Vector2* @_ZN7Vector3IfE2xyEv(%class.Vector3* nonnull align 4 dereferenceable(12) %_origin)
  %3 = bitcast %struct.Vector2* %call2 to i8*
  %4 = bitcast %struct.Vector2* %2 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %3, i8* align 4 %4, i64 8, i1 false)
  %5 = load %struct.Vector2*, %struct.Vector2** %curr_pos, align 8
  %_destination = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 31
  %call3 = call nonnull align 4 dereferenceable(8) %struct.Vector2* @_ZN7Vector3IfE2xyEv(%class.Vector3* nonnull align 4 dereferenceable(12) %_destination)
  %6 = bitcast %struct.Vector2* %call3 to i8*
  %7 = bitcast %struct.Vector2* %5 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %6, i8* align 4 %7, i64 8, i1 false)
  ret void
}

declare dso_local void @_ZN13AC_PosControl18init_xy_controllerEv(%class.AC_PosControl* nonnull align 8 dereferenceable(1056)) #2

; Function Attrs: mustprogress noinline nounwind optnone uwtable
define linkonce_odr dso_local nonnull align 4 dereferenceable(8) %struct.Vector2* @_ZN7Vector3IfE2xyEv(%class.Vector3* nonnull align 4 dereferenceable(12) %this) #0 comdat align 2 {
entry:
  %this.addr = alloca %class.Vector3*, align 8
  store %class.Vector3* %this, %class.Vector3** %this.addr, align 8
  %this1 = load %class.Vector3*, %class.Vector3** %this.addr, align 8
  %0 = bitcast %class.Vector3* %this1 to %struct.Vector2*
  ret %struct.Vector2* %0
}

; Function Attrs: mustprogress noinline nounwind optnone uwtable
define dso_local void @_ZN8AC_WPNav52shift_wp_origin_and_destination_to_stopping_point_xyEv(%class.AC_WPNav* nonnull align 8 dereferenceable(2256) %this) #0 align 2 {
entry:
  %this.addr = alloca %class.AC_WPNav*, align 8
  %stopping_point = alloca %struct.Vector2, align 4
  store %class.AC_WPNav* %this, %class.AC_WPNav** %this.addr, align 8
  %this1 = load %class.AC_WPNav*, %class.AC_WPNav** %this.addr, align 8
  %_pos_control = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 4
  %0 = load %class.AC_PosControl*, %class.AC_PosControl** %_pos_control, align 8
  call void @_ZN13AC_PosControl28relax_velocity_controller_xyEv(%class.AC_PosControl* nonnull align 8 dereferenceable(1056) %0)
  call void @_ZN7Vector2IfEC2Ev(%struct.Vector2* nonnull align 4 dereferenceable(8) %stopping_point)
  call void @_ZNK8AC_WPNav24get_wp_stopping_point_xyER7Vector2IfE(%class.AC_WPNav* nonnull align 8 dereferenceable(2256) %this1, %struct.Vector2* nonnull align 4 dereferenceable(8) %stopping_point)
  %_origin = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 30
  %call = call nonnull align 4 dereferenceable(8) %struct.Vector2* @_ZN7Vector3IfE2xyEv(%class.Vector3* nonnull align 4 dereferenceable(12) %_origin)
  %1 = bitcast %struct.Vector2* %call to i8*
  %2 = bitcast %struct.Vector2* %stopping_point to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %1, i8* align 4 %2, i64 8, i1 false)
  %_destination = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 31
  %call2 = call nonnull align 4 dereferenceable(8) %struct.Vector2* @_ZN7Vector3IfE2xyEv(%class.Vector3* nonnull align 4 dereferenceable(12) %_destination)
  %3 = bitcast %struct.Vector2* %call2 to i8*
  %4 = bitcast %struct.Vector2* %stopping_point to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %3, i8* align 4 %4, i64 8, i1 false)
  %_pos_control3 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 4
  %5 = load %class.AC_PosControl*, %class.AC_PosControl** %_pos_control3, align 8
  %x = getelementptr inbounds %struct.Vector2, %struct.Vector2* %stopping_point, i32 0, i32 0
  %6 = load float, float* %x, align 4
  %y = getelementptr inbounds %struct.Vector2, %struct.Vector2* %stopping_point, i32 0, i32 1
  %7 = load float, float* %y, align 4
  call void @_ZN13AC_PosControl20set_pos_target_xy_cmEff(%class.AC_PosControl* nonnull align 8 dereferenceable(1056) %5, float %6, float %7)
  ret void
}

declare dso_local void @_ZN13AC_PosControl28relax_velocity_controller_xyEv(%class.AC_PosControl* nonnull align 8 dereferenceable(1056)) #2

; Function Attrs: mustprogress noinline nounwind optnone uwtable
define dso_local void @_ZNK8AC_WPNav24get_wp_stopping_point_xyER7Vector2IfE(%class.AC_WPNav* nonnull align 8 dereferenceable(2256) %this, %struct.Vector2* nonnull align 4 dereferenceable(8) %stopping_point) #1 align 2 {
entry:
  %this.addr = alloca %class.AC_WPNav*, align 8
  %stopping_point.addr = alloca %struct.Vector2*, align 8
  %stop = alloca %struct.Vector2.36, align 8
  %ref.tmp = alloca %struct.Vector2, align 4
  store %class.AC_WPNav* %this, %class.AC_WPNav** %this.addr, align 8
  store %struct.Vector2* %stopping_point, %struct.Vector2** %stopping_point.addr, align 8
  %this1 = load %class.AC_WPNav*, %class.AC_WPNav** %this.addr, align 8
  call void @_ZN7Vector2IdEC2Ev(%struct.Vector2.36* nonnull align 8 dereferenceable(16) %stop)
  %_pos_control = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 4
  %0 = load %class.AC_PosControl*, %class.AC_PosControl** %_pos_control, align 8
  call void @_ZNK13AC_PosControl24get_stopping_point_xy_cmER7Vector2IdE(%class.AC_PosControl* nonnull align 8 dereferenceable(1056) %0, %struct.Vector2.36* nonnull align 8 dereferenceable(16) %stop)
  %call = call <2 x float> @_ZNK7Vector2IdE7tofloatEv(%struct.Vector2.36* nonnull align 8 dereferenceable(16) %stop)
  %1 = bitcast %struct.Vector2* %ref.tmp to <2 x float>*
  store <2 x float> %call, <2 x float>* %1, align 4
  %2 = load %struct.Vector2*, %struct.Vector2** %stopping_point.addr, align 8
  %3 = bitcast %struct.Vector2* %2 to i8*
  %4 = bitcast %struct.Vector2* %ref.tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %3, i8* align 4 %4, i64 8, i1 false)
  ret void
}

; Function Attrs: mustprogress noinline nounwind optnone uwtable
define linkonce_odr dso_local void @_ZN13AC_PosControl20set_pos_target_xy_cmEff(%class.AC_PosControl* nonnull align 8 dereferenceable(1056) %this, float %pos_x, float %pos_y) #0 comdat align 2 {
entry:
  %this.addr = alloca %class.AC_PosControl*, align 8
  %pos_x.addr = alloca float, align 4
  %pos_y.addr = alloca float, align 4
  store %class.AC_PosControl* %this, %class.AC_PosControl** %this.addr, align 8
  store float %pos_x, float* %pos_x.addr, align 4
  store float %pos_y, float* %pos_y.addr, align 4
  %this1 = load %class.AC_PosControl*, %class.AC_PosControl** %this.addr, align 8
  %0 = load float, float* %pos_x.addr, align 4
  %conv = fpext float %0 to double
  %_pos_target = getelementptr inbounds %class.AC_PosControl, %class.AC_PosControl* %this1, i32 0, i32 29
  %x = getelementptr inbounds %class.Vector3.25, %class.Vector3.25* %_pos_target, i32 0, i32 0
  store double %conv, double* %x, align 8
  %1 = load float, float* %pos_y.addr, align 4
  %conv2 = fpext float %1 to double
  %_pos_target3 = getelementptr inbounds %class.AC_PosControl, %class.AC_PosControl* %this1, i32 0, i32 29
  %y = getelementptr inbounds %class.Vector3.25, %class.Vector3.25* %_pos_target3, i32 0, i32 1
  store double %conv2, double* %y, align 8
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define linkonce_odr dso_local void @_ZN7Vector2IdEC2Ev(%struct.Vector2.36* nonnull align 8 dereferenceable(16) %this) unnamed_addr #3 comdat align 2 {
entry:
  %this.addr = alloca %struct.Vector2.36*, align 8
  store %struct.Vector2.36* %this, %struct.Vector2.36** %this.addr, align 8
  %this1 = load %struct.Vector2.36*, %struct.Vector2.36** %this.addr, align 8
  %x = getelementptr inbounds %struct.Vector2.36, %struct.Vector2.36* %this1, i32 0, i32 0
  store double 0.000000e+00, double* %x, align 8
  %y = getelementptr inbounds %struct.Vector2.36, %struct.Vector2.36* %this1, i32 0, i32 1
  store double 0.000000e+00, double* %y, align 8
  ret void
}

; Function Attrs: mustprogress noinline nounwind optnone uwtable
define linkonce_odr dso_local <2 x float> @_ZNK7Vector2IdE7tofloatEv(%struct.Vector2.36* nonnull align 8 dereferenceable(16) %this) #1 comdat align 2 {
entry:
  %retval = alloca %struct.Vector2, align 4
  %this.addr = alloca %struct.Vector2.36*, align 8
  store %struct.Vector2.36* %this, %struct.Vector2.36** %this.addr, align 8
  %this1 = load %struct.Vector2.36*, %struct.Vector2.36** %this.addr, align 8
  %x = getelementptr inbounds %struct.Vector2.36, %struct.Vector2.36* %this1, i32 0, i32 0
  %0 = load double, double* %x, align 8
  %conv = fptrunc double %0 to float
  %y = getelementptr inbounds %struct.Vector2.36, %struct.Vector2.36* %this1, i32 0, i32 1
  %1 = load double, double* %y, align 8
  %conv2 = fptrunc double %1 to float
  call void @_ZN7Vector2IfEC2Eff(%struct.Vector2* nonnull align 4 dereferenceable(8) %retval, float %conv, float %conv2)
  %2 = bitcast %struct.Vector2* %retval to <2 x float>*
  %3 = load <2 x float>, <2 x float>* %2, align 4
  ret <2 x float> %3
}

; Function Attrs: noinline nounwind optnone uwtable
define linkonce_odr dso_local void @_ZN7Vector2IfEC2Eff(%struct.Vector2* nonnull align 4 dereferenceable(8) %this, float %x0, float %y0) unnamed_addr #3 comdat align 2 {
entry:
  %this.addr = alloca %struct.Vector2*, align 8
  %x0.addr = alloca float, align 4
  %y0.addr = alloca float, align 4
  store %struct.Vector2* %this, %struct.Vector2** %this.addr, align 8
  store float %x0, float* %x0.addr, align 4
  store float %y0, float* %y0.addr, align 4
  %this1 = load %struct.Vector2*, %struct.Vector2** %this.addr, align 8
  %x = getelementptr inbounds %struct.Vector2, %struct.Vector2* %this1, i32 0, i32 0
  %0 = load float, float* %x0.addr, align 4
  store float %0, float* %x, align 4
  %y = getelementptr inbounds %struct.Vector2, %struct.Vector2* %this1, i32 0, i32 1
  %1 = load float, float* %y0.addr, align 4
  store float %1, float* %y, align 4
  ret void
}

; Function Attrs: mustprogress noinline nounwind optnone uwtable
define dso_local zeroext i1 @_ZN8AC_WPNav21force_stop_at_next_wpEv(%class.AC_WPNav* nonnull align 8 dereferenceable(2256) %this) #0 align 2 {
entry:
  %retval = alloca i1, align 1
  %this.addr = alloca %class.AC_WPNav*, align 8
  store %class.AC_WPNav* %this, %class.AC_WPNav** %this.addr, align 8
  %this1 = load %class.AC_WPNav*, %class.AC_WPNav** %this.addr, align 8
  %_flags = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 1
  %0 = bitcast %"struct.AC_WPNav::wpnav_flags"* %_flags to i8*
  %bf.load = load i8, i8* %0, align 8
  %bf.lshr = lshr i8 %bf.load, 1
  %bf.clear = and i8 %bf.lshr, 1
  %tobool = icmp ne i8 %bf.clear, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i1 false, i1* %retval, align 1
  br label %return

if.end:                                           ; preds = %entry
  %_flags2 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 1
  %1 = bitcast %"struct.AC_WPNav::wpnav_flags"* %_flags2 to i8*
  %bf.load3 = load i8, i8* %1, align 8
  %bf.clear4 = and i8 %bf.load3, -3
  store i8 %bf.clear4, i8* %1, align 8
  %_this_leg_is_spline = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 26
  %2 = load i8, i8* %_this_leg_is_spline, align 8
  %tobool5 = trunc i8 %2 to i1
  br i1 %tobool5, label %if.end7, label %if.then6

if.then6:                                         ; preds = %if.end
  %_scurve_this_leg = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 20
  call void @_ZN6SCurve25set_destination_speed_maxEf(%class.SCurve* nonnull align 4 dereferenceable(604) %_scurve_this_leg, float 0.000000e+00)
  br label %if.end7

if.end7:                                          ; preds = %if.then6, %if.end
  %_next_leg_is_spline = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 27
  %3 = load i8, i8* %_next_leg_is_spline, align 1
  %tobool8 = trunc i8 %3 to i1
  br i1 %tobool8, label %if.end10, label %if.then9

if.then9:                                         ; preds = %if.end7
  %_scurve_next_leg = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this1, i32 0, i32 21
  call void @_ZN6SCurve4initEv(%class.SCurve* nonnull align 4 dereferenceable(604) %_scurve_next_leg)
  br label %if.end10

if.end10:                                         ; preds = %if.then9, %if.end7
  store i1 true, i1* %retval, align 1
  br label %return

return:                                           ; preds = %if.end10, %if.then
  %4 = load i1, i1* %retval, align 1
  ret i1 %4
}

declare dso_local void @_ZN6SCurve25set_destination_speed_maxEf(%class.SCurve* nonnull align 4 dereferenceable(604), float) #2

; Function Attrs: mustprogress noinline nounwind optnone uwtable
define dso_local zeroext i1 @_ZN8AC_WPNav26set_spline_destination_locERK8LocationS2_b(%class.AC_WPNav* nonnull align 8 dereferenceable(2256) %this, %class.Location* nonnull align 4 dereferenceable(16) %destination, %class.Location* nonnull align 4 dereferenceable(16) %next_destination, i1 zeroext %next_is_spline) #0 align 2 {
entry:
  %retval = alloca i1, align 1
  %this.addr = alloca %class.AC_WPNav*, align 8
  %destination.addr = alloca %class.Location*, align 8
  %next_destination.addr = alloca %class.Location*, align 8
  %next_is_spline.addr = alloca i8, align 1
  %dest_neu = alloca %class.Vector3, align 4
  %dest_terr_alt = alloca i8, align 1
  %next_dest_neu = alloca %class.Vector3, align 4
  %next_dest_terr_alt = alloca i8, align 1
  store %class.AC_WPNav* %this, %class.AC_WPNav** %this.addr, align 8
  store %class.Location* %destination, %class.Location** %destination.addr, align 8
  store %class.Location* %next_destination, %class.Location** %next_destination.addr, align 8
  %frombool = zext i1 %next_is_spline to i8
  store i8 %frombool, i8* %next_is_spline.addr, align 1
  %this1 = load %class.AC_WPNav*, %class.AC_WPNav** %this.addr, align 8
  call void @_ZN7Vector3IfEC2Ev(%class.Vector3* nonnull align 4 dereferenceable(12) %dest_neu)
  %0 = load %class.Location*, %class.Location** %destination.addr, align 8
  %call = call zeroext i1 @_ZN8AC_WPNav14get_vector_NEUERK8LocationR7Vector3IfERb(%class.AC_WPNav* nonnull align 8 dereferenceable(2256) %this1, %class.Location* nonnull align 4 dereferenceable(16) %0, %class.Vector3* nonnull align 4 dereferenceable(12) %dest_neu, i8* nonnull align 1 dereferenceable(1) %dest_terr_alt)
  br i1 %call, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i1 false, i1* %retval, align 1
  br label %return

if.end:                                           ; preds = %entry
  call void @_ZN7Vector3IfEC2Ev(%class.Vector3* nonnull align 4 dereferenceable(12) %next_dest_neu)
  %1 = load %class.Location*, %class.Location** %next_destination.addr, align 8
  %call2 = call zeroext i1 @_ZN8AC_WPNav14get_vector_NEUERK8LocationR7Vector3IfERb(%class.AC_WPNav* nonnull align 8 dereferenceable(2256) %this1, %class.Location* nonnull align 4 dereferenceable(16) %1, %class.Vector3* nonnull align 4 dereferenceable(12) %next_dest_neu, i8* nonnull align 1 dereferenceable(1) %next_dest_terr_alt)
  br i1 %call2, label %if.end4, label %if.then3

if.then3:                                         ; preds = %if.end
  store i1 false, i1* %retval, align 1
  br label %return

if.end4:                                          ; preds = %if.end
  %2 = load i8, i8* %dest_terr_alt, align 1
  %tobool = trunc i8 %2 to i1
  %3 = load i8, i8* %next_dest_terr_alt, align 1
  %tobool5 = trunc i8 %3 to i1
  %4 = load i8, i8* %next_is_spline.addr, align 1
  %tobool6 = trunc i8 %4 to i1
  %call7 = call zeroext i1 @_ZN8AC_WPNav22set_spline_destinationERK7Vector3IfEbS3_bb(%class.AC_WPNav* nonnull align 8 dereferenceable(2256) %this1, %class.Vector3* nonnull align 4 dereferenceable(12) %dest_neu, i1 zeroext %tobool, %class.Vector3* nonnull align 4 dereferenceable(12) %next_dest_neu, i1 zeroext %tobool5, i1 zeroext %tobool6)
  store i1 %call7, i1* %retval, align 1
  br label %return

return:                                           ; preds = %if.end4, %if.then3, %if.then
  %5 = load i1, i1* %retval, align 1
  ret i1 %5
}

; Function Attrs: mustprogress noinline nounwind optnone uwtable
define dso_local zeroext i1 @_ZN8AC_WPNav22set_spline_destinationERK7Vector3IfEbS3_bb(%class.AC_WPNav* nonnull align 8 dereferenceable(2256) %this, %class.Vector3* nonnull align 4 dereferenceable(12) %destination, i1 zeroext %terrain_alt, %class.Vector3* nonnull align 4 dereferenceable(12) %next_destination, i1 zeroext %next_terrain_alt, i1 zeroext %next_is_spline) #1 align 2 {
entry:
  %retval = alloca i1, align 1
  %this.addr = alloca %class.AC_WPNav*, align 8
  %destination.addr = alloca %class.Vector3*, align 8
  %terrain_alt.addr = alloca i8, align 1
  %next_destination.addr = alloca %class.Vector3*, align 8
  %next_terrain_alt.addr = alloca i8, align 1
  %next_is_spline.addr = alloca i8, align 1
  %agg.tmp = alloca %class.Vector3, align 4
  %agg.tmp.coerce = alloca { <2 x float>, float }, align 4
  %origin_vector = alloca %class.Vector3, align 4
  %ref.tmp = alloca %class.Vector3, align 4
  %tmp.coerce = alloca { <2 x float>, float }, align 8
  %origin_terr_offset = alloca float, align 4
  %destination_vector = alloca %class.Vector3, align 4
  %ref.tmp65 = alloca %class.Vector3, align 4
  %tmp.coerce68 = alloca { <2 x float>, float }, align 8
  %ref.tmp70 = alloca %class.Vector3, align 4
  %tmp.coerce73 = alloca { <2 x float>, float }, align 8
  store %class.AC_WPNav* %this, %class.AC_WPNav** %this.addr, align 8
  store %class.Vector3* %destination, %class.Vector3** %destination.addr, align 8
  %frombool = zext i1 %terrain_alt to i8
  store i8 %frombool, i8* %terrain_alt.addr, align 1
  store %class.Vector3* %next_destination, %class.Vector3** %next_destination.addr, align 8
  %frombool1 = zext i1 %next_terrain_alt to i8
  store i8 %frombool1, i8* %next_terrain_alt.addr, align 1
  %frombool2 = zext i1 %next_is_spline to i8
  store i8 %frombool2, i8* %next_is_spline.addr, align 1
  %this3 = load %class.AC_WPNav*, %class.AC_WPNav** %this.addr, align 8
  %call = call zeroext i1 @_ZNK8AC_WPNav9is_activeEv(%class.AC_WPNav* nonnull align 8 dereferenceable(2256) %this3)
  br i1 %call, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %entry
  %_flags = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this3, i32 0, i32 1
  %0 = bitcast %"struct.AC_WPNav::wpnav_flags"* %_flags to i8*
  %bf.load = load i8, i8* %0, align 8
  %bf.clear = and i8 %bf.load, 1
  %tobool = icmp ne i8 %bf.clear, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false, %entry
  %_wp_desired_speed_xy_cms = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this3, i32 0, i32 29
  %1 = load float, float* %_wp_desired_speed_xy_cms, align 8
  call void @_ZN7Vector3IfEC2Ev(%class.Vector3* nonnull align 4 dereferenceable(12) %agg.tmp)
  %2 = bitcast { <2 x float>, float }* %agg.tmp.coerce to i8*
  %3 = bitcast %class.Vector3* %agg.tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %2, i8* align 4 %3, i64 12, i1 false)
  %4 = getelementptr inbounds { <2 x float>, float }, { <2 x float>, float }* %agg.tmp.coerce, i32 0, i32 0
  %5 = load <2 x float>, <2 x float>* %4, align 4
  %6 = getelementptr inbounds { <2 x float>, float }, { <2 x float>, float }* %agg.tmp.coerce, i32 0, i32 1
  %7 = load float, float* %6, align 4
  call void @_ZN8AC_WPNav18wp_and_spline_initEf7Vector3IfE(%class.AC_WPNav* nonnull align 8 dereferenceable(2256) %this3, float %1, <2 x float> %5, float %7)
  br label %if.end

if.end:                                           ; preds = %if.then, %lor.lhs.false
  %_spline_this_leg = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this3, i32 0, i32 24
  %_pos_control = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this3, i32 0, i32 4
  %8 = load %class.AC_PosControl*, %class.AC_PosControl** %_pos_control, align 8
  %call4 = call float @_ZNK13AC_PosControl20get_max_speed_xy_cmsEv(%class.AC_PosControl* nonnull align 8 dereferenceable(1056) %8)
  %_pos_control5 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this3, i32 0, i32 4
  %9 = load %class.AC_PosControl*, %class.AC_PosControl** %_pos_control5, align 8
  %call6 = call float @_ZNK13AC_PosControl20get_max_speed_up_cmsEv(%class.AC_PosControl* nonnull align 8 dereferenceable(1056) %9)
  %_pos_control7 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this3, i32 0, i32 4
  %10 = load %class.AC_PosControl*, %class.AC_PosControl** %_pos_control7, align 8
  %call8 = call float @_ZNK13AC_PosControl22get_max_speed_down_cmsEv(%class.AC_PosControl* nonnull align 8 dereferenceable(1056) %10)
  %_pos_control9 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this3, i32 0, i32 4
  %11 = load %class.AC_PosControl*, %class.AC_PosControl** %_pos_control9, align 8
  %call10 = call float @_ZNK13AC_PosControl21get_max_accel_xy_cmssEv(%class.AC_PosControl* nonnull align 8 dereferenceable(1056) %11)
  %_pos_control11 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this3, i32 0, i32 4
  %12 = load %class.AC_PosControl*, %class.AC_PosControl** %_pos_control11, align 8
  %call12 = call float @_ZNK13AC_PosControl20get_max_accel_z_cmssEv(%class.AC_PosControl* nonnull align 8 dereferenceable(1056) %12)
  call void @_ZN11SplineCurve15set_speed_accelEfffff(%class.SplineCurve* nonnull align 4 dereferenceable(130) %_spline_this_leg, float %call4, float %call6, float %call8, float %call10, float %call12)
  call void @_ZN7Vector3IfEC2Ev(%class.Vector3* nonnull align 4 dereferenceable(12) %origin_vector)
  %13 = load i8, i8* %terrain_alt.addr, align 1
  %tobool13 = trunc i8 %13 to i1
  %conv = zext i1 %tobool13 to i32
  %_terrain_alt = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this3, i32 0, i32 37
  %14 = load i8, i8* %_terrain_alt, align 1
  %tobool14 = trunc i8 %14 to i1
  %conv15 = zext i1 %tobool14 to i32
  %cmp = icmp eq i32 %conv, %conv15
  br i1 %cmp, label %if.then16, label %if.else31

if.then16:                                        ; preds = %if.end
  %_flags17 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this3, i32 0, i32 1
  %15 = bitcast %"struct.AC_WPNav::wpnav_flags"* %_flags17 to i8*
  %bf.load18 = load i8, i8* %15, align 8
  %bf.lshr = lshr i8 %bf.load18, 1
  %bf.clear19 = and i8 %bf.lshr, 1
  %tobool20 = icmp ne i8 %bf.clear19, 0
  br i1 %tobool20, label %if.then21, label %if.end28

if.then21:                                        ; preds = %if.then16
  %_this_leg_is_spline = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this3, i32 0, i32 26
  %16 = load i8, i8* %_this_leg_is_spline, align 8
  %tobool22 = trunc i8 %16 to i1
  br i1 %tobool22, label %if.then23, label %if.else

if.then23:                                        ; preds = %if.then21
  %_spline_this_leg24 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this3, i32 0, i32 24
  %call25 = call nonnull align 4 dereferenceable(12) %class.Vector3* @_ZN11SplineCurve19get_destination_velEv(%class.SplineCurve* nonnull align 4 dereferenceable(130) %_spline_this_leg24)
  %17 = bitcast %class.Vector3* %origin_vector to i8*
  %18 = bitcast %class.Vector3* %call25 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %17, i8* align 4 %18, i64 12, i1 false)
  br label %if.end27

if.else:                                          ; preds = %if.then21
  %_destination = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this3, i32 0, i32 31
  %_origin = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this3, i32 0, i32 30
  %call26 = call { <2 x float>, float } @_ZNK7Vector3IfEmiERKS0_(%class.Vector3* nonnull align 4 dereferenceable(12) %_destination, %class.Vector3* nonnull align 4 dereferenceable(12) %_origin)
  store { <2 x float>, float } %call26, { <2 x float>, float }* %tmp.coerce, align 8
  %19 = bitcast %class.Vector3* %ref.tmp to i8*
  %20 = bitcast { <2 x float>, float }* %tmp.coerce to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %19, i8* align 8 %20, i64 12, i1 false)
  %21 = bitcast %class.Vector3* %origin_vector to i8*
  %22 = bitcast %class.Vector3* %ref.tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %21, i8* align 4 %22, i64 12, i1 false)
  br label %if.end27

if.end27:                                         ; preds = %if.else, %if.then23
  br label %if.end28

if.end28:                                         ; preds = %if.end27, %if.then16
  %_destination29 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this3, i32 0, i32 31
  %_origin30 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this3, i32 0, i32 30
  %23 = bitcast %class.Vector3* %_origin30 to i8*
  %24 = bitcast %class.Vector3* %_destination29 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %23, i8* align 8 %24, i64 12, i1 false)
  br label %if.end52

if.else31:                                        ; preds = %if.end
  %_destination32 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this3, i32 0, i32 31
  %_origin33 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this3, i32 0, i32 30
  %25 = bitcast %class.Vector3* %_origin33 to i8*
  %26 = bitcast %class.Vector3* %_destination32 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %25, i8* align 8 %26, i64 12, i1 false)
  %call34 = call zeroext i1 @_ZN8AC_WPNav18get_terrain_offsetERf(%class.AC_WPNav* nonnull align 8 dereferenceable(2256) %this3, float* nonnull align 4 dereferenceable(4) %origin_terr_offset)
  br i1 %call34, label %if.end36, label %if.then35

if.then35:                                        ; preds = %if.else31
  store i1 false, i1* %retval, align 1
  br label %return

if.end36:                                         ; preds = %if.else31
  %27 = load i8, i8* %terrain_alt.addr, align 1
  %tobool37 = trunc i8 %27 to i1
  br i1 %tobool37, label %if.then38, label %if.else43

if.then38:                                        ; preds = %if.end36
  %28 = load float, float* %origin_terr_offset, align 4
  %_origin39 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this3, i32 0, i32 30
  %z = getelementptr inbounds %class.Vector3, %class.Vector3* %_origin39, i32 0, i32 2
  %29 = load float, float* %z, align 4
  %sub = fsub float %29, %28
  store float %sub, float* %z, align 4
  %_pos_control40 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this3, i32 0, i32 4
  %30 = load %class.AC_PosControl*, %class.AC_PosControl** %_pos_control40, align 8
  %_pos_control41 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this3, i32 0, i32 4
  %31 = load %class.AC_PosControl*, %class.AC_PosControl** %_pos_control41, align 8
  %call42 = call float @_ZNK13AC_PosControl19get_pos_offset_z_cmEv(%class.AC_PosControl* nonnull align 8 dereferenceable(1056) %31)
  %32 = load float, float* %origin_terr_offset, align 4
  %add = fadd float %call42, %32
  call void @_ZN13AC_PosControl19set_pos_offset_z_cmEf(%class.AC_PosControl* nonnull align 8 dereferenceable(1056) %30, float %add)
  br label %if.end51

if.else43:                                        ; preds = %if.end36
  %33 = load float, float* %origin_terr_offset, align 4
  %_origin44 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this3, i32 0, i32 30
  %z45 = getelementptr inbounds %class.Vector3, %class.Vector3* %_origin44, i32 0, i32 2
  %34 = load float, float* %z45, align 4
  %add46 = fadd float %34, %33
  store float %add46, float* %z45, align 4
  %_pos_control47 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this3, i32 0, i32 4
  %35 = load %class.AC_PosControl*, %class.AC_PosControl** %_pos_control47, align 8
  %_pos_control48 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this3, i32 0, i32 4
  %36 = load %class.AC_PosControl*, %class.AC_PosControl** %_pos_control48, align 8
  %call49 = call float @_ZNK13AC_PosControl19get_pos_offset_z_cmEv(%class.AC_PosControl* nonnull align 8 dereferenceable(1056) %36)
  %37 = load float, float* %origin_terr_offset, align 4
  %sub50 = fsub float %call49, %37
  call void @_ZN13AC_PosControl19set_pos_offset_z_cmEf(%class.AC_PosControl* nonnull align 8 dereferenceable(1056) %35, float %sub50)
  br label %if.end51

if.end51:                                         ; preds = %if.else43, %if.then38
  br label %if.end52

if.end52:                                         ; preds = %if.end51, %if.end28
  %38 = load %class.Vector3*, %class.Vector3** %destination.addr, align 8
  %_destination53 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this3, i32 0, i32 31
  %39 = bitcast %class.Vector3* %_destination53 to i8*
  %40 = bitcast %class.Vector3* %38 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %39, i8* align 4 %40, i64 12, i1 false)
  %41 = load i8, i8* %terrain_alt.addr, align 1
  %tobool54 = trunc i8 %41 to i1
  %_terrain_alt55 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this3, i32 0, i32 37
  %frombool56 = zext i1 %tobool54 to i8
  store i8 %frombool56, i8* %_terrain_alt55, align 1
  call void @_ZN7Vector3IfEC2Ev(%class.Vector3* nonnull align 4 dereferenceable(12) %destination_vector)
  %42 = load i8, i8* %terrain_alt.addr, align 1
  %tobool57 = trunc i8 %42 to i1
  %conv58 = zext i1 %tobool57 to i32
  %43 = load i8, i8* %next_terrain_alt.addr, align 1
  %tobool59 = trunc i8 %43 to i1
  %conv60 = zext i1 %tobool59 to i32
  %cmp61 = icmp eq i32 %conv58, %conv60
  br i1 %cmp61, label %if.then62, label %if.end75

if.then62:                                        ; preds = %if.end52
  %44 = load i8, i8* %next_is_spline.addr, align 1
  %tobool63 = trunc i8 %44 to i1
  br i1 %tobool63, label %if.then64, label %if.else69

if.then64:                                        ; preds = %if.then62
  %45 = load %class.Vector3*, %class.Vector3** %next_destination.addr, align 8
  %_origin66 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this3, i32 0, i32 30
  %call67 = call { <2 x float>, float } @_ZNK7Vector3IfEmiERKS0_(%class.Vector3* nonnull align 4 dereferenceable(12) %45, %class.Vector3* nonnull align 4 dereferenceable(12) %_origin66)
  store { <2 x float>, float } %call67, { <2 x float>, float }* %tmp.coerce68, align 8
  %46 = bitcast %class.Vector3* %ref.tmp65 to i8*
  %47 = bitcast { <2 x float>, float }* %tmp.coerce68 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %46, i8* align 8 %47, i64 12, i1 false)
  %48 = bitcast %class.Vector3* %destination_vector to i8*
  %49 = bitcast %class.Vector3* %ref.tmp65 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %48, i8* align 4 %49, i64 12, i1 false)
  br label %if.end74

if.else69:                                        ; preds = %if.then62
  %50 = load %class.Vector3*, %class.Vector3** %next_destination.addr, align 8
  %_destination71 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this3, i32 0, i32 31
  %call72 = call { <2 x float>, float } @_ZNK7Vector3IfEmiERKS0_(%class.Vector3* nonnull align 4 dereferenceable(12) %50, %class.Vector3* nonnull align 4 dereferenceable(12) %_destination71)
  store { <2 x float>, float } %call72, { <2 x float>, float }* %tmp.coerce73, align 8
  %51 = bitcast %class.Vector3* %ref.tmp70 to i8*
  %52 = bitcast { <2 x float>, float }* %tmp.coerce73 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %51, i8* align 8 %52, i64 12, i1 false)
  %53 = bitcast %class.Vector3* %destination_vector to i8*
  %54 = bitcast %class.Vector3* %ref.tmp70 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %53, i8* align 4 %54, i64 12, i1 false)
  br label %if.end74

if.end74:                                         ; preds = %if.else69, %if.then64
  br label %if.end75

if.end75:                                         ; preds = %if.end74, %if.end52
  %call76 = call zeroext i1 @_ZNK7Vector3IfE7is_zeroEv(%class.Vector3* nonnull align 4 dereferenceable(12) %destination_vector)
  %lnot = xor i1 %call76, true
  %conv77 = zext i1 %lnot to i8
  %_flags78 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this3, i32 0, i32 1
  %55 = bitcast %"struct.AC_WPNav::wpnav_flags"* %_flags78 to i8*
  %bf.load79 = load i8, i8* %55, align 8
  %bf.value = and i8 %conv77, 1
  %bf.shl = shl i8 %bf.value, 1
  %bf.clear80 = and i8 %bf.load79, -3
  %bf.set = or i8 %bf.clear80, %bf.shl
  store i8 %bf.set, i8* %55, align 8
  %_spline_this_leg81 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this3, i32 0, i32 24
  %_origin82 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this3, i32 0, i32 30
  %_destination83 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this3, i32 0, i32 31
  call void @_ZN11SplineCurve26set_origin_and_destinationERK7Vector3IfES3_S3_S3_(%class.SplineCurve* nonnull align 4 dereferenceable(130) %_spline_this_leg81, %class.Vector3* nonnull align 4 dereferenceable(12) %_origin82, %class.Vector3* nonnull align 4 dereferenceable(12) %_destination83, %class.Vector3* nonnull align 4 dereferenceable(12) %origin_vector, %class.Vector3* nonnull align 4 dereferenceable(12) %destination_vector)
  %_this_leg_is_spline84 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this3, i32 0, i32 26
  store i8 1, i8* %_this_leg_is_spline84, align 8
  %_flags85 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this3, i32 0, i32 1
  %56 = bitcast %"struct.AC_WPNav::wpnav_flags"* %_flags85 to i8*
  %bf.load86 = load i8, i8* %56, align 8
  %bf.clear87 = and i8 %bf.load86, -2
  store i8 %bf.clear87, i8* %56, align 8
  store i1 true, i1* %retval, align 1
  br label %return

return:                                           ; preds = %if.end75, %if.then35
  %57 = load i1, i1* %retval, align 1
  ret i1 %57
}

; Function Attrs: mustprogress noinline nounwind optnone uwtable
define linkonce_odr dso_local float @_ZNK13AC_PosControl21get_max_accel_xy_cmssEv(%class.AC_PosControl* nonnull align 8 dereferenceable(1056) %this) #0 comdat align 2 {
entry:
  %this.addr = alloca %class.AC_PosControl*, align 8
  store %class.AC_PosControl* %this, %class.AC_PosControl** %this.addr, align 8
  %this1 = load %class.AC_PosControl*, %class.AC_PosControl** %this.addr, align 8
  %_accel_max_xy_cmss = getelementptr inbounds %class.AC_PosControl, %class.AC_PosControl* %this1, i32 0, i32 20
  %0 = load float, float* %_accel_max_xy_cmss, align 8
  ret float %0
}

; Function Attrs: mustprogress noinline nounwind optnone uwtable
define linkonce_odr dso_local nonnull align 4 dereferenceable(12) %class.Vector3* @_ZN11SplineCurve19get_destination_velEv(%class.SplineCurve* nonnull align 4 dereferenceable(130) %this) #0 comdat align 2 {
entry:
  %this.addr = alloca %class.SplineCurve*, align 8
  store %class.SplineCurve* %this, %class.SplineCurve** %this.addr, align 8
  %this1 = load %class.SplineCurve*, %class.SplineCurve** %this.addr, align 8
  %_destination_vel = getelementptr inbounds %class.SplineCurve, %class.SplineCurve* %this1, i32 0, i32 3
  ret %class.Vector3* %_destination_vel
}

declare dso_local void @_ZN11SplineCurve26set_origin_and_destinationERK7Vector3IfES3_S3_S3_(%class.SplineCurve* nonnull align 4 dereferenceable(130), %class.Vector3* nonnull align 4 dereferenceable(12), %class.Vector3* nonnull align 4 dereferenceable(12), %class.Vector3* nonnull align 4 dereferenceable(12), %class.Vector3* nonnull align 4 dereferenceable(12)) #2

; Function Attrs: mustprogress noinline nounwind optnone uwtable
define dso_local zeroext i1 @_ZN8AC_WPNav31set_spline_destination_next_locERK8LocationS2_b(%class.AC_WPNav* nonnull align 8 dereferenceable(2256) %this, %class.Location* nonnull align 4 dereferenceable(16) %next_destination, %class.Location* nonnull align 4 dereferenceable(16) %next_next_destination, i1 zeroext %next_next_is_spline) #0 align 2 {
entry:
  %retval = alloca i1, align 1
  %this.addr = alloca %class.AC_WPNav*, align 8
  %next_destination.addr = alloca %class.Location*, align 8
  %next_next_destination.addr = alloca %class.Location*, align 8
  %next_next_is_spline.addr = alloca i8, align 1
  %next_dest_neu = alloca %class.Vector3, align 4
  %next_dest_terr_alt = alloca i8, align 1
  %next_next_dest_neu = alloca %class.Vector3, align 4
  %next_next_dest_terr_alt = alloca i8, align 1
  store %class.AC_WPNav* %this, %class.AC_WPNav** %this.addr, align 8
  store %class.Location* %next_destination, %class.Location** %next_destination.addr, align 8
  store %class.Location* %next_next_destination, %class.Location** %next_next_destination.addr, align 8
  %frombool = zext i1 %next_next_is_spline to i8
  store i8 %frombool, i8* %next_next_is_spline.addr, align 1
  %this1 = load %class.AC_WPNav*, %class.AC_WPNav** %this.addr, align 8
  call void @_ZN7Vector3IfEC2Ev(%class.Vector3* nonnull align 4 dereferenceable(12) %next_dest_neu)
  %0 = load %class.Location*, %class.Location** %next_destination.addr, align 8
  %call = call zeroext i1 @_ZN8AC_WPNav14get_vector_NEUERK8LocationR7Vector3IfERb(%class.AC_WPNav* nonnull align 8 dereferenceable(2256) %this1, %class.Location* nonnull align 4 dereferenceable(16) %0, %class.Vector3* nonnull align 4 dereferenceable(12) %next_dest_neu, i8* nonnull align 1 dereferenceable(1) %next_dest_terr_alt)
  br i1 %call, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  store i1 false, i1* %retval, align 1
  br label %return

if.end:                                           ; preds = %entry
  call void @_ZN7Vector3IfEC2Ev(%class.Vector3* nonnull align 4 dereferenceable(12) %next_next_dest_neu)
  %1 = load %class.Location*, %class.Location** %next_next_destination.addr, align 8
  %call2 = call zeroext i1 @_ZN8AC_WPNav14get_vector_NEUERK8LocationR7Vector3IfERb(%class.AC_WPNav* nonnull align 8 dereferenceable(2256) %this1, %class.Location* nonnull align 4 dereferenceable(16) %1, %class.Vector3* nonnull align 4 dereferenceable(12) %next_next_dest_neu, i8* nonnull align 1 dereferenceable(1) %next_next_dest_terr_alt)
  br i1 %call2, label %if.end4, label %if.then3

if.then3:                                         ; preds = %if.end
  store i1 false, i1* %retval, align 1
  br label %return

if.end4:                                          ; preds = %if.end
  %2 = load i8, i8* %next_dest_terr_alt, align 1
  %tobool = trunc i8 %2 to i1
  %3 = load i8, i8* %next_next_dest_terr_alt, align 1
  %tobool5 = trunc i8 %3 to i1
  %4 = load i8, i8* %next_next_is_spline.addr, align 1
  %tobool6 = trunc i8 %4 to i1
  %call7 = call zeroext i1 @_ZN8AC_WPNav27set_spline_destination_nextERK7Vector3IfEbS3_bb(%class.AC_WPNav* nonnull align 8 dereferenceable(2256) %this1, %class.Vector3* nonnull align 4 dereferenceable(12) %next_dest_neu, i1 zeroext %tobool, %class.Vector3* nonnull align 4 dereferenceable(12) %next_next_dest_neu, i1 zeroext %tobool5, i1 zeroext %tobool6)
  store i1 %call7, i1* %retval, align 1
  br label %return

return:                                           ; preds = %if.end4, %if.then3, %if.then
  %5 = load i1, i1* %retval, align 1
  ret i1 %5
}

; Function Attrs: mustprogress noinline nounwind optnone uwtable
define dso_local zeroext i1 @_ZN8AC_WPNav27set_spline_destination_nextERK7Vector3IfEbS3_bb(%class.AC_WPNav* nonnull align 8 dereferenceable(2256) %this, %class.Vector3* nonnull align 4 dereferenceable(12) %next_destination, i1 zeroext %next_terrain_alt, %class.Vector3* nonnull align 4 dereferenceable(12) %next_next_destination, i1 zeroext %next_next_terrain_alt, i1 zeroext %next_next_is_spline) #0 align 2 {
entry:
  %retval = alloca i1, align 1
  %this.addr = alloca %class.AC_WPNav*, align 8
  %next_destination.addr = alloca %class.Vector3*, align 8
  %next_terrain_alt.addr = alloca i8, align 1
  %next_next_destination.addr = alloca %class.Vector3*, align 8
  %next_next_terrain_alt.addr = alloca i8, align 1
  %next_next_is_spline.addr = alloca i8, align 1
  %origin_vector = alloca %class.Vector3, align 4
  %ref.tmp = alloca %class.Vector3, align 4
  %tmp.coerce = alloca { <2 x float>, float }, align 8
  %destination_vector = alloca %class.Vector3, align 4
  %ref.tmp18 = alloca %class.Vector3, align 4
  %tmp.coerce21 = alloca { <2 x float>, float }, align 8
  %ref.tmp23 = alloca %class.Vector3, align 4
  %tmp.coerce25 = alloca { <2 x float>, float }, align 8
  store %class.AC_WPNav* %this, %class.AC_WPNav** %this.addr, align 8
  store %class.Vector3* %next_destination, %class.Vector3** %next_destination.addr, align 8
  %frombool = zext i1 %next_terrain_alt to i8
  store i8 %frombool, i8* %next_terrain_alt.addr, align 1
  store %class.Vector3* %next_next_destination, %class.Vector3** %next_next_destination.addr, align 8
  %frombool1 = zext i1 %next_next_terrain_alt to i8
  store i8 %frombool1, i8* %next_next_terrain_alt.addr, align 1
  %frombool2 = zext i1 %next_next_is_spline to i8
  store i8 %frombool2, i8* %next_next_is_spline.addr, align 1
  %this3 = load %class.AC_WPNav*, %class.AC_WPNav** %this.addr, align 8
  %0 = load i8, i8* %next_terrain_alt.addr, align 1
  %tobool = trunc i8 %0 to i1
  %conv = zext i1 %tobool to i32
  %_terrain_alt = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this3, i32 0, i32 37
  %1 = load i8, i8* %_terrain_alt, align 1
  %tobool4 = trunc i8 %1 to i1
  %conv5 = zext i1 %tobool4 to i32
  %cmp = icmp ne i32 %conv, %conv5
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i1 true, i1* %retval, align 1
  br label %return

if.end:                                           ; preds = %entry
  call void @_ZN7Vector3IfEC2Ev(%class.Vector3* nonnull align 4 dereferenceable(12) %origin_vector)
  %_this_leg_is_spline = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this3, i32 0, i32 26
  %2 = load i8, i8* %_this_leg_is_spline, align 8
  %tobool6 = trunc i8 %2 to i1
  br i1 %tobool6, label %if.then7, label %if.else

if.then7:                                         ; preds = %if.end
  %_spline_this_leg = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this3, i32 0, i32 24
  %call = call nonnull align 4 dereferenceable(12) %class.Vector3* @_ZN11SplineCurve19get_destination_velEv(%class.SplineCurve* nonnull align 4 dereferenceable(130) %_spline_this_leg)
  %3 = bitcast %class.Vector3* %origin_vector to i8*
  %4 = bitcast %class.Vector3* %call to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %3, i8* align 4 %4, i64 12, i1 false)
  br label %if.end9

if.else:                                          ; preds = %if.end
  %_destination = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this3, i32 0, i32 31
  %_origin = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this3, i32 0, i32 30
  %call8 = call { <2 x float>, float } @_ZNK7Vector3IfEmiERKS0_(%class.Vector3* nonnull align 4 dereferenceable(12) %_destination, %class.Vector3* nonnull align 4 dereferenceable(12) %_origin)
  store { <2 x float>, float } %call8, { <2 x float>, float }* %tmp.coerce, align 8
  %5 = bitcast %class.Vector3* %ref.tmp to i8*
  %6 = bitcast { <2 x float>, float }* %tmp.coerce to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %5, i8* align 8 %6, i64 12, i1 false)
  %7 = bitcast %class.Vector3* %origin_vector to i8*
  %8 = bitcast %class.Vector3* %ref.tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %7, i8* align 4 %8, i64 12, i1 false)
  br label %if.end9

if.end9:                                          ; preds = %if.else, %if.then7
  call void @_ZN7Vector3IfEC2Ev(%class.Vector3* nonnull align 4 dereferenceable(12) %destination_vector)
  %9 = load i8, i8* %next_terrain_alt.addr, align 1
  %tobool10 = trunc i8 %9 to i1
  %conv11 = zext i1 %tobool10 to i32
  %10 = load i8, i8* %next_next_terrain_alt.addr, align 1
  %tobool12 = trunc i8 %10 to i1
  %conv13 = zext i1 %tobool12 to i32
  %cmp14 = icmp eq i32 %conv11, %conv13
  br i1 %cmp14, label %if.then15, label %if.end27

if.then15:                                        ; preds = %if.end9
  %11 = load i8, i8* %next_next_is_spline.addr, align 1
  %tobool16 = trunc i8 %11 to i1
  br i1 %tobool16, label %if.then17, label %if.else22

if.then17:                                        ; preds = %if.then15
  %12 = load %class.Vector3*, %class.Vector3** %next_next_destination.addr, align 8
  %_destination19 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this3, i32 0, i32 31
  %call20 = call { <2 x float>, float } @_ZNK7Vector3IfEmiERKS0_(%class.Vector3* nonnull align 4 dereferenceable(12) %12, %class.Vector3* nonnull align 4 dereferenceable(12) %_destination19)
  store { <2 x float>, float } %call20, { <2 x float>, float }* %tmp.coerce21, align 8
  %13 = bitcast %class.Vector3* %ref.tmp18 to i8*
  %14 = bitcast { <2 x float>, float }* %tmp.coerce21 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %13, i8* align 8 %14, i64 12, i1 false)
  %15 = bitcast %class.Vector3* %destination_vector to i8*
  %16 = bitcast %class.Vector3* %ref.tmp18 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %15, i8* align 4 %16, i64 12, i1 false)
  br label %if.end26

if.else22:                                        ; preds = %if.then15
  %17 = load %class.Vector3*, %class.Vector3** %next_next_destination.addr, align 8
  %18 = load %class.Vector3*, %class.Vector3** %next_destination.addr, align 8
  %call24 = call { <2 x float>, float } @_ZNK7Vector3IfEmiERKS0_(%class.Vector3* nonnull align 4 dereferenceable(12) %17, %class.Vector3* nonnull align 4 dereferenceable(12) %18)
  store { <2 x float>, float } %call24, { <2 x float>, float }* %tmp.coerce25, align 8
  %19 = bitcast %class.Vector3* %ref.tmp23 to i8*
  %20 = bitcast { <2 x float>, float }* %tmp.coerce25 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %19, i8* align 8 %20, i64 12, i1 false)
  %21 = bitcast %class.Vector3* %destination_vector to i8*
  %22 = bitcast %class.Vector3* %ref.tmp23 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %21, i8* align 4 %22, i64 12, i1 false)
  br label %if.end26

if.end26:                                         ; preds = %if.else22, %if.then17
  br label %if.end27

if.end27:                                         ; preds = %if.end26, %if.end9
  %_spline_next_leg = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this3, i32 0, i32 25
  %_pos_control = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this3, i32 0, i32 4
  %23 = load %class.AC_PosControl*, %class.AC_PosControl** %_pos_control, align 8
  %call28 = call float @_ZNK13AC_PosControl20get_max_speed_xy_cmsEv(%class.AC_PosControl* nonnull align 8 dereferenceable(1056) %23)
  %_pos_control29 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this3, i32 0, i32 4
  %24 = load %class.AC_PosControl*, %class.AC_PosControl** %_pos_control29, align 8
  %call30 = call float @_ZNK13AC_PosControl20get_max_speed_up_cmsEv(%class.AC_PosControl* nonnull align 8 dereferenceable(1056) %24)
  %_pos_control31 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this3, i32 0, i32 4
  %25 = load %class.AC_PosControl*, %class.AC_PosControl** %_pos_control31, align 8
  %call32 = call float @_ZNK13AC_PosControl22get_max_speed_down_cmsEv(%class.AC_PosControl* nonnull align 8 dereferenceable(1056) %25)
  %_pos_control33 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this3, i32 0, i32 4
  %26 = load %class.AC_PosControl*, %class.AC_PosControl** %_pos_control33, align 8
  %call34 = call float @_ZNK13AC_PosControl21get_max_accel_xy_cmssEv(%class.AC_PosControl* nonnull align 8 dereferenceable(1056) %26)
  %_pos_control35 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this3, i32 0, i32 4
  %27 = load %class.AC_PosControl*, %class.AC_PosControl** %_pos_control35, align 8
  %call36 = call float @_ZNK13AC_PosControl20get_max_accel_z_cmssEv(%class.AC_PosControl* nonnull align 8 dereferenceable(1056) %27)
  call void @_ZN11SplineCurve15set_speed_accelEfffff(%class.SplineCurve* nonnull align 4 dereferenceable(130) %_spline_next_leg, float %call28, float %call30, float %call32, float %call34, float %call36)
  %_spline_next_leg37 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this3, i32 0, i32 25
  %_destination38 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this3, i32 0, i32 31
  %28 = load %class.Vector3*, %class.Vector3** %next_destination.addr, align 8
  call void @_ZN11SplineCurve26set_origin_and_destinationERK7Vector3IfES3_S3_S3_(%class.SplineCurve* nonnull align 4 dereferenceable(130) %_spline_next_leg37, %class.Vector3* nonnull align 4 dereferenceable(12) %_destination38, %class.Vector3* nonnull align 4 dereferenceable(12) %28, %class.Vector3* nonnull align 4 dereferenceable(12) %origin_vector, %class.Vector3* nonnull align 4 dereferenceable(12) %destination_vector)
  %_next_leg_is_spline = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this3, i32 0, i32 27
  store i8 1, i8* %_next_leg_is_spline, align 1
  %_flags = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this3, i32 0, i32 1
  %29 = bitcast %"struct.AC_WPNav::wpnav_flags"* %_flags to i8*
  %bf.load = load i8, i8* %29, align 8
  %bf.clear = and i8 %bf.load, -3
  %bf.set = or i8 %bf.clear, 2
  store i8 %bf.set, i8* %29, align 8
  %_this_leg_is_spline39 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this3, i32 0, i32 26
  %30 = load i8, i8* %_this_leg_is_spline39, align 8
  %tobool40 = trunc i8 %30 to i1
  br i1 %tobool40, label %if.else44, label %if.then41

if.then41:                                        ; preds = %if.end27
  %_scurve_this_leg = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this3, i32 0, i32 20
  %_spline_next_leg42 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this3, i32 0, i32 25
  %call43 = call float @_ZNK11SplineCurve20get_origin_speed_maxEv(%class.SplineCurve* nonnull align 4 dereferenceable(130) %_spline_next_leg42)
  call void @_ZN6SCurve25set_destination_speed_maxEf(%class.SCurve* nonnull align 4 dereferenceable(604) %_scurve_this_leg, float %call43)
  br label %if.end48

if.else44:                                        ; preds = %if.end27
  %_spline_this_leg45 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this3, i32 0, i32 24
  %_spline_next_leg46 = getelementptr inbounds %class.AC_WPNav, %class.AC_WPNav* %this3, i32 0, i32 25
  %call47 = call float @_ZNK11SplineCurve20get_origin_speed_maxEv(%class.SplineCurve* nonnull align 4 dereferenceable(130) %_spline_next_leg46)
  call void @_ZN11SplineCurve25set_destination_speed_maxEf(%class.SplineCurve* nonnull align 4 dereferenceable(130) %_spline_this_leg45, float %call47)
  br label %if.end48

if.end48:                                         ; preds = %if.else44, %if.then41
  store i1 true, i1* %retval, align 1
  br label %return

return:                                           ; preds = %if.end48, %if.then
  %31 = load i1, i1* %retval, align 1
  ret i1 %31
}

; Function Attrs: mustprogress noinline nounwind optnone uwtable
define linkonce_odr dso_local float @_ZNK11SplineCurve20get_origin_speed_maxEv(%class.SplineCurve* nonnull align 4 dereferenceable(130) %this) #0 comdat align 2 {
entry:
  %this.addr = alloca %class.SplineCurve*, align 8
  store %class.SplineCurve* %this, %class.SplineCurve** %this.addr, align 8
  %this1 = load %class.SplineCurve*, %class.SplineCurve** %this.addr, align 8
  %_origin_speed_max = getelementptr inbounds %class.SplineCurve, %class.SplineCurve* %this1, i32 0, i32 11
  %0 = load float, float* %_origin_speed_max, align 4
  ret float %0
}

attributes #0 = { mustprogress noinline nounwind optnone uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { mustprogress noinline nounwind optnone uwtable "frame-pointer"="none" "min-legal-vector-width"="64" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #2 = { "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { noinline nounwind optnone uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #4 = { argmemonly nofree nounwind willreturn }
attributes #5 = { nofree nosync nounwind readnone speculatable willreturn }
attributes #6 = { noinline nounwind uwtable "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #7 = { nounwind "frame-pointer"="none" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #8 = { nounwind }

!llvm.ident = !{!0}
!llvm.module.flags = !{!1, !2}

!0 = !{!"clang version 13.0.1"}
!1 = !{i32 1, !"wchar_size", i32 4}
!2 = !{i32 7, !"uwtable", i32 1}
